
Scout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0800d640  0800d640  0000e640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbe8  0800dbe8  0000f1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbe8  0800dbe8  0000ebe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbf0  0800dbf0  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbf0  0800dbf0  0000ebf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbf4  0800dbf4  0000ebf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800dbf8  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d8  200001e8  0800dde0  0000f1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009c0  0800dde0  0000f9c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012858  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300e  00000000  00000000  00021a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  00024a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eea  00000000  00000000  00025dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4aa  00000000  00000000  00026caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a1b  00000000  00000000  00041154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ed25  00000000  00000000  00056b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5894  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067e8  00000000  00000000  000f58d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000fc0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d628 	.word	0x0800d628

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800d628 	.word	0x0800d628

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	601a      	str	r2, [r3, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f023 0210 	bic.w	r2, r3, #16
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	431a      	orrs	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	605a      	str	r2, [r3, #4]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b01      	cmp	r3, #1
 800103c:	d101      	bne.n	8001042 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b02      	cmp	r3, #2
 8001062:	d101      	bne.n	8001068 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	330c      	adds	r3, #12
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b2db      	uxtb	r3, r3
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001092:	b480      	push	{r7}
 8001094:	b085      	sub	sp, #20
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	460b      	mov	r3, r1
 800109c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	330c      	adds	r3, #12
 80010a2:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	78fa      	ldrb	r2, [r7, #3]
 80010a8:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80010aa:	bf00      	nop
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	4013      	ands	r3, r2
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	bf0c      	ite	eq
 80010ce:	2301      	moveq	r3, #1
 80010d0:	2300      	movne	r3, #0
 80010d2:	b2db      	uxtb	r3, r3
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	619a      	str	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	041a      	lsls	r2, r3, #16
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	619a      	str	r2, [r3, #24]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001126:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001128:	4907      	ldr	r1, [pc, #28]	@ (8001148 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4313      	orrs	r3, r2
 800112e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001132:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4013      	ands	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40023800 	.word	0x40023800

0800114c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001158:	4907      	ldr	r1, [pc, #28]	@ (8001178 <LL_APB1_GRP1_EnableClock+0x2c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4313      	orrs	r3, r2
 800115e:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001162:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4013      	ands	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40023800 	.word	0x40023800

0800117c <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b090      	sub	sp, #64	@ 0x40
 8001180:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001182:	f107 0318 	add.w	r3, r7, #24
 8001186:	2228      	movs	r2, #40	@ 0x28
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f008 fe46 	bl	8009e1c <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
 800119e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80011a0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80011a4:	f7ff ffd2 	bl	800114c <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80011a8:	2002      	movs	r0, #2
 80011aa:	f7ff ffb7 	bl	800111c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80011ae:	2004      	movs	r0, #4
 80011b0:	f7ff ffb4 	bl	800111c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff ffb1 	bl	800111c <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80011ba:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80011be:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011c0:	2302      	movs	r3, #2
 80011c2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80011d0:	2305      	movs	r3, #5
 80011d2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	463b      	mov	r3, r7
 80011d6:	4619      	mov	r1, r3
 80011d8:	4841      	ldr	r0, [pc, #260]	@ (80012e0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80011da:	f007 fd1c 	bl	8008c16 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80011e2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80011e6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80011ec:	2302      	movs	r3, #2
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80011f0:	2301      	movs	r3, #1
 80011f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80011f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80011fa:	2318      	movs	r3, #24
 80011fc:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80011fe:	2300      	movs	r3, #0
 8001200:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001206:	230a      	movs	r3, #10
 8001208:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 800120a:	f107 0318 	add.w	r3, r7, #24
 800120e:	4619      	mov	r1, r3
 8001210:	4834      	ldr	r0, [pc, #208]	@ (80012e4 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001212:	f007 fd96 	bl	8008d42 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001216:	2100      	movs	r1, #0
 8001218:	4832      	ldr	r0, [pc, #200]	@ (80012e4 <BNO080_GPIO_SPI_Initialization+0x168>)
 800121a:	f7ff fef3 	bl	8001004 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 800121e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001222:	4831      	ldr	r0, [pc, #196]	@ (80012e8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001224:	f7ff ff6a 	bl	80010fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001228:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800122c:	482c      	ldr	r0, [pc, #176]	@ (80012e0 <BNO080_GPIO_SPI_Initialization+0x164>)
 800122e:	f7ff ff65 	bl	80010fc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8001232:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001236:	482c      	ldr	r0, [pc, #176]	@ (80012e8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001238:	f7ff ff60 	bl	80010fc <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 800123c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001240:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001242:	2301      	movs	r3, #1
 8001244:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001252:	463b      	mov	r3, r7
 8001254:	4619      	mov	r1, r3
 8001256:	4822      	ldr	r0, [pc, #136]	@ (80012e0 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001258:	f007 fcdd 	bl	8008c16 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 800125c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001260:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001262:	2301      	movs	r3, #1
 8001264:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001272:	463b      	mov	r3, r7
 8001274:	4619      	mov	r1, r3
 8001276:	481c      	ldr	r0, [pc, #112]	@ (80012e8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001278:	f007 fccd 	bl	8008c16 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 800127c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001280:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001282:	2301      	movs	r3, #1
 8001284:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001292:	463b      	mov	r3, r7
 8001294:	4619      	mov	r1, r3
 8001296:	4814      	ldr	r0, [pc, #80]	@ (80012e8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001298:	f007 fcbd 	bl	8008c16 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 800129c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012a0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 80012aa:	463b      	mov	r3, r7
 80012ac:	4619      	mov	r1, r3
 80012ae:	480e      	ldr	r0, [pc, #56]	@ (80012e8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80012b0:	f007 fcb1 	bl	8008c16 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 80012b4:	480b      	ldr	r0, [pc, #44]	@ (80012e4 <BNO080_GPIO_SPI_Initialization+0x168>)
 80012b6:	f7ff fe95 	bl	8000fe4 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 80012ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012be:	4808      	ldr	r0, [pc, #32]	@ (80012e0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80012c0:	f7ff ff0e 	bl	80010e0 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 80012c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012c8:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80012ca:	f7ff ff09 	bl	80010e0 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80012ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80012d4:	f7ff ff04 	bl	80010e0 <LL_GPIO_SetOutputPin>
}
 80012d8:	bf00      	nop
 80012da:	3740      	adds	r7, #64	@ 0x40
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40003800 	.word	0x40003800
 80012e8:	40020000 	.word	0x40020000

080012ec <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80012f2:	f7ff ff43 	bl	800117c <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80012f6:	482e      	ldr	r0, [pc, #184]	@ (80013b0 <BNO080_Initialization+0xc4>)
 80012f8:	f008 fc48 	bl	8009b8c <iprintf>
	
	CHIP_DESELECT(BNO080);
 80012fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001300:	482c      	ldr	r0, [pc, #176]	@ (80013b4 <BNO080_Initialization+0xc8>)
 8001302:	f7ff feed 	bl	80010e0 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 8001306:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800130a:	482b      	ldr	r0, [pc, #172]	@ (80013b8 <BNO080_Initialization+0xcc>)
 800130c:	f7ff fee8 	bl	80010e0 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8001310:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001314:	4828      	ldr	r0, [pc, #160]	@ (80013b8 <BNO080_Initialization+0xcc>)
 8001316:	f7ff fef1 	bl	80010fc <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 800131a:	20c8      	movs	r0, #200	@ 0xc8
 800131c:	f004 fbe8 	bl	8005af0 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8001320:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001324:	4824      	ldr	r0, [pc, #144]	@ (80013b8 <BNO080_Initialization+0xcc>)
 8001326:	f7ff fedb 	bl	80010e0 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 800132a:	f000 fb23 	bl	8001974 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 800132e:	f000 fb21 	bl	8001974 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001332:	f000 fb43 	bl	80019bc <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8001336:	f000 fb1d 	bl	8001974 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800133a:	f000 fb3f 	bl	80019bc <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 800133e:	4b1f      	ldr	r3, [pc, #124]	@ (80013bc <BNO080_Initialization+0xd0>)
 8001340:	22f9      	movs	r2, #249	@ 0xf9
 8001342:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8001344:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <BNO080_Initialization+0xd0>)
 8001346:	2200      	movs	r2, #0
 8001348:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 800134a:	2102      	movs	r1, #2
 800134c:	2002      	movs	r0, #2
 800134e:	f000 fba5 	bl	8001a9c <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 8001352:	f000 fb0f 	bl	8001974 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 8001356:	f000 fb31 	bl	80019bc <BNO080_receivePacket>
 800135a:	4603      	mov	r3, r0
 800135c:	2b01      	cmp	r3, #1
 800135e:	d11b      	bne.n	8001398 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001360:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <BNO080_Initialization+0xd4>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <BNO080_Initialization+0xd4>)
 8001368:	785b      	ldrb	r3, [r3, #1]
 800136a:	461a      	mov	r2, r3
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <BNO080_Initialization+0xd4>)
 800136e:	789b      	ldrb	r3, [r3, #2]
 8001370:	4618      	mov	r0, r3
 8001372:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <BNO080_Initialization+0xd4>)
 8001374:	78db      	ldrb	r3, [r3, #3]
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	4603      	mov	r3, r0
 800137a:	4812      	ldr	r0, [pc, #72]	@ (80013c4 <BNO080_Initialization+0xd8>)
 800137c:	f008 fc06 	bl	8009b8c <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001380:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <BNO080_Initialization+0xd0>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2bf8      	cmp	r3, #248	@ 0xf8
 8001386:	d107      	bne.n	8001398 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <BNO080_Initialization+0xd0>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	480e      	ldr	r0, [pc, #56]	@ (80013c8 <BNO080_Initialization+0xdc>)
 8001390:	f008 fbfc 	bl	8009b8c <iprintf>
			return (0);
 8001394:	2300      	movs	r3, #0
 8001396:	e007      	b.n	80013a8 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <BNO080_Initialization+0xd0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	22f8      	movs	r2, #248	@ 0xf8
 800139e:	4619      	mov	r1, r3
 80013a0:	480a      	ldr	r0, [pc, #40]	@ (80013cc <BNO080_Initialization+0xe0>)
 80013a2:	f008 fbf3 	bl	8009b8c <iprintf>
	return (1); //Something went wrong
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	0800d640 	.word	0x0800d640
 80013b4:	40020400 	.word	0x40020400
 80013b8:	40020000 	.word	0x40020000
 80013bc:	20000208 	.word	0x20000208
 80013c0:	20000204 	.word	0x20000204
 80013c4:	0800d654 	.word	0x0800d654
 80013c8:	0800d66c 	.word	0x0800d66c
 80013cc:	0800d68c 	.word	0x0800d68c

080013d0 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80013da:	bf00      	nop
 80013dc:	480c      	ldr	r0, [pc, #48]	@ (8001410 <SPI2_SendByte+0x40>)
 80013de:	f7ff fe37 	bl	8001050 <LL_SPI_IsActiveFlag_TXE>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f9      	beq.n	80013dc <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4619      	mov	r1, r3
 80013ec:	4808      	ldr	r0, [pc, #32]	@ (8001410 <SPI2_SendByte+0x40>)
 80013ee:	f7ff fe50 	bl	8001092 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80013f2:	bf00      	nop
 80013f4:	4806      	ldr	r0, [pc, #24]	@ (8001410 <SPI2_SendByte+0x40>)
 80013f6:	f7ff fe18 	bl	800102a <LL_SPI_IsActiveFlag_RXNE>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f9      	beq.n	80013f4 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8001400:	4803      	ldr	r0, [pc, #12]	@ (8001410 <SPI2_SendByte+0x40>)
 8001402:	f7ff fe38 	bl	8001076 <LL_SPI_ReceiveData8>
 8001406:	4603      	mov	r3, r0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40003800 	.word	0x40003800

08001414 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001418:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800141c:	4811      	ldr	r0, [pc, #68]	@ (8001464 <BNO080_dataAvailable+0x50>)
 800141e:	f7ff fe4a 	bl	80010b6 <LL_GPIO_IsInputPinSet>
 8001422:	4603      	mov	r3, r0
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <BNO080_dataAvailable+0x18>
		return (0);
 8001428:	2300      	movs	r3, #0
 800142a:	e019      	b.n	8001460 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 800142c:	f000 fac6 	bl	80019bc <BNO080_receivePacket>
 8001430:	4603      	mov	r3, r0
 8001432:	2b01      	cmp	r3, #1
 8001434:	d113      	bne.n	800145e <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001436:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <BNO080_dataAvailable+0x54>)
 8001438:	789b      	ldrb	r3, [r3, #2]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d107      	bne.n	800144e <BNO080_dataAvailable+0x3a>
 800143e:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <BNO080_dataAvailable+0x58>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2bfb      	cmp	r3, #251	@ 0xfb
 8001444:	d103      	bne.n	800144e <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001446:	f000 f82f 	bl	80014a8 <BNO080_parseInputReport>
			return (1);
 800144a:	2301      	movs	r3, #1
 800144c:	e008      	b.n	8001460 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <BNO080_dataAvailable+0x54>)
 8001450:	789b      	ldrb	r3, [r3, #2]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d103      	bne.n	800145e <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001456:	f000 f80b 	bl	8001470 <BNO080_parseCommandReport>
			return (1);
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40020000 	.word	0x40020000
 8001468:	20000204 	.word	0x20000204
 800146c:	20000208 	.word	0x20000208

08001470 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <BNO080_parseCommandReport+0x30>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2bf1      	cmp	r3, #241	@ 0xf1
 800147c:	d109      	bne.n	8001492 <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 800147e:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <BNO080_parseCommandReport+0x30>)
 8001480:	789b      	ldrb	r3, [r3, #2]
 8001482:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2b07      	cmp	r3, #7
 8001488:	d103      	bne.n	8001492 <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 800148a:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <BNO080_parseCommandReport+0x30>)
 800148c:	795a      	ldrb	r2, [r3, #5]
 800148e:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <BNO080_parseCommandReport+0x34>)
 8001490:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000208 	.word	0x20000208
 80014a4:	200002c8 	.word	0x200002c8

080014a8 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 80014ae:	4b98      	ldr	r3, [pc, #608]	@ (8001710 <BNO080_parseInputReport+0x268>)
 80014b0:	785b      	ldrb	r3, [r3, #1]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	4b96      	ldr	r3, [pc, #600]	@ (8001710 <BNO080_parseInputReport+0x268>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 80014c0:	8a3b      	ldrh	r3, [r7, #16]
 80014c2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014c6:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80014c8:	8a3b      	ldrh	r3, [r7, #16]
 80014ca:	3b04      	subs	r3, #4
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 80014d0:	4b90      	ldr	r3, [pc, #576]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 80014d2:	791b      	ldrb	r3, [r3, #4]
 80014d4:	061a      	lsls	r2, r3, #24
 80014d6:	4b8f      	ldr	r3, [pc, #572]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 80014d8:	78db      	ldrb	r3, [r3, #3]
 80014da:	041b      	lsls	r3, r3, #16
 80014dc:	431a      	orrs	r2, r3
 80014de:	4b8d      	ldr	r3, [pc, #564]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 80014e0:	789b      	ldrb	r3, [r3, #2]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	4313      	orrs	r3, r2
 80014e6:	4a8b      	ldr	r2, [pc, #556]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 80014e8:	7852      	ldrb	r2, [r2, #1]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	4a8a      	ldr	r2, [pc, #552]	@ (8001718 <BNO080_parseInputReport+0x270>)
 80014ee:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80014f0:	4b88      	ldr	r3, [pc, #544]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 80014f2:	79db      	ldrb	r3, [r3, #7]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80014fa:	4b86      	ldr	r3, [pc, #536]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 80014fc:	7a9b      	ldrb	r3, [r3, #10]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	b21a      	sxth	r2, r3
 8001502:	4b84      	ldr	r3, [pc, #528]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 8001504:	7a5b      	ldrb	r3, [r3, #9]
 8001506:	b21b      	sxth	r3, r3
 8001508:	4313      	orrs	r3, r2
 800150a:	b21b      	sxth	r3, r3
 800150c:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 800150e:	4b81      	ldr	r3, [pc, #516]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 8001510:	7b1b      	ldrb	r3, [r3, #12]
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	b21a      	sxth	r2, r3
 8001516:	4b7f      	ldr	r3, [pc, #508]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 8001518:	7adb      	ldrb	r3, [r3, #11]
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b21b      	sxth	r3, r3
 8001520:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8001522:	4b7c      	ldr	r3, [pc, #496]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 8001524:	7b9b      	ldrb	r3, [r3, #14]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21a      	sxth	r2, r3
 800152a:	4b7a      	ldr	r3, [pc, #488]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 800152c:	7b5b      	ldrb	r3, [r3, #13]
 800152e:	b21b      	sxth	r3, r3
 8001530:	4313      	orrs	r3, r2
 8001532:	b21b      	sxth	r3, r3
 8001534:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 800153e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001542:	2b0e      	cmp	r3, #14
 8001544:	dd09      	ble.n	800155a <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8001546:	4b73      	ldr	r3, [pc, #460]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 8001548:	7c1b      	ldrb	r3, [r3, #16]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	b21a      	sxth	r2, r3
 800154e:	4b71      	ldr	r3, [pc, #452]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 8001550:	7bdb      	ldrb	r3, [r3, #15]
 8001552:	b21b      	sxth	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	b21b      	sxth	r3, r3
 8001558:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 800155a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800155e:	2b10      	cmp	r3, #16
 8001560:	dd09      	ble.n	8001576 <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8001562:	4b6c      	ldr	r3, [pc, #432]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 8001564:	7c9b      	ldrb	r3, [r3, #18]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	4b6a      	ldr	r3, [pc, #424]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 800156c:	7c5b      	ldrb	r3, [r3, #17]
 800156e:	b21b      	sxth	r3, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	b21b      	sxth	r3, r3
 8001574:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8001576:	4b67      	ldr	r3, [pc, #412]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 8001578:	795b      	ldrb	r3, [r3, #5]
 800157a:	2b1e      	cmp	r3, #30
 800157c:	dc46      	bgt.n	800160c <BNO080_parseInputReport+0x164>
 800157e:	2b00      	cmp	r3, #0
 8001580:	f340 80bf 	ble.w	8001702 <BNO080_parseInputReport+0x25a>
 8001584:	3b01      	subs	r3, #1
 8001586:	2b1d      	cmp	r3, #29
 8001588:	f200 80bb 	bhi.w	8001702 <BNO080_parseInputReport+0x25a>
 800158c:	a201      	add	r2, pc, #4	@ (adr r2, 8001594 <BNO080_parseInputReport+0xec>)
 800158e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001592:	bf00      	nop
 8001594:	08001613 	.word	0x08001613
 8001598:	0800164b 	.word	0x0800164b
 800159c:	08001667 	.word	0x08001667
 80015a0:	0800162f 	.word	0x0800162f
 80015a4:	08001683 	.word	0x08001683
 80015a8:	08001703 	.word	0x08001703
 80015ac:	08001703 	.word	0x08001703
 80015b0:	08001683 	.word	0x08001683
 80015b4:	08001703 	.word	0x08001703
 80015b8:	08001703 	.word	0x08001703
 80015bc:	08001703 	.word	0x08001703
 80015c0:	08001703 	.word	0x08001703
 80015c4:	08001703 	.word	0x08001703
 80015c8:	08001703 	.word	0x08001703
 80015cc:	08001703 	.word	0x08001703
 80015d0:	08001703 	.word	0x08001703
 80015d4:	080016ab 	.word	0x080016ab
 80015d8:	08001703 	.word	0x08001703
 80015dc:	080016b3 	.word	0x080016b3
 80015e0:	08001703 	.word	0x08001703
 80015e4:	08001703 	.word	0x08001703
 80015e8:	08001703 	.word	0x08001703
 80015ec:	08001703 	.word	0x08001703
 80015f0:	08001703 	.word	0x08001703
 80015f4:	08001703 	.word	0x08001703
 80015f8:	08001703 	.word	0x08001703
 80015fc:	08001703 	.word	0x08001703
 8001600:	08001703 	.word	0x08001703
 8001604:	08001703 	.word	0x08001703
 8001608:	080016bd 	.word	0x080016bd
 800160c:	2bf1      	cmp	r3, #241	@ 0xf1
 800160e:	d06d      	beq.n	80016ec <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001610:	e077      	b.n	8001702 <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	b29a      	uxth	r2, r3
 8001616:	4b41      	ldr	r3, [pc, #260]	@ (800171c <BNO080_parseInputReport+0x274>)
 8001618:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 800161a:	4a41      	ldr	r2, [pc, #260]	@ (8001720 <BNO080_parseInputReport+0x278>)
 800161c:	89bb      	ldrh	r3, [r7, #12]
 800161e:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8001620:	4a40      	ldr	r2, [pc, #256]	@ (8001724 <BNO080_parseInputReport+0x27c>)
 8001622:	897b      	ldrh	r3, [r7, #10]
 8001624:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8001626:	4a40      	ldr	r2, [pc, #256]	@ (8001728 <BNO080_parseInputReport+0x280>)
 8001628:	893b      	ldrh	r3, [r7, #8]
 800162a:	8013      	strh	r3, [r2, #0]
			break;
 800162c:	e069      	b.n	8001702 <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	b29a      	uxth	r2, r3
 8001632:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <BNO080_parseInputReport+0x284>)
 8001634:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 8001636:	4a3e      	ldr	r2, [pc, #248]	@ (8001730 <BNO080_parseInputReport+0x288>)
 8001638:	89bb      	ldrh	r3, [r7, #12]
 800163a:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 800163c:	4a3d      	ldr	r2, [pc, #244]	@ (8001734 <BNO080_parseInputReport+0x28c>)
 800163e:	897b      	ldrh	r3, [r7, #10]
 8001640:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 8001642:	4a3d      	ldr	r2, [pc, #244]	@ (8001738 <BNO080_parseInputReport+0x290>)
 8001644:	893b      	ldrh	r3, [r7, #8]
 8001646:	8013      	strh	r3, [r2, #0]
			break;
 8001648:	e05b      	b.n	8001702 <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b3b      	ldr	r3, [pc, #236]	@ (800173c <BNO080_parseInputReport+0x294>)
 8001650:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 8001652:	4a3b      	ldr	r2, [pc, #236]	@ (8001740 <BNO080_parseInputReport+0x298>)
 8001654:	89bb      	ldrh	r3, [r7, #12]
 8001656:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8001658:	4a3a      	ldr	r2, [pc, #232]	@ (8001744 <BNO080_parseInputReport+0x29c>)
 800165a:	897b      	ldrh	r3, [r7, #10]
 800165c:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 800165e:	4a3a      	ldr	r2, [pc, #232]	@ (8001748 <BNO080_parseInputReport+0x2a0>)
 8001660:	893b      	ldrh	r3, [r7, #8]
 8001662:	8013      	strh	r3, [r2, #0]
			break;
 8001664:	e04d      	b.n	8001702 <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	b29a      	uxth	r2, r3
 800166a:	4b38      	ldr	r3, [pc, #224]	@ (800174c <BNO080_parseInputReport+0x2a4>)
 800166c:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 800166e:	4a38      	ldr	r2, [pc, #224]	@ (8001750 <BNO080_parseInputReport+0x2a8>)
 8001670:	89bb      	ldrh	r3, [r7, #12]
 8001672:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8001674:	4a37      	ldr	r2, [pc, #220]	@ (8001754 <BNO080_parseInputReport+0x2ac>)
 8001676:	897b      	ldrh	r3, [r7, #10]
 8001678:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 800167a:	4a37      	ldr	r2, [pc, #220]	@ (8001758 <BNO080_parseInputReport+0x2b0>)
 800167c:	893b      	ldrh	r3, [r7, #8]
 800167e:	8013      	strh	r3, [r2, #0]
			break;
 8001680:	e03f      	b.n	8001702 <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b35      	ldr	r3, [pc, #212]	@ (800175c <BNO080_parseInputReport+0x2b4>)
 8001688:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 800168a:	4a35      	ldr	r2, [pc, #212]	@ (8001760 <BNO080_parseInputReport+0x2b8>)
 800168c:	89bb      	ldrh	r3, [r7, #12]
 800168e:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8001690:	4a34      	ldr	r2, [pc, #208]	@ (8001764 <BNO080_parseInputReport+0x2bc>)
 8001692:	897b      	ldrh	r3, [r7, #10]
 8001694:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 8001696:	4a34      	ldr	r2, [pc, #208]	@ (8001768 <BNO080_parseInputReport+0x2c0>)
 8001698:	893b      	ldrh	r3, [r7, #8]
 800169a:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 800169c:	4a33      	ldr	r2, [pc, #204]	@ (800176c <BNO080_parseInputReport+0x2c4>)
 800169e:	8afb      	ldrh	r3, [r7, #22]
 80016a0:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 80016a2:	4a33      	ldr	r2, [pc, #204]	@ (8001770 <BNO080_parseInputReport+0x2c8>)
 80016a4:	8abb      	ldrh	r3, [r7, #20]
 80016a6:	8013      	strh	r3, [r2, #0]
			break;
 80016a8:	e02b      	b.n	8001702 <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 80016aa:	4a32      	ldr	r2, [pc, #200]	@ (8001774 <BNO080_parseInputReport+0x2cc>)
 80016ac:	893b      	ldrh	r3, [r7, #8]
 80016ae:	8013      	strh	r3, [r2, #0]
			break;
 80016b0:	e027      	b.n	8001702 <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 80016b2:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 80016b4:	7a5a      	ldrb	r2, [r3, #9]
 80016b6:	4b30      	ldr	r3, [pc, #192]	@ (8001778 <BNO080_parseInputReport+0x2d0>)
 80016b8:	701a      	strb	r2, [r3, #0]
			break;
 80016ba:	e022      	b.n	8001702 <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 80016bc:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 80016be:	7a9a      	ldrb	r2, [r3, #10]
 80016c0:	4b2e      	ldr	r3, [pc, #184]	@ (800177c <BNO080_parseInputReport+0x2d4>)
 80016c2:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80016c4:	2300      	movs	r3, #0
 80016c6:	74fb      	strb	r3, [r7, #19]
 80016c8:	e00c      	b.n	80016e4 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80016ca:	7cfb      	ldrb	r3, [r7, #19]
 80016cc:	f103 020b 	add.w	r2, r3, #11
 80016d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001780 <BNO080_parseInputReport+0x2d8>)
 80016d2:	6819      	ldr	r1, [r3, #0]
 80016d4:	7cfb      	ldrb	r3, [r7, #19]
 80016d6:	440b      	add	r3, r1
 80016d8:	490e      	ldr	r1, [pc, #56]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 80016da:	5c8a      	ldrb	r2, [r1, r2]
 80016dc:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80016de:	7cfb      	ldrb	r3, [r7, #19]
 80016e0:	3301      	adds	r3, #1
 80016e2:	74fb      	strb	r3, [r7, #19]
 80016e4:	7cfb      	ldrb	r3, [r7, #19]
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d9ef      	bls.n	80016ca <BNO080_parseInputReport+0x222>
			break;
 80016ea:	e00a      	b.n	8001702 <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 80016ee:	79db      	ldrb	r3, [r3, #7]
 80016f0:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2b07      	cmp	r3, #7
 80016f6:	d103      	bne.n	8001700 <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <BNO080_parseInputReport+0x26c>)
 80016fa:	7a9a      	ldrb	r2, [r3, #10]
 80016fc:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <BNO080_parseInputReport+0x2dc>)
 80016fe:	701a      	strb	r2, [r3, #0]
			break;
 8001700:	bf00      	nop
}
 8001702:	bf00      	nop
 8001704:	371c      	adds	r7, #28
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000204 	.word	0x20000204
 8001714:	20000208 	.word	0x20000208
 8001718:	200002bc 	.word	0x200002bc
 800171c:	20000294 	.word	0x20000294
 8001720:	2000028e 	.word	0x2000028e
 8001724:	20000290 	.word	0x20000290
 8001728:	20000292 	.word	0x20000292
 800172c:	2000029c 	.word	0x2000029c
 8001730:	20000296 	.word	0x20000296
 8001734:	20000298 	.word	0x20000298
 8001738:	2000029a 	.word	0x2000029a
 800173c:	200002a4 	.word	0x200002a4
 8001740:	2000029e 	.word	0x2000029e
 8001744:	200002a0 	.word	0x200002a0
 8001748:	200002a2 	.word	0x200002a2
 800174c:	200002ac 	.word	0x200002ac
 8001750:	200002a6 	.word	0x200002a6
 8001754:	200002a8 	.word	0x200002a8
 8001758:	200002aa 	.word	0x200002aa
 800175c:	200002b8 	.word	0x200002b8
 8001760:	200002ae 	.word	0x200002ae
 8001764:	200002b0 	.word	0x200002b0
 8001768:	200002b2 	.word	0x200002b2
 800176c:	200002b4 	.word	0x200002b4
 8001770:	200002b6 	.word	0x200002b6
 8001774:	200002ba 	.word	0x200002ba
 8001778:	200002c0 	.word	0x200002c0
 800177c:	200002c1 	.word	0x200002c1
 8001780:	200002c4 	.word	0x200002c4
 8001784:	200002c8 	.word	0x200002c8

08001788 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 800178c:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <BNO080_getQuatI+0x24>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	b21b      	sxth	r3, r3
 8001792:	4a07      	ldr	r2, [pc, #28]	@ (80017b0 <BNO080_getQuatI+0x28>)
 8001794:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f861 	bl	8001864 <BNO080_qToFloat>
 80017a2:	eef0 7a40 	vmov.f32	s15, s0
}
 80017a6:	eeb0 0a67 	vmov.f32	s0, s15
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200002ae 	.word	0x200002ae
 80017b0:	20000000 	.word	0x20000000

080017b4 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 80017b8:	4b07      	ldr	r3, [pc, #28]	@ (80017d8 <BNO080_getQuatJ+0x24>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	b21b      	sxth	r3, r3
 80017be:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <BNO080_getQuatJ+0x28>)
 80017c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 f84b 	bl	8001864 <BNO080_qToFloat>
 80017ce:	eef0 7a40 	vmov.f32	s15, s0
}
 80017d2:	eeb0 0a67 	vmov.f32	s0, s15
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200002b0 	.word	0x200002b0
 80017dc:	20000000 	.word	0x20000000

080017e0 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <BNO080_getQuatK+0x24>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	4a07      	ldr	r2, [pc, #28]	@ (8001808 <BNO080_getQuatK+0x28>)
 80017ec:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 f835 	bl	8001864 <BNO080_qToFloat>
 80017fa:	eef0 7a40 	vmov.f32	s15, s0
}
 80017fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200002b2 	.word	0x200002b2
 8001808:	20000000 	.word	0x20000000

0800180c <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <BNO080_getQuatReal+0x24>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	b21b      	sxth	r3, r3
 8001816:	4a07      	ldr	r2, [pc, #28]	@ (8001834 <BNO080_getQuatReal+0x28>)
 8001818:	f9b2 2000 	ldrsh.w	r2, [r2]
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f000 f81f 	bl	8001864 <BNO080_qToFloat>
 8001826:	eef0 7a40 	vmov.f32	s15, s0
}
 800182a:	eeb0 0a67 	vmov.f32	s0, s15
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200002b4 	.word	0x200002b4
 8001834:	20000000 	.word	0x20000000

08001838 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 800183c:	4b07      	ldr	r3, [pc, #28]	@ (800185c <BNO080_getQuatRadianAccuracy+0x24>)
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	b21b      	sxth	r3, r3
 8001842:	4a07      	ldr	r2, [pc, #28]	@ (8001860 <BNO080_getQuatRadianAccuracy+0x28>)
 8001844:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f809 	bl	8001864 <BNO080_qToFloat>
 8001852:	eef0 7a40 	vmov.f32	s15, s0
}
 8001856:	eeb0 0a67 	vmov.f32	s0, s15
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200002b6 	.word	0x200002b6
 8001860:	20000000 	.word	0x20000000

08001864 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	ed2d 8b02 	vpush	{d8}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	460a      	mov	r2, r1
 8001872:	80fb      	strh	r3, [r7, #6]
 8001874:	4613      	mov	r3, r2
 8001876:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001878:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800187c:	ee07 3a90 	vmov	s15, r3
 8001880:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001884:	797b      	ldrb	r3, [r7, #5]
 8001886:	425b      	negs	r3, r3
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001890:	eef0 0a67 	vmov.f32	s1, s15
 8001894:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001898:	f00a f9b4 	bl	800bc04 <powf>
 800189c:	eef0 7a40 	vmov.f32	s15, s0
 80018a0:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 80018a4:	eeb0 0a67 	vmov.f32	s0, s15
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	ecbd 8b02 	vpop	{d8}
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	2200      	movs	r2, #0
 80018c0:	4619      	mov	r1, r3
 80018c2:	2005      	movs	r0, #5
 80018c4:	f000 f804 	bl	80018d0 <BNO080_setFeatureCommand>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80018de:	4b24      	ldr	r3, [pc, #144]	@ (8001970 <BNO080_setFeatureCommand+0xa0>)
 80018e0:	22fd      	movs	r2, #253	@ 0xfd
 80018e2:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80018e4:	4a22      	ldr	r2, [pc, #136]	@ (8001970 <BNO080_setFeatureCommand+0xa0>)
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 80018ea:	4b21      	ldr	r3, [pc, #132]	@ (8001970 <BNO080_setFeatureCommand+0xa0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80018f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <BNO080_setFeatureCommand+0xa0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 80018f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001970 <BNO080_setFeatureCommand+0xa0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <BNO080_setFeatureCommand+0xa0>)
 8001902:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	0a1b      	lsrs	r3, r3, #8
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <BNO080_setFeatureCommand+0xa0>)
 800190c:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	0c1b      	lsrs	r3, r3, #16
 8001912:	b2da      	uxtb	r2, r3
 8001914:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <BNO080_setFeatureCommand+0xa0>)
 8001916:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	0e1b      	lsrs	r3, r3, #24
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b14      	ldr	r3, [pc, #80]	@ (8001970 <BNO080_setFeatureCommand+0xa0>)
 8001920:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001922:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <BNO080_setFeatureCommand+0xa0>)
 8001924:	2200      	movs	r2, #0
 8001926:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <BNO080_setFeatureCommand+0xa0>)
 800192a:	2200      	movs	r2, #0
 800192c:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <BNO080_setFeatureCommand+0xa0>)
 8001930:	2200      	movs	r2, #0
 8001932:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001934:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <BNO080_setFeatureCommand+0xa0>)
 8001936:	2200      	movs	r2, #0
 8001938:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <BNO080_setFeatureCommand+0xa0>)
 8001940:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <BNO080_setFeatureCommand+0xa0>)
 800194a:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	0c1b      	lsrs	r3, r3, #16
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b07      	ldr	r3, [pc, #28]	@ (8001970 <BNO080_setFeatureCommand+0xa0>)
 8001954:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	0e1b      	lsrs	r3, r3, #24
 800195a:	b2da      	uxtb	r2, r3
 800195c:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <BNO080_setFeatureCommand+0xa0>)
 800195e:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001960:	2111      	movs	r1, #17
 8001962:	2002      	movs	r0, #2
 8001964:	f000 f89a 	bl	8001a9c <BNO080_sendPacket>
}
 8001968:	bf00      	nop
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000208 	.word	0x20000208

08001974 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	e00c      	b.n	800199a <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001980:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001984:	480b      	ldr	r0, [pc, #44]	@ (80019b4 <BNO080_waitForSPI+0x40>)
 8001986:	f7ff fb96 	bl	80010b6 <LL_GPIO_IsInputPinSet>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001990:	2301      	movs	r3, #1
 8001992:	e00a      	b.n	80019aa <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3301      	adds	r3, #1
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d1ee      	bne.n	8001980 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80019a2:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <BNO080_waitForSPI+0x44>)
 80019a4:	f008 f95a 	bl	8009c5c <puts>
	return (0);
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40020000 	.word	0x40020000
 80019b8:	0800d6d8 	.word	0x0800d6d8

080019bc <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80019c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019c6:	4831      	ldr	r0, [pc, #196]	@ (8001a8c <BNO080_receivePacket+0xd0>)
 80019c8:	f7ff fb75 	bl	80010b6 <LL_GPIO_IsInputPinSet>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 80019d2:	2300      	movs	r3, #0
 80019d4:	e056      	b.n	8001a84 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 80019d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019da:	482d      	ldr	r0, [pc, #180]	@ (8001a90 <BNO080_receivePacket+0xd4>)
 80019dc:	f7ff fb8e 	bl	80010fc <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 80019e0:	2000      	movs	r0, #0
 80019e2:	f7ff fcf5 	bl	80013d0 <SPI2_SendByte>
 80019e6:	4603      	mov	r3, r0
 80019e8:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff fcf0 	bl	80013d0 <SPI2_SendByte>
 80019f0:	4603      	mov	r3, r0
 80019f2:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 80019f4:	2000      	movs	r0, #0
 80019f6:	f7ff fceb 	bl	80013d0 <SPI2_SendByte>
 80019fa:	4603      	mov	r3, r0
 80019fc:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 80019fe:	2000      	movs	r0, #0
 8001a00:	f7ff fce6 	bl	80013d0 <SPI2_SendByte>
 8001a04:	4603      	mov	r3, r0
 8001a06:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001a08:	4a22      	ldr	r2, [pc, #136]	@ (8001a94 <BNO080_receivePacket+0xd8>)
 8001a0a:	7b7b      	ldrb	r3, [r7, #13]
 8001a0c:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001a0e:	4a21      	ldr	r2, [pc, #132]	@ (8001a94 <BNO080_receivePacket+0xd8>)
 8001a10:	7b3b      	ldrb	r3, [r7, #12]
 8001a12:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001a14:	4a1f      	ldr	r2, [pc, #124]	@ (8001a94 <BNO080_receivePacket+0xd8>)
 8001a16:	7afb      	ldrb	r3, [r7, #11]
 8001a18:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8001a94 <BNO080_receivePacket+0xd8>)
 8001a1c:	7abb      	ldrb	r3, [r7, #10]
 8001a1e:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001a20:	7b3b      	ldrb	r3, [r7, #12]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	b21a      	sxth	r2, r3
 8001a26:	7b7b      	ldrb	r3, [r7, #13]
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001a2e:	893b      	ldrh	r3, [r7, #8]
 8001a30:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a34:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001a36:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e020      	b.n	8001a84 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001a42:	893b      	ldrh	r3, [r7, #8]
 8001a44:	3b04      	subs	r3, #4
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	81fb      	strh	r3, [r7, #14]
 8001a4e:	e00e      	b.n	8001a6e <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001a50:	20ff      	movs	r0, #255	@ 0xff
 8001a52:	f7ff fcbd 	bl	80013d0 <SPI2_SendByte>
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001a5a:	89fb      	ldrh	r3, [r7, #14]
 8001a5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a5e:	d803      	bhi.n	8001a68 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	490d      	ldr	r1, [pc, #52]	@ (8001a98 <BNO080_receivePacket+0xdc>)
 8001a64:	79fa      	ldrb	r2, [r7, #7]
 8001a66:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001a68:	89fb      	ldrh	r3, [r7, #14]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	81fb      	strh	r3, [r7, #14]
 8001a6e:	89fa      	ldrh	r2, [r7, #14]
 8001a70:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	dbeb      	blt.n	8001a50 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001a78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a7c:	4804      	ldr	r0, [pc, #16]	@ (8001a90 <BNO080_receivePacket+0xd4>)
 8001a7e:	f7ff fb2f 	bl	80010e0 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	20000204 	.word	0x20000204
 8001a98:	20000208 	.word	0x20000208

08001a9c <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	71fb      	strb	r3, [r7, #7]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001aac:	79bb      	ldrb	r3, [r7, #6]
 8001aae:	3304      	adds	r3, #4
 8001ab0:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001ab2:	f7ff ff5f 	bl	8001974 <BNO080_waitForSPI>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001abc:	2300      	movs	r3, #0
 8001abe:	e032      	b.n	8001b26 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001ac0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ac4:	481a      	ldr	r0, [pc, #104]	@ (8001b30 <BNO080_sendPacket+0x94>)
 8001ac6:	f7ff fb19 	bl	80010fc <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001aca:	7bbb      	ldrb	r3, [r7, #14]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fc7f 	bl	80013d0 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001ad2:	7bbb      	ldrb	r3, [r7, #14]
 8001ad4:	121b      	asrs	r3, r3, #8
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fc79 	bl	80013d0 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fc75 	bl	80013d0 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4a12      	ldr	r2, [pc, #72]	@ (8001b34 <BNO080_sendPacket+0x98>)
 8001aea:	5cd2      	ldrb	r2, [r2, r3]
 8001aec:	1c51      	adds	r1, r2, #1
 8001aee:	b2c8      	uxtb	r0, r1
 8001af0:	4910      	ldr	r1, [pc, #64]	@ (8001b34 <BNO080_sendPacket+0x98>)
 8001af2:	54c8      	strb	r0, [r1, r3]
 8001af4:	4610      	mov	r0, r2
 8001af6:	f7ff fc6b 	bl	80013d0 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
 8001afe:	e008      	b.n	8001b12 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	4a0d      	ldr	r2, [pc, #52]	@ (8001b38 <BNO080_sendPacket+0x9c>)
 8001b04:	5cd3      	ldrb	r3, [r2, r3]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fc62 	bl	80013d0 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	79bb      	ldrb	r3, [r7, #6]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d3f2      	bcc.n	8001b00 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001b1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b1e:	4804      	ldr	r0, [pc, #16]	@ (8001b30 <BNO080_sendPacket+0x94>)
 8001b20:	f7ff fade 	bl	80010e0 <LL_GPIO_SetOutputPin>

	return (1);
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40020400 	.word	0x40020400
 8001b34:	20000288 	.word	0x20000288
 8001b38:	20000208 	.word	0x20000208

08001b3c <LL_SPI_Enable>:
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	601a      	str	r2, [r3, #0]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_SPI_SetStandard>:
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f023 0210 	bic.w	r2, r3, #16
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	605a      	str	r2, [r3, #4]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_SPI_IsActiveFlag_TXE>:
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d101      	bne.n	8001bc0 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <LL_SPI_ReceiveData8>:
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	330c      	adds	r3, #12
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	b2db      	uxtb	r3, r3
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_SPI_TransmitData8>:
{
 8001bea:	b480      	push	{r7}
 8001bec:	b085      	sub	sp, #20
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	330c      	adds	r3, #12
 8001bfa:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	78fa      	ldrb	r2, [r7, #3]
 8001c00:	701a      	strb	r2, [r3, #0]
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_GPIO_IsInputPinSet>:
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_GPIO_SetOutputPin>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	619a      	str	r2, [r3, #24]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_GPIO_ResetOutputPin>:
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	041a      	lsls	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	619a      	str	r2, [r3, #24]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <LL_AHB1_GRP1_EnableClock>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001c7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c80:	4907      	ldr	r1, [pc, #28]	@ (8001ca0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c92:	68fb      	ldr	r3, [r7, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	40023800 	.word	0x40023800

08001ca4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001cac:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cb0:	4907      	ldr	r1, [pc, #28]	@ (8001cd0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	40023800 	.word	0x40023800

08001cd4 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b090      	sub	sp, #64	@ 0x40
 8001cd8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001cda:	f107 0318 	add.w	r3, r7, #24
 8001cde:	2228      	movs	r2, #40	@ 0x28
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f008 f89a 	bl	8009e1c <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	463b      	mov	r3, r7
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
 8001cf6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001cf8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001cfc:	f7ff ffd2 	bl	8001ca4 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001d00:	2001      	movs	r0, #1
 8001d02:	f7ff ffb7 	bl	8001c74 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001d06:	2002      	movs	r0, #2
 8001d08:	f7ff ffb4 	bl	8001c74 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001d0c:	23e0      	movs	r3, #224	@ 0xe0
 8001d0e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d10:	2302      	movs	r3, #2
 8001d12:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001d20:	2305      	movs	r3, #5
 8001d22:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	463b      	mov	r3, r7
 8001d26:	4619      	mov	r1, r3
 8001d28:	4825      	ldr	r0, [pc, #148]	@ (8001dc0 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001d2a:	f006 ff74 	bl	8008c16 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001d32:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001d36:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001d40:	2301      	movs	r3, #1
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001d44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001d4a:	2310      	movs	r3, #16
 8001d4c:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001d56:	230a      	movs	r3, #10
 8001d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001d5a:	f107 0318 	add.w	r3, r7, #24
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4818      	ldr	r0, [pc, #96]	@ (8001dc4 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001d62:	f006 ffee 	bl	8008d42 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001d66:	2100      	movs	r1, #0
 8001d68:	4816      	ldr	r0, [pc, #88]	@ (8001dc4 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001d6a:	f7ff fef7 	bl	8001b5c <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001d6e:	2102      	movs	r1, #2
 8001d70:	4815      	ldr	r0, [pc, #84]	@ (8001dc8 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001d72:	f7ff ff6f 	bl	8001c54 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8001d76:	2302      	movs	r3, #2
 8001d78:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001d8a:	463b      	mov	r3, r7
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	480e      	ldr	r0, [pc, #56]	@ (8001dc8 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001d90:	f006 ff41 	bl	8008c16 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001d94:	2301      	movs	r3, #1
 8001d96:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001da0:	463b      	mov	r3, r7
 8001da2:	4619      	mov	r1, r3
 8001da4:	4808      	ldr	r0, [pc, #32]	@ (8001dc8 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001da6:	f006 ff36 	bl	8008c16 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001daa:	4806      	ldr	r0, [pc, #24]	@ (8001dc4 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001dac:	f7ff fec6 	bl	8001b3c <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001db0:	2102      	movs	r1, #2
 8001db2:	4805      	ldr	r0, [pc, #20]	@ (8001dc8 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001db4:	f7ff ff40 	bl	8001c38 <LL_GPIO_SetOutputPin>
}
 8001db8:	bf00      	nop
 8001dba:	3740      	adds	r7, #64	@ 0x40
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	40013000 	.word	0x40013000
 8001dc8:	40020400 	.word	0x40020400

08001dcc <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001dd6:	bf00      	nop
 8001dd8:	480c      	ldr	r0, [pc, #48]	@ (8001e0c <SPI1_SendByte+0x40>)
 8001dda:	f7ff fee5 	bl	8001ba8 <LL_SPI_IsActiveFlag_TXE>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f9      	beq.n	8001dd8 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	4619      	mov	r1, r3
 8001de8:	4808      	ldr	r0, [pc, #32]	@ (8001e0c <SPI1_SendByte+0x40>)
 8001dea:	f7ff fefe 	bl	8001bea <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8001dee:	bf00      	nop
 8001df0:	4806      	ldr	r0, [pc, #24]	@ (8001e0c <SPI1_SendByte+0x40>)
 8001df2:	f7ff fec6 	bl	8001b82 <LL_SPI_IsActiveFlag_RXNE>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f9      	beq.n	8001df0 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001dfc:	4803      	ldr	r0, [pc, #12]	@ (8001e0c <SPI1_SendByte+0x40>)
 8001dfe:	f7ff fee6 	bl	8001bce <LL_SPI_ReceiveData8>
 8001e02:	4603      	mov	r3, r0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40013000 	.word	0x40013000

08001e10 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	480b      	ldr	r0, [pc, #44]	@ (8001e4c <ICM20602_Readbyte+0x3c>)
 8001e1e:	f7ff ff19 	bl	8001c54 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ffce 	bl	8001dcc <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001e30:	2000      	movs	r0, #0
 8001e32:	f7ff ffcb 	bl	8001dcc <SPI1_SendByte>
 8001e36:	4603      	mov	r3, r0
 8001e38:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8001e3a:	2102      	movs	r1, #2
 8001e3c:	4803      	ldr	r0, [pc, #12]	@ (8001e4c <ICM20602_Readbyte+0x3c>)
 8001e3e:	f7ff fefb 	bl	8001c38 <LL_GPIO_SetOutputPin>
	
	return val;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40020400 	.word	0x40020400

08001e50 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	603a      	str	r2, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8001e64:	2102      	movs	r1, #2
 8001e66:	4810      	ldr	r0, [pc, #64]	@ (8001ea8 <ICM20602_Readbytes+0x58>)
 8001e68:	f7ff fef4 	bl	8001c54 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ffa9 	bl	8001dcc <SPI1_SendByte>
	while(i < len)
 8001e7a:	e009      	b.n	8001e90 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	60fa      	str	r2, [r7, #12]
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	18d4      	adds	r4, r2, r3
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7ff ffa0 	bl	8001dcc <SPI1_SendByte>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8001e90:	79bb      	ldrb	r3, [r7, #6]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d3f1      	bcc.n	8001e7c <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8001e98:	2102      	movs	r1, #2
 8001e9a:	4803      	ldr	r0, [pc, #12]	@ (8001ea8 <ICM20602_Readbytes+0x58>)
 8001e9c:	f7ff fecc 	bl	8001c38 <LL_GPIO_SetOutputPin>
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd90      	pop	{r4, r7, pc}
 8001ea8:	40020400 	.word	0x40020400

08001eac <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	71fb      	strb	r3, [r7, #7]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	480b      	ldr	r0, [pc, #44]	@ (8001eec <ICM20602_Writebyte+0x40>)
 8001ec0:	f7ff fec8 	bl	8001c54 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff7d 	bl	8001dcc <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8001ed2:	79bb      	ldrb	r3, [r7, #6]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff79 	bl	8001dcc <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001eda:	2102      	movs	r1, #2
 8001edc:	4803      	ldr	r0, [pc, #12]	@ (8001eec <ICM20602_Writebyte+0x40>)
 8001ede:	f7ff feab 	bl	8001c38 <LL_GPIO_SetOutputPin>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40020400 	.word	0x40020400

08001ef0 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001efa:	f107 0308 	add.w	r3, r7, #8
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001f04:	463b      	mov	r3, r7
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001f0c:	f7ff fee2 	bl	8001cd4 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8001f10:	4833      	ldr	r0, [pc, #204]	@ (8001fe0 <ICM20602_Initialization+0xf0>)
 8001f12:	f007 fe3b 	bl	8009b8c <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001f16:	2075      	movs	r0, #117	@ 0x75
 8001f18:	f7ff ff7a 	bl	8001e10 <ICM20602_Readbyte>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	2b12      	cmp	r3, #18
 8001f24:	d105      	bne.n	8001f32 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	482e      	ldr	r0, [pc, #184]	@ (8001fe4 <ICM20602_Initialization+0xf4>)
 8001f2c:	f007 fe2e 	bl	8009b8c <iprintf>
 8001f30:	e012      	b.n	8001f58 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	2b12      	cmp	r3, #18
 8001f36:	d00f      	beq.n	8001f58 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001f38:	2075      	movs	r0, #117	@ 0x75
 8001f3a:	f7ff ff69 	bl	8001e10 <ICM20602_Readbyte>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	2b12      	cmp	r3, #18
 8001f46:	d007      	beq.n	8001f58 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	2212      	movs	r2, #18
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4826      	ldr	r0, [pc, #152]	@ (8001fe8 <ICM20602_Initialization+0xf8>)
 8001f50:	f007 fe1c 	bl	8009b8c <iprintf>
			return 1; //ERROR
 8001f54:	2301      	movs	r3, #1
 8001f56:	e03f      	b.n	8001fd8 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001f58:	2180      	movs	r1, #128	@ 0x80
 8001f5a:	206b      	movs	r0, #107	@ 0x6b
 8001f5c:	f7ff ffa6 	bl	8001eac <ICM20602_Writebyte>
	HAL_Delay(50);
 8001f60:	2032      	movs	r0, #50	@ 0x32
 8001f62:	f003 fdc5 	bl	8005af0 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8001f66:	2101      	movs	r1, #1
 8001f68:	206b      	movs	r0, #107	@ 0x6b
 8001f6a:	f7ff ff9f 	bl	8001eac <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8001f6e:	2032      	movs	r0, #50	@ 0x32
 8001f70:	f003 fdbe 	bl	8005af0 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8001f74:	2138      	movs	r1, #56	@ 0x38
 8001f76:	206c      	movs	r0, #108	@ 0x6c
 8001f78:	f7ff ff98 	bl	8001eac <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8001f7c:	2032      	movs	r0, #50	@ 0x32
 8001f7e:	f003 fdb7 	bl	8005af0 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001f82:	2100      	movs	r1, #0
 8001f84:	2019      	movs	r0, #25
 8001f86:	f7ff ff91 	bl	8001eac <ICM20602_Writebyte>
	HAL_Delay(50);
 8001f8a:	2032      	movs	r0, #50	@ 0x32
 8001f8c:	f003 fdb0 	bl	8005af0 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001f90:	2105      	movs	r1, #5
 8001f92:	201a      	movs	r0, #26
 8001f94:	f7ff ff8a 	bl	8001eac <ICM20602_Writebyte>
	HAL_Delay(50);
 8001f98:	2032      	movs	r0, #50	@ 0x32
 8001f9a:	f003 fda9 	bl	8005af0 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001f9e:	2118      	movs	r1, #24
 8001fa0:	201b      	movs	r0, #27
 8001fa2:	f7ff ff83 	bl	8001eac <ICM20602_Writebyte>
	HAL_Delay(50);
 8001fa6:	2032      	movs	r0, #50	@ 0x32
 8001fa8:	f003 fda2 	bl	8005af0 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001fac:	2118      	movs	r1, #24
 8001fae:	201c      	movs	r0, #28
 8001fb0:	f7ff ff7c 	bl	8001eac <ICM20602_Writebyte>
	HAL_Delay(50);
 8001fb4:	2032      	movs	r0, #50	@ 0x32
 8001fb6:	f003 fd9b 	bl	8005af0 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001fba:	2103      	movs	r1, #3
 8001fbc:	201d      	movs	r0, #29
 8001fbe:	f7ff ff75 	bl	8001eac <ICM20602_Writebyte>
	HAL_Delay(50);
 8001fc2:	2032      	movs	r0, #50	@ 0x32
 8001fc4:	f003 fd94 	bl	8005af0 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001fc8:	2101      	movs	r1, #1
 8001fca:	2038      	movs	r0, #56	@ 0x38
 8001fcc:	f7ff ff6e 	bl	8001eac <ICM20602_Writebyte>
	HAL_Delay(50);
 8001fd0:	2032      	movs	r0, #50	@ 0x32
 8001fd2:	f003 fd8d 	bl	8005af0 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	0800d6ec 	.word	0x0800d6ec
 8001fe4:	0800d704 	.word	0x0800d704
 8001fe8:	0800d728 	.word	0x0800d728

08001fec <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 8001ff4:	f107 0308 	add.w	r3, r7, #8
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2106      	movs	r1, #6
 8001ffc:	2043      	movs	r0, #67	@ 0x43
 8001ffe:	f7ff ff27 	bl	8001e50 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 8002002:	7a3b      	ldrb	r3, [r7, #8]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21a      	sxth	r2, r3
 8002008:	7a7b      	ldrb	r3, [r7, #9]
 800200a:	b21b      	sxth	r3, r3
 800200c:	4313      	orrs	r3, r2
 800200e:	b21a      	sxth	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 8002014:	7abb      	ldrb	r3, [r7, #10]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	b219      	sxth	r1, r3
 800201a:	7afb      	ldrb	r3, [r7, #11]
 800201c:	b21a      	sxth	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3302      	adds	r3, #2
 8002022:	430a      	orrs	r2, r1
 8002024:	b212      	sxth	r2, r2
 8002026:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 8002028:	7b3b      	ldrb	r3, [r7, #12]
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	b219      	sxth	r1, r3
 800202e:	7b7b      	ldrb	r3, [r7, #13]
 8002030:	b21a      	sxth	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3304      	adds	r3, #4
 8002036:	430a      	orrs	r2, r1
 8002038:	b212      	sxth	r2, r2
 800203a:	801a      	strh	r2, [r3, #0]
}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8002048:	2101      	movs	r1, #1
 800204a:	4803      	ldr	r0, [pc, #12]	@ (8002058 <ICM20602_DataReady+0x14>)
 800204c:	f7ff fddf 	bl	8001c0e <LL_GPIO_IsInputPinSet>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40020400 	.word	0x40020400

0800205c <Double_Roll_Pitch_PID_Calculation>:
#define DT 0.001f
#define OUTER_DERIV_FILT_ENABLE 1
#define INNER_DERIV_FILT_ENABLE 1

void Double_Roll_Pitch_PID_Calculation(PIDDouble* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	ed87 0a02 	vstr	s0, [r7, #8]
 8002068:	edc7 0a01 	vstr	s1, [r7, #4]
 800206c:	ed87 1a00 	vstr	s2, [r7]
	/*********** Double PID Outer Begin (Roll and Pitch Angular Position Control) *************/
	axis->out.reference = set_point_angle;	//Set point of outer PID control
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	645a      	str	r2, [r3, #68]	@ 0x44
	axis->out.meas_value = angle;			//BNO080 rotation angle
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	649a      	str	r2, [r3, #72]	@ 0x48

	axis->out.error = axis->out.reference - axis->out.meas_value;	//Define error of outer loop
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	axis->out.p_result = axis->out.error * axis->out.kp;			//Calculate P result of outer loop
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800209e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

	axis->out.error_sum = axis->out.error_sum + axis->out.error * DT;	//Define summation of outer loop
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80020b4:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80022b4 <Double_Roll_Pitch_PID_Calculation+0x258>
 80020b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
#define OUT_ERR_SUM_MAX 500
#define OUT_I_ERR_MIN -OUT_ERR_SUM_MAX
	if(axis->out.error_sum > OUT_ERR_SUM_MAX) axis->out.error_sum = OUT_ERR_SUM_MAX;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80020cc:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80022b8 <Double_Roll_Pitch_PID_Calculation+0x25c>
 80020d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d8:	dd03      	ble.n	80020e2 <Double_Roll_Pitch_PID_Calculation+0x86>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4a77      	ldr	r2, [pc, #476]	@ (80022bc <Double_Roll_Pitch_PID_Calculation+0x260>)
 80020de:	655a      	str	r2, [r3, #84]	@ 0x54
 80020e0:	e00c      	b.n	80020fc <Double_Roll_Pitch_PID_Calculation+0xa0>
	else if(axis->out.error_sum < OUT_I_ERR_MIN) axis->out.error_sum = OUT_I_ERR_MIN;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80020e8:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80022c0 <Double_Roll_Pitch_PID_Calculation+0x264>
 80020ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f4:	d502      	bpl.n	80020fc <Double_Roll_Pitch_PID_Calculation+0xa0>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4a72      	ldr	r2, [pc, #456]	@ (80022c4 <Double_Roll_Pitch_PID_Calculation+0x268>)
 80020fa:	655a      	str	r2, [r3, #84]	@ 0x54
	axis->out.i_result = axis->out.error_sum * axis->out.ki;			//Calculate I result of outer loop
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64

	axis->out.error_deriv = -rate;										//Define derivative of outer loop (rate = ICM-20602 Angular Rate)
 8002112:	edd7 7a00 	vldr	s15, [r7]
 8002116:	eef1 7a67 	vneg.f32	s15, s15
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

#if !OUTER_DERIV_FILT_ENABLE
	axis->out.d_result = axis->out.error_deriv * axis->out.kd;			//Calculate D result of outer loop
#else
	axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.4f + axis->out.error_deriv * 0.6f;	//filter for derivative
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8002126:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80022c8 <Double_Roll_Pitch_PID_Calculation+0x26c>
 800212a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002134:	eddf 6a65 	vldr	s13, [pc, #404]	@ 80022cc <Double_Roll_Pitch_PID_Calculation+0x270>
 8002138:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800213c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
	axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;									//Calculate D result of inner loop
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
#endif

	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;  //Calculate PID result of outer loop
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002168:	ee37 7a27 	vadd.f32	s14, s14, s15
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8002172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
	/****************************************************************************************/
	
	/************ Double PID Inner Begin (Roll and Pitch Angular Rate Control) **************/
	axis->in.reference = axis->out.pid_result;	//Set point of inner PID control is the PID result of outer loop (for double PID control)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	60da      	str	r2, [r3, #12]
	axis->in.meas_value = rate;					//ICM-20602 angular rate
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	611a      	str	r2, [r3, #16]

	axis->in.error = axis->in.reference - axis->in.meas_value;	//Define error of inner loop
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	edd3 7a04 	vldr	s15, [r3, #16]
 8002196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->in.p_result = axis->in.error * axis->in.kp;			//Calculate P result of inner loop
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	ed93 7a06 	vldr	s14, [r3, #24]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;	//Define summation of inner loop
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	ed93 7a07 	vldr	s14, [r3, #28]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	edd3 7a06 	vldr	s15, [r3, #24]
 80021c2:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 80022b4 <Double_Roll_Pitch_PID_Calculation+0x258>
 80021c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	edc3 7a07 	vstr	s15, [r3, #28]
#define IN_ERR_SUM_MAX 500
#define IN_I_ERR_MIN -IN_ERR_SUM_MAX
	if(axis->out.error_sum > IN_ERR_SUM_MAX) axis->out.error_sum = IN_ERR_SUM_MAX;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80021da:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80022b8 <Double_Roll_Pitch_PID_Calculation+0x25c>
 80021de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e6:	dd03      	ble.n	80021f0 <Double_Roll_Pitch_PID_Calculation+0x194>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4a34      	ldr	r2, [pc, #208]	@ (80022bc <Double_Roll_Pitch_PID_Calculation+0x260>)
 80021ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80021ee:	e00c      	b.n	800220a <Double_Roll_Pitch_PID_Calculation+0x1ae>
	else if(axis->out.error_sum < IN_I_ERR_MIN) axis->out.error_sum = IN_I_ERR_MIN;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80021f6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80022c0 <Double_Roll_Pitch_PID_Calculation+0x264>
 80021fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002202:	d502      	bpl.n	800220a <Double_Roll_Pitch_PID_Calculation+0x1ae>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a2f      	ldr	r2, [pc, #188]	@ (80022c4 <Double_Roll_Pitch_PID_Calculation+0x268>)
 8002208:	655a      	str	r2, [r3, #84]	@ 0x54
	axis->in.i_result = axis->in.error_sum * axis->in.ki;							//Calculate I result of inner loop
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	edd3 7a01 	vldr	s15, [r3, #4]
 8002216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;	//Define derivative of inner loop
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	ed93 7a04 	vldr	s14, [r3, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	edd3 7a05 	vldr	s15, [r3, #20]
 800222c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002230:	eeb1 7a67 	vneg.f32	s14, s15
 8002234:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80022b4 <Double_Roll_Pitch_PID_Calculation+0x258>
 8002238:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->in.meas_value_prev = axis->in.meas_value;									//Refresh value_prev to the latest value
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	615a      	str	r2, [r3, #20]

#if !INNER_DERIV_FILT_ENABLE
	axis->in.d_result = axis->in.error_deriv * axis->in.kd;				//Calculate D result of inner loop
#else
	axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;	//filter for derivative
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002250:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002254:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	edd3 7a08 	vldr	s15, [r3, #32]
 800225e:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002262:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;								//Calculate D result of inner loop
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	edd3 7a02 	vldr	s15, [r3, #8]
 800227c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
#endif
	
	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result; //Calculate PID result of inner loop
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002292:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800229c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	/****************************************************************************************/
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	3a83126f 	.word	0x3a83126f
 80022b8:	43fa0000 	.word	0x43fa0000
 80022bc:	43fa0000 	.word	0x43fa0000
 80022c0:	c3fa0000 	.word	0xc3fa0000
 80022c4:	c3fa0000 	.word	0xc3fa0000
 80022c8:	3ecccccd 	.word	0x3ecccccd
 80022cc:	3f19999a 	.word	0x3f19999a

080022d0 <Single_Yaw_Heading_PID_Calculation>:

void Single_Yaw_Heading_PID_Calculation(PIDSingle* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80022dc:	edc7 0a01 	vstr	s1, [r7, #4]
 80022e0:	ed87 1a00 	vstr	s2, [r7]
	/*********** Single PID Begin (Yaw Angular Position) *************/
	axis->reference = set_point_angle;	//Set point of yaw heading @ yaw stick is center.
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	60da      	str	r2, [r3, #12]
	axis->meas_value = angle;			//Current BNO080_Yaw angle @ yaw stick is center.
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw angle control
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80022fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	edc3 7a06 	vstr	s15, [r3, #24]

	if(axis->error > 180.f) axis->error -= 360.f;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	edd3 7a06 	vldr	s15, [r3, #24]
 800230c:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80023f4 <Single_Yaw_Heading_PID_Calculation+0x124>
 8002310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002318:	dd0a      	ble.n	8002330 <Single_Yaw_Heading_PID_Calculation+0x60>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002320:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80023f8 <Single_Yaw_Heading_PID_Calculation+0x128>
 8002324:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	edc3 7a06 	vstr	s15, [r3, #24]
 800232e:	e013      	b.n	8002358 <Single_Yaw_Heading_PID_Calculation+0x88>
	else if(axis->error < -180.f) axis->error += 360.f;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	edd3 7a06 	vldr	s15, [r3, #24]
 8002336:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80023fc <Single_Yaw_Heading_PID_Calculation+0x12c>
 800233a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800233e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002342:	d509      	bpl.n	8002358 <Single_Yaw_Heading_PID_Calculation+0x88>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	edd3 7a06 	vldr	s15, [r3, #24]
 800234a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80023f8 <Single_Yaw_Heading_PID_Calculation+0x128>
 800234e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	edc3 7a06 	vstr	s15, [r3, #24]
	
	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw angle control
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	ed93 7a06 	vldr	s14, [r3, #24]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	edd3 7a00 	vldr	s15, [r3]
 8002364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw angle control
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	ed93 7a07 	vldr	s14, [r3, #28]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	edd3 7a06 	vldr	s15, [r3, #24]
 800237a:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8002400 <Single_Yaw_Heading_PID_Calculation+0x130>
 800237e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	edc3 7a07 	vstr	s15, [r3, #28]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw angle control
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	edd3 7a01 	vldr	s15, [r3, #4]
 8002398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	axis->error_deriv = -rate;						//Define differentiation of yaw angle control
 80023a2:	edd7 7a00 	vldr	s15, [r7]
 80023a6:	eef1 7a67 	vneg.f32	s15, s15
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->d_result = axis->error_deriv * axis->kd;	//Calculate D result of yaw angle control
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	ed93 7a08 	vldr	s14, [r3, #32]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80023bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	
	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw angle control
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80023d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80023dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	/***************************************************************/
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	43340000 	.word	0x43340000
 80023f8:	43b40000 	.word	0x43b40000
 80023fc:	c3340000 	.word	0xc3340000
 8002400:	3a83126f 	.word	0x3a83126f

08002404 <Single_Yaw_Rate_PID_Calculation>:

void Single_Yaw_Rate_PID_Calculation(PIDSingle* axis, float set_point_rate, float rate/*ICM-20602 Angular Rate*/)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002410:	edc7 0a01 	vstr	s1, [r7, #4]
	/*********** Single PID Begin (Yaw Angular Rate Control) *************/
	axis->reference = set_point_rate;	//Set point of yaw heading @ yaw stick is not center.
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	60da      	str	r2, [r3, #12]
	axis->meas_value = rate;			//Current ICM20602.gyro_z @ yaw stick is not center.
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw rate control
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	ed93 7a03 	vldr	s14, [r3, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	edd3 7a04 	vldr	s15, [r3, #16]
 800242c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw rate control
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	ed93 7a06 	vldr	s14, [r3, #24]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	edd3 7a00 	vldr	s15, [r3]
 8002442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw rate control
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	edd3 7a06 	vldr	s15, [r3, #24]
 8002458:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80024ec <Single_Yaw_Rate_PID_Calculation+0xe8>
 800245c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	edc3 7a07 	vstr	s15, [r3, #28]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw rate control
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	edd3 7a01 	vldr	s15, [r3, #4]
 8002476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	axis->error_deriv = -(axis->meas_value - axis->meas_value_prev) / DT;	//Define differentiation of yaw rate control
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	ed93 7a04 	vldr	s14, [r3, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	edd3 7a05 	vldr	s15, [r3, #20]
 800248c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002490:	eeb1 7a67 	vneg.f32	s14, s15
 8002494:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80024ec <Single_Yaw_Rate_PID_Calculation+0xe8>
 8002498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->meas_value_prev = axis->meas_value;								//Refresh value_prev to the latest value
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	615a      	str	r2, [r3, #20]
	axis->d_result = axis->error_deriv * axis->kd;							//Calculate D result of yaw rate control
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	ed93 7a08 	vldr	s14, [r3, #32]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80024b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw control
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80024cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80024d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	/*******************************************************************/
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	3a83126f 	.word	0x3a83126f

080024f0 <Reset_PID_Integrator>:

void Reset_PID_Integrator(PIDSingle* axis)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	axis->error_sum = 0;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	61da      	str	r2, [r3, #28]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <Reset_All_PID_Integrator>:

void Reset_All_PID_Integrator(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
	Reset_PID_Integrator(&roll.in);
 8002510:	480b      	ldr	r0, [pc, #44]	@ (8002540 <Reset_All_PID_Integrator+0x34>)
 8002512:	f7ff ffed 	bl	80024f0 <Reset_PID_Integrator>
	Reset_PID_Integrator(&roll.out);
 8002516:	480b      	ldr	r0, [pc, #44]	@ (8002544 <Reset_All_PID_Integrator+0x38>)
 8002518:	f7ff ffea 	bl	80024f0 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.in);
 800251c:	480a      	ldr	r0, [pc, #40]	@ (8002548 <Reset_All_PID_Integrator+0x3c>)
 800251e:	f7ff ffe7 	bl	80024f0 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.out);
 8002522:	480a      	ldr	r0, [pc, #40]	@ (800254c <Reset_All_PID_Integrator+0x40>)
 8002524:	f7ff ffe4 	bl	80024f0 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_heading);
 8002528:	4809      	ldr	r0, [pc, #36]	@ (8002550 <Reset_All_PID_Integrator+0x44>)
 800252a:	f7ff ffe1 	bl	80024f0 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_rate);
 800252e:	4809      	ldr	r0, [pc, #36]	@ (8002554 <Reset_All_PID_Integrator+0x48>)
 8002530:	f7ff ffde 	bl	80024f0 <Reset_PID_Integrator>
	Reset_PID_Integrator(&altitude);
 8002534:	4808      	ldr	r0, [pc, #32]	@ (8002558 <Reset_All_PID_Integrator+0x4c>)
 8002536:	f7ff ffdb 	bl	80024f0 <Reset_PID_Integrator>
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	200002f4 	.word	0x200002f4
 8002544:	2000032c 	.word	0x2000032c
 8002548:	20000364 	.word	0x20000364
 800254c:	2000039c 	.word	0x2000039c
 8002550:	200003d4 	.word	0x200003d4
 8002554:	2000040c 	.word	0x2000040c
 8002558:	20000444 	.word	0x20000444

0800255c <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	ed93 7a00 	vldr	s14, [r3]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3304      	adds	r3, #4
 8002578:	edd3 6a00 	vldr	s13, [r3]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002588:	ee37 7a27 	vadd.f32	s14, s14, s15
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3308      	adds	r3, #8
 8002590:	edd3 6a00 	vldr	s13, [r3]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3308      	adds	r3, #8
 8002598:	edd3 7a00 	vldr	s15, [r3]
 800259c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	330c      	adds	r3, #12
 80025a8:	edd3 6a00 	vldr	s13, [r3]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	330c      	adds	r3, #12
 80025b0:	edd3 7a00 	vldr	s15, [r3]
 80025b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025bc:	eeb0 0a67 	vmov.f32	s0, s15
 80025c0:	f000 f90e 	bl	80027e0 <invSqrt>
 80025c4:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	edd3 7a00 	vldr	s15, [r3]
 80025ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80025d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d6:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3304      	adds	r3, #4
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ea:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3308      	adds	r3, #8
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80025fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fe:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	330c      	adds	r3, #12
 8002606:	edd3 7a00 	vldr	s15, [r3]
 800260a:	ed97 7a07 	vldr	s14, [r7, #28]
 800260e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002612:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8002616:	ed97 7a05 	vldr	s14, [r7, #20]
 800261a:	edd7 7a04 	vldr	s15, [r7, #16]
 800261e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002622:	edd7 6a06 	vldr	s13, [r7, #24]
 8002626:	edd7 7a03 	vldr	s15, [r7, #12]
 800262a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002632:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002636:	edd7 7a06 	vldr	s15, [r7, #24]
 800263a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800263e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002642:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800264a:	edd7 7a04 	vldr	s15, [r7, #16]
 800264e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002652:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002656:	edd7 7a03 	vldr	s15, [r7, #12]
 800265a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800265e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002662:	eef0 0a67 	vmov.f32	s1, s15
 8002666:	eeb0 0a66 	vmov.f32	s0, s13
 800266a:	f009 fac9 	bl	800bc00 <atan2f>
 800266e:	eef0 7a40 	vmov.f32	s15, s0
 8002672:	4b55      	ldr	r3, [pc, #340]	@ (80027c8 <Quaternion_Update+0x26c>)
 8002674:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8002678:	ed97 7a05 	vldr	s14, [r7, #20]
 800267c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002680:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002684:	edd7 6a06 	vldr	s13, [r7, #24]
 8002688:	edd7 7a04 	vldr	s15, [r7, #16]
 800268c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002694:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002698:	eeb0 0a67 	vmov.f32	s0, s15
 800269c:	f009 fa84 	bl	800bba8 <asinf>
 80026a0:	eef0 7a40 	vmov.f32	s15, s0
 80026a4:	eef1 7a67 	vneg.f32	s15, s15
 80026a8:	4b48      	ldr	r3, [pc, #288]	@ (80027cc <Quaternion_Update+0x270>)
 80026aa:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 80026ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80026b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ba:	edd7 6a04 	vldr	s13, [r7, #16]
 80026be:	edd7 7a03 	vldr	s15, [r7, #12]
 80026c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ca:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80026ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80026d2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80026d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80026da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80026e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80026f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fa:	eef0 0a67 	vmov.f32	s1, s15
 80026fe:	eeb0 0a66 	vmov.f32	s0, s13
 8002702:	f009 fa7d 	bl	800bc00 <atan2f>
 8002706:	eef0 7a40 	vmov.f32	s15, s0
 800270a:	4b31      	ldr	r3, [pc, #196]	@ (80027d0 <Quaternion_Update+0x274>)
 800270c:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8002710:	4b2d      	ldr	r3, [pc, #180]	@ (80027c8 <Quaternion_Update+0x26c>)
 8002712:	edd3 7a00 	vldr	s15, [r3]
 8002716:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80027d4 <Quaternion_Update+0x278>
 800271a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800271e:	4b2a      	ldr	r3, [pc, #168]	@ (80027c8 <Quaternion_Update+0x26c>)
 8002720:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8002724:	4b29      	ldr	r3, [pc, #164]	@ (80027cc <Quaternion_Update+0x270>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80027d4 <Quaternion_Update+0x278>
 800272e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002732:	4b26      	ldr	r3, [pc, #152]	@ (80027cc <Quaternion_Update+0x270>)
 8002734:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8002738:	4b25      	ldr	r3, [pc, #148]	@ (80027d0 <Quaternion_Update+0x274>)
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80027d4 <Quaternion_Update+0x278>
 8002742:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002746:	4b22      	ldr	r3, [pc, #136]	@ (80027d0 <Quaternion_Update+0x274>)
 8002748:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 800274c:	4b20      	ldr	r3, [pc, #128]	@ (80027d0 <Quaternion_Update+0x274>)
 800274e:	edd3 7a00 	vldr	s15, [r3]
 8002752:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275a:	db0a      	blt.n	8002772 <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 800275c:	4b1c      	ldr	r3, [pc, #112]	@ (80027d0 <Quaternion_Update+0x274>)
 800275e:	edd3 7a00 	vldr	s15, [r3]
 8002762:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80027d8 <Quaternion_Update+0x27c>
 8002766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276a:	4b19      	ldr	r3, [pc, #100]	@ (80027d0 <Quaternion_Update+0x274>)
 800276c:	edc3 7a00 	vstr	s15, [r3]
 8002770:	e007      	b.n	8002782 <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8002772:	4b17      	ldr	r3, [pc, #92]	@ (80027d0 <Quaternion_Update+0x274>)
 8002774:	edd3 7a00 	vldr	s15, [r3]
 8002778:	eef1 7a67 	vneg.f32	s15, s15
 800277c:	4b14      	ldr	r3, [pc, #80]	@ (80027d0 <Quaternion_Update+0x274>)
 800277e:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8002782:	4b11      	ldr	r3, [pc, #68]	@ (80027c8 <Quaternion_Update+0x26c>)
 8002784:	edd3 7a00 	vldr	s15, [r3]
 8002788:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800278c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002790:	db0a      	blt.n	80027a8 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8002792:	4b0d      	ldr	r3, [pc, #52]	@ (80027c8 <Quaternion_Update+0x26c>)
 8002794:	edd3 7a00 	vldr	s15, [r3]
 8002798:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80027dc <Quaternion_Update+0x280>
 800279c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a0:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <Quaternion_Update+0x26c>)
 80027a2:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 80027a6:	e00b      	b.n	80027c0 <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 80027a8:	4b07      	ldr	r3, [pc, #28]	@ (80027c8 <Quaternion_Update+0x26c>)
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80027dc <Quaternion_Update+0x280>
 80027b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027b6:	eef1 7a67 	vneg.f32	s15, s15
 80027ba:	4b03      	ldr	r3, [pc, #12]	@ (80027c8 <Quaternion_Update+0x26c>)
 80027bc:	edc3 7a00 	vstr	s15, [r3]
}
 80027c0:	bf00      	nop
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000480 	.word	0x20000480
 80027cc:	2000047c 	.word	0x2000047c
 80027d0:	20000484 	.word	0x20000484
 80027d4:	42652ee1 	.word	0x42652ee1
 80027d8:	43b40000 	.word	0x43b40000
 80027dc:	43340000 	.word	0x43340000

080027e0 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80027ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80027f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027f6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80027fe:	f107 0310 	add.w	r3, r7, #16
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	105a      	asrs	r2, r3, #1
 800280a:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <invSqrt+0x74>)
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002810:	f107 030c 	add.w	r3, r7, #12
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002818:	ed97 7a04 	vldr	s14, [r7, #16]
 800281c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002820:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002824:	edd7 7a04 	vldr	s15, [r7, #16]
 8002828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800282c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002830:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002834:	edd7 7a04 	vldr	s15, [r7, #16]
 8002838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	ee07 3a90 	vmov	s15, r3
}
 8002846:	eeb0 0a67 	vmov.f32	s0, s15
 800284a:	371c      	adds	r7, #28
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	5f3759df 	.word	0x5f3759df

08002858 <iBus_Parsing>:
#include "ibus.h"



void iBus_Parsing(unsigned char *data ,FSiA6B_iBus *iBus)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
		iBus->RH = (data[2] | data[3]<<8) & 0x0fff;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3302      	adds	r3, #2
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	b21a      	sxth	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3303      	adds	r3, #3
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	b21b      	sxth	r3, r3
 8002874:	4313      	orrs	r3, r2
 8002876:	b21b      	sxth	r3, r3
 8002878:	b29b      	uxth	r3, r3
 800287a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287e:	b29a      	uxth	r2, r3
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	801a      	strh	r2, [r3, #0]
		iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3304      	adds	r3, #4
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	b21a      	sxth	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3305      	adds	r3, #5
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	b21b      	sxth	r3, r3
 8002896:	4313      	orrs	r3, r2
 8002898:	b21b      	sxth	r3, r3
 800289a:	b29b      	uxth	r3, r3
 800289c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	805a      	strh	r2, [r3, #2]
		iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3306      	adds	r3, #6
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	b21a      	sxth	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3307      	adds	r3, #7
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	021b      	lsls	r3, r3, #8
 80028b6:	b21b      	sxth	r3, r3
 80028b8:	4313      	orrs	r3, r2
 80028ba:	b21b      	sxth	r3, r3
 80028bc:	b29b      	uxth	r3, r3
 80028be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	809a      	strh	r2, [r3, #4]
		iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3308      	adds	r3, #8
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	b21a      	sxth	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3309      	adds	r3, #9
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	b21b      	sxth	r3, r3
 80028da:	4313      	orrs	r3, r2
 80028dc:	b21b      	sxth	r3, r3
 80028de:	b29b      	uxth	r3, r3
 80028e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	80da      	strh	r2, [r3, #6]
		iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	330a      	adds	r3, #10
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b21a      	sxth	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	330b      	adds	r3, #11
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	b21b      	sxth	r3, r3
 80028fc:	4313      	orrs	r3, r2
 80028fe:	b21b      	sxth	r3, r3
 8002900:	b29b      	uxth	r3, r3
 8002902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002906:	b29a      	uxth	r2, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	811a      	strh	r2, [r3, #8]
		iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	330c      	adds	r3, #12
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	b21a      	sxth	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	330d      	adds	r3, #13
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	b21b      	sxth	r3, r3
 800291e:	4313      	orrs	r3, r2
 8002920:	b21b      	sxth	r3, r3
 8002922:	b29b      	uxth	r3, r3
 8002924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002928:	b29a      	uxth	r2, r3
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	819a      	strh	r2, [r3, #12]

		iBus->SwD = (data[14] | data[15]<<8) & 0x0fff;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	330e      	adds	r3, #14
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	b21a      	sxth	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	330f      	adds	r3, #15
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	b21b      	sxth	r3, r3
 8002940:	4313      	orrs	r3, r2
 8002942:	b21b      	sxth	r3, r3
 8002944:	b29b      	uxth	r3, r3
 8002946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294a:	b29a      	uxth	r2, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	81da      	strh	r2, [r3, #14]

		iBus->FailSafe = iBus->SwD == 1500;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	89db      	ldrh	r3, [r3, #14]
 8002954:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002958:	4293      	cmp	r3, r2
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	751a      	strb	r2, [r3, #20]

	//	iBus->FailSafe = (data[13] >> 4);
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <iBus_Check_CHKSUM>:




unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8002980:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002984:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<len-2;i++)
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	e00a      	b.n	80029a2 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	89fb      	ldrh	r3, [r7, #14]
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<len-2;i++)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	3301      	adds	r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	3b02      	subs	r3, #2
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	dbef      	blt.n	800298c <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 80029ac:	89fb      	ldrh	r3, [r7, #14]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	321e      	adds	r2, #30
 80029b4:	7812      	ldrb	r2, [r2, #0]
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d109      	bne.n	80029ce <iBus_Check_CHKSUM+0x5a>
 80029ba:	89fb      	ldrh	r3, [r7, #14]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	b29b      	uxth	r3, r3
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	321f      	adds	r2, #31
 80029c4:	7812      	ldrb	r2, [r2, #0]
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d101      	bne.n	80029ce <iBus_Check_CHKSUM+0x5a>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <iBus_Check_CHKSUM+0x5c>
 80029ce:	2300      	movs	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <prv_parse_number+0x22>
        t = gh->p.term_str;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3371      	adds	r3, #113	@ 0x71
 80029f6:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80029f8:	e002      	b.n	8002a00 <prv_parse_number+0x22>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	3301      	adds	r3, #1
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <prv_parse_number+0x30>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d0f5      	beq.n	80029fa <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b2d      	cmp	r3, #45	@ 0x2d
 8002a14:	d104      	bne.n	8002a20 <prv_parse_number+0x42>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <prv_parse_number+0x44>
 8002a20:	2300      	movs	r3, #0
 8002a22:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8002a24:	e00d      	b.n	8002a42 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	461a      	mov	r2, r3
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	3b30      	subs	r3, #48	@ 0x30
 8002a38:	4413      	add	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d007      	beq.n	8002a58 <prv_parse_number+0x7a>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8002a4e:	d903      	bls.n	8002a58 <prv_parse_number+0x7a>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b39      	cmp	r3, #57	@ 0x39
 8002a56:	d9e6      	bls.n	8002a26 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8002a58:	7afb      	ldrb	r3, [r7, #11]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <prv_parse_number+0x86>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	425b      	negs	r3, r3
 8002a62:	e000      	b.n	8002a66 <prv_parse_number+0x88>
 8002a64:	68fb      	ldr	r3, [r7, #12]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3371      	adds	r3, #113	@ 0x71
 8002a86:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8002a88:	e002      	b.n	8002a90 <prv_parse_float_number+0x1e>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <prv_parse_float_number+0x2c>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	d0f5      	beq.n	8002a8a <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	6838      	ldr	r0, [r7, #0]
 8002aa2:	f006 ffa5 	bl	80099f0 <strtod>
 8002aa6:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8002aaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aae:	ec43 2b17 	vmov	d7, r2, r3
}
 8002ab2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ab6:	eef0 0a67 	vmov.f32	s1, s15
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8002ac8:	2100      	movs	r1, #0
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ffd1 	bl	8002a72 <prv_parse_float_number>
 8002ad0:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8002ad4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ad8:	f7fe f83e 	bl	8000b58 <__aeabi_d2iz>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4a1d      	ldr	r2, [pc, #116]	@ (8002b54 <prv_parse_lat_long+0x94>)
 8002ae0:	fb82 1203 	smull	r1, r2, r2, r3
 8002ae4:	1152      	asrs	r2, r2, #5
 8002ae6:	17db      	asrs	r3, r3, #31
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fd1a 	bl	8000524 <__aeabi_i2d>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	4b16      	ldr	r3, [pc, #88]	@ (8002b58 <prv_parse_lat_long+0x98>)
 8002afe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b02:	f7fd fd79 	bl	80005f8 <__aeabi_dmul>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b0e:	f7fd fbbb 	bl	8000288 <__aeabi_dsub>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b5c <prv_parse_lat_long+0x9c>)
 8002b20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b24:	f7fd fe92 	bl	800084c <__aeabi_ddiv>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b30:	f7fd fbac 	bl	800028c <__adddf3>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8002b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b40:	ec43 2b17 	vmov	d7, r2, r3
}
 8002b44:	eeb0 0a47 	vmov.f32	s0, s14
 8002b48:	eef0 0a67 	vmov.f32	s1, s15
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	51eb851f 	.word	0x51eb851f
 8002b58:	40590000 	.word	0x40590000
 8002b5c:	404e0000 	.word	0x404e0000

08002b60 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8002b60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 8002b70:	2900      	cmp	r1, #0
 8002b72:	d169      	bne.n	8002c48 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3371      	adds	r3, #113	@ 0x71
 8002b78:	2206      	movs	r2, #6
 8002b7a:	49ba      	ldr	r1, [pc, #744]	@ (8002e64 <prv_parse_term+0x304>)
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f007 f955 	bl	8009e2c <strncmp>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d009      	beq.n	8002b9c <prv_parse_term+0x3c>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3371      	adds	r3, #113	@ 0x71
 8002b8c:	2206      	movs	r2, #6
 8002b8e:	49b6      	ldr	r1, [pc, #728]	@ (8002e68 <prv_parse_term+0x308>)
 8002b90:	4618      	mov	r0, r3
 8002b92:	f007 f94b 	bl	8009e2c <strncmp>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d104      	bne.n	8002ba6 <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8002ba4:	e04e      	b.n	8002c44 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3371      	adds	r3, #113	@ 0x71
 8002baa:	2206      	movs	r2, #6
 8002bac:	49af      	ldr	r1, [pc, #700]	@ (8002e6c <prv_parse_term+0x30c>)
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f007 f93c 	bl	8009e2c <strncmp>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <prv_parse_term+0x6e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3371      	adds	r3, #113	@ 0x71
 8002bbe:	2206      	movs	r2, #6
 8002bc0:	49ab      	ldr	r1, [pc, #684]	@ (8002e70 <prv_parse_term+0x310>)
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f007 f932 	bl	8009e2c <strncmp>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d104      	bne.n	8002bd8 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8002bd6:	e035      	b.n	8002c44 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3371      	adds	r3, #113	@ 0x71
 8002bdc:	2206      	movs	r2, #6
 8002bde:	49a5      	ldr	r1, [pc, #660]	@ (8002e74 <prv_parse_term+0x314>)
 8002be0:	4618      	mov	r0, r3
 8002be2:	f007 f923 	bl	8009e2c <strncmp>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d009      	beq.n	8002c00 <prv_parse_term+0xa0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3371      	adds	r3, #113	@ 0x71
 8002bf0:	2206      	movs	r2, #6
 8002bf2:	49a1      	ldr	r1, [pc, #644]	@ (8002e78 <prv_parse_term+0x318>)
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f007 f919 	bl	8009e2c <strncmp>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d104      	bne.n	8002c0a <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2203      	movs	r2, #3
 8002c04:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8002c08:	e01c      	b.n	8002c44 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3371      	adds	r3, #113	@ 0x71
 8002c0e:	2206      	movs	r2, #6
 8002c10:	499a      	ldr	r1, [pc, #616]	@ (8002e7c <prv_parse_term+0x31c>)
 8002c12:	4618      	mov	r0, r3
 8002c14:	f007 f90a 	bl	8009e2c <strncmp>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <prv_parse_term+0xd2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3371      	adds	r3, #113	@ 0x71
 8002c22:	2206      	movs	r2, #6
 8002c24:	4996      	ldr	r1, [pc, #600]	@ (8002e80 <prv_parse_term+0x320>)
 8002c26:	4618      	mov	r0, r3
 8002c28:	f007 f900 	bl	8009e2c <strncmp>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d104      	bne.n	8002c3c <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2204      	movs	r2, #4
 8002c36:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8002c3a:	e003      	b.n	8002c44 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e231      	b.n	80030ac <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8002c4e:	2900      	cmp	r1, #0
 8002c50:	f000 822b 	beq.w	80030aa <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8002c5a:	2901      	cmp	r1, #1
 8002c5c:	f040 80c9 	bne.w	8002df2 <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8002c66:	3b01      	subs	r3, #1
 8002c68:	2b0a      	cmp	r3, #10
 8002c6a:	f200 8213 	bhi.w	8003094 <prv_parse_term+0x534>
 8002c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c74 <prv_parse_term+0x114>)
 8002c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c74:	08002ca1 	.word	0x08002ca1
 8002c78:	08002d1b 	.word	0x08002d1b
 8002c7c:	08002d31 	.word	0x08002d31
 8002c80:	08002d5b 	.word	0x08002d5b
 8002c84:	08002d71 	.word	0x08002d71
 8002c88:	08002d9b 	.word	0x08002d9b
 8002c8c:	08002daf 	.word	0x08002daf
 8002c90:	08003095 	.word	0x08003095
 8002c94:	08002dc3 	.word	0x08002dc3
 8002c98:	08003095 	.word	0x08003095
 8002c9c:	08002ddb 	.word	0x08002ddb
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002ca6:	3b30      	subs	r3, #48	@ 0x30
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	0092      	lsls	r2, r2, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8002cba:	4413      	add	r3, r2
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	3b30      	subs	r3, #48	@ 0x30
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8002cce:	3b30      	subs	r3, #48	@ 0x30
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	0092      	lsls	r2, r2, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002ce2:	4413      	add	r3, r2
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	3b30      	subs	r3, #48	@ 0x30
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8002cf6:	3b30      	subs	r3, #48	@ 0x30
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	0092      	lsls	r2, r2, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8002d0a:	4413      	add	r3, r2
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	3b30      	subs	r3, #48	@ 0x30
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 8002d18:	e1c7      	b.n	80030aa <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff fed0 	bl	8002ac0 <prv_parse_lat_long>
 8002d20:	eeb0 7a40 	vmov.f32	s14, s0
 8002d24:	eef0 7a60 	vmov.f32	s15, s1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 8002d2e:	e1bc      	b.n	80030aa <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002d36:	2b53      	cmp	r3, #83	@ 0x53
 8002d38:	d005      	beq.n	8002d46 <prv_parse_term+0x1e6>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002d40:	2b73      	cmp	r3, #115	@ 0x73
 8002d42:	f040 81a9 	bne.w	8003098 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002d4c:	4690      	mov	r8, r2
 8002d4e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 8002d58:	e19e      	b.n	8003098 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff feb0 	bl	8002ac0 <prv_parse_lat_long>
 8002d60:	eeb0 7a40 	vmov.f32	s14, s0
 8002d64:	eef0 7a60 	vmov.f32	s15, s1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8002d6e:	e19c      	b.n	80030aa <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002d76:	2b57      	cmp	r3, #87	@ 0x57
 8002d78:	d005      	beq.n	8002d86 <prv_parse_term+0x226>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002d80:	2b77      	cmp	r3, #119	@ 0x77
 8002d82:	f040 818b 	bne.w	800309c <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002d8c:	4614      	mov	r4, r2
 8002d8e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 8002d98:	e180      	b.n	800309c <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff fe1e 	bl	80029de <prv_parse_number>
 8002da2:	4603      	mov	r3, r0
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                break;
 8002dac:	e17d      	b.n	80030aa <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8002dae:	2100      	movs	r1, #0
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff fe14 	bl	80029de <prv_parse_number>
 8002db6:	4603      	mov	r3, r0
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                break;
 8002dc0:	e173      	b.n	80030aa <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff fe54 	bl	8002a72 <prv_parse_float_number>
 8002dca:	eeb0 7a40 	vmov.f32	s14, s0
 8002dce:	eef0 7a60 	vmov.f32	s15, s1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8002dd8:	e167      	b.n	80030aa <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8002dda:	2100      	movs	r1, #0
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff fe48 	bl	8002a72 <prv_parse_float_number>
 8002de2:	eeb0 7a40 	vmov.f32	s14, s0
 8002de6:	eef0 7a60 	vmov.f32	s15, s1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8002df0:	e15b      	b.n	80030aa <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8002df8:	2902      	cmp	r1, #2
 8002dfa:	f040 8083 	bne.w	8002f04 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8002e04:	3b02      	subs	r3, #2
 8002e06:	2b0f      	cmp	r3, #15
 8002e08:	d860      	bhi.n	8002ecc <prv_parse_term+0x36c>
 8002e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e10 <prv_parse_term+0x2b0>)
 8002e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e10:	08002e51 	.word	0x08002e51
 8002e14:	08002ecd 	.word	0x08002ecd
 8002e18:	08002ecd 	.word	0x08002ecd
 8002e1c:	08002ecd 	.word	0x08002ecd
 8002e20:	08002ecd 	.word	0x08002ecd
 8002e24:	08002ecd 	.word	0x08002ecd
 8002e28:	08002ecd 	.word	0x08002ecd
 8002e2c:	08002ecd 	.word	0x08002ecd
 8002e30:	08002ecd 	.word	0x08002ecd
 8002e34:	08002ecd 	.word	0x08002ecd
 8002e38:	08002ecd 	.word	0x08002ecd
 8002e3c:	08002ecd 	.word	0x08002ecd
 8002e40:	08002ecd 	.word	0x08002ecd
 8002e44:	08002e85 	.word	0x08002e85
 8002e48:	08002e9d 	.word	0x08002e9d
 8002e4c:	08002eb5 	.word	0x08002eb5
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8002e50:	2100      	movs	r1, #0
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff fdc3 	bl	80029de <prv_parse_number>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
                break;
 8002e62:	e122      	b.n	80030aa <prv_parse_term+0x54a>
 8002e64:	0800d754 	.word	0x0800d754
 8002e68:	0800d75c 	.word	0x0800d75c
 8002e6c:	0800d764 	.word	0x0800d764
 8002e70:	0800d76c 	.word	0x0800d76c
 8002e74:	0800d774 	.word	0x0800d774
 8002e78:	0800d77c 	.word	0x0800d77c
 8002e7c:	0800d784 	.word	0x0800d784
 8002e80:	0800d78c 	.word	0x0800d78c
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8002e84:	2100      	movs	r1, #0
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff fdf3 	bl	8002a72 <prv_parse_float_number>
 8002e8c:	eeb0 7a40 	vmov.f32	s14, s0
 8002e90:	eef0 7a60 	vmov.f32	s15, s1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8002e9a:	e106      	b.n	80030aa <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff fde7 	bl	8002a72 <prv_parse_float_number>
 8002ea4:	eeb0 7a40 	vmov.f32	s14, s0
 8002ea8:	eef0 7a60 	vmov.f32	s15, s1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 8002eb2:	e0fa      	b.n	80030aa <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff fddb 	bl	8002a72 <prv_parse_float_number>
 8002ebc:	eeb0 7a40 	vmov.f32	s14, s0
 8002ec0:	eef0 7a60 	vmov.f32	s15, s1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8002eca:	e0ee      	b.n	80030aa <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	f240 80e4 	bls.w	80030a0 <prv_parse_term+0x540>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8002ede:	2b0e      	cmp	r3, #14
 8002ee0:	f200 80de 	bhi.w	80030a0 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff fd79 	bl	80029de <prv_parse_number>
 8002eec:	4602      	mov	r2, r0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8002ef4:	3b03      	subs	r3, #3
 8002ef6:	b2d1      	uxtb	r1, r2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	460a      	mov	r2, r1
 8002efe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 8002f02:	e0cd      	b.n	80030a0 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8002f0a:	2903      	cmp	r1, #3
 8002f0c:	d11b      	bne.n	8002f46 <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d002      	beq.n	8002f1e <prv_parse_term+0x3be>
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d00a      	beq.n	8002f32 <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8002f1c:	e0c5      	b.n	80030aa <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8002f1e:	2100      	movs	r1, #0
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff fd5c 	bl	80029de <prv_parse_number>
 8002f26:	4603      	mov	r3, r0
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 8002f30:	e0bb      	b.n	80030aa <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 8002f32:	2100      	movs	r1, #0
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff fd52 	bl	80029de <prv_parse_number>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 8002f44:	e0b1      	b.n	80030aa <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8002f4c:	2904      	cmp	r1, #4
 8002f4e:	f040 80ac 	bne.w	80030aa <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 8002f58:	3902      	subs	r1, #2
 8002f5a:	2909      	cmp	r1, #9
 8002f5c:	f200 80a2 	bhi.w	80030a4 <prv_parse_term+0x544>
 8002f60:	a001      	add	r0, pc, #4	@ (adr r0, 8002f68 <prv_parse_term+0x408>)
 8002f62:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002f91 	.word	0x08002f91
 8002f6c:	080030a5 	.word	0x080030a5
 8002f70:	080030a5 	.word	0x080030a5
 8002f74:	080030a5 	.word	0x080030a5
 8002f78:	080030a5 	.word	0x080030a5
 8002f7c:	08002fab 	.word	0x08002fab
 8002f80:	08002fc3 	.word	0x08002fc3
 8002f84:	08002fdb 	.word	0x08002fdb
 8002f88:	08003055 	.word	0x08003055
 8002f8c:	0800306d 	.word	0x0800306d
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002f96:	2b41      	cmp	r3, #65	@ 0x41
 8002f98:	bf0c      	ite	eq
 8002f9a:	2301      	moveq	r3, #1
 8002f9c:	2300      	movne	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 8002fa8:	e07f      	b.n	80030aa <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8002faa:	2100      	movs	r1, #0
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff fd60 	bl	8002a72 <prv_parse_float_number>
 8002fb2:	eeb0 7a40 	vmov.f32	s14, s0
 8002fb6:	eef0 7a60 	vmov.f32	s15, s1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8002fc0:	e073      	b.n	80030aa <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff fd54 	bl	8002a72 <prv_parse_float_number>
 8002fca:	eeb0 7a40 	vmov.f32	s14, s0
 8002fce:	eef0 7a60 	vmov.f32	s15, s1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8002fd8:	e067      	b.n	80030aa <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002fe0:	3b30      	subs	r3, #48	@ 0x30
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	0092      	lsls	r2, r2, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8002ff4:	4413      	add	r3, r2
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	3b30      	subs	r3, #48	@ 0x30
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8003008:	3b30      	subs	r3, #48	@ 0x30
 800300a:	b2db      	uxtb	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	0092      	lsls	r2, r2, #2
 8003010:	4413      	add	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	b2da      	uxtb	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800301c:	4413      	add	r3, r2
 800301e:	b2db      	uxtb	r3, r3
 8003020:	3b30      	subs	r3, #48	@ 0x30
 8003022:	b2da      	uxtb	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8003030:	3b30      	subs	r3, #48	@ 0x30
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	0092      	lsls	r2, r2, #2
 8003038:	4413      	add	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	b2da      	uxtb	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8003044:	4413      	add	r3, r2
 8003046:	b2db      	uxtb	r3, r3
 8003048:	3b30      	subs	r3, #48	@ 0x30
 800304a:	b2da      	uxtb	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 8003052:	e02a      	b.n	80030aa <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8003054:	2100      	movs	r1, #0
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff fd0b 	bl	8002a72 <prv_parse_float_number>
 800305c:	eeb0 7a40 	vmov.f32	s14, s0
 8003060:	eef0 7a60 	vmov.f32	s15, s1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 800306a:	e01e      	b.n	80030aa <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 8003072:	2957      	cmp	r1, #87	@ 0x57
 8003074:	d004      	beq.n	8003080 <prv_parse_term+0x520>
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 800307c:	2977      	cmp	r1, #119	@ 0x77
 800307e:	d113      	bne.n	80030a8 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 8003086:	4602      	mov	r2, r0
 8003088:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 8003092:	e009      	b.n	80030a8 <prv_parse_term+0x548>
                break;
 8003094:	bf00      	nop
 8003096:	e008      	b.n	80030aa <prv_parse_term+0x54a>
                break;
 8003098:	bf00      	nop
 800309a:	e006      	b.n	80030aa <prv_parse_term+0x54a>
                break;
 800309c:	bf00      	nop
 800309e:	e004      	b.n	80030aa <prv_parse_term+0x54a>
                break;
 80030a0:	bf00      	nop
 80030a2:	e002      	b.n	80030aa <prv_parse_term+0x54a>
            default:
                break;
 80030a4:	bf00      	nop
 80030a6:	e000      	b.n	80030aa <prv_parse_term+0x54a>
                break;
 80030a8:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 80030aa:	2301      	movs	r3, #1
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030b6:	bf00      	nop

080030b8 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80030c6:	2b2f      	cmp	r3, #47	@ 0x2f
 80030c8:	d90d      	bls.n	80030e6 <prv_check_crc+0x2e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80030d0:	2b39      	cmp	r3, #57	@ 0x39
 80030d2:	d808      	bhi.n	80030e6 <prv_check_crc+0x2e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80030da:	3b30      	subs	r3, #48	@ 0x30
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	b25b      	sxtb	r3, r3
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	b25a      	sxtb	r2, r3
 80030e4:	e026      	b.n	8003134 <prv_check_crc+0x7c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80030ec:	2b60      	cmp	r3, #96	@ 0x60
 80030ee:	d90d      	bls.n	800310c <prv_check_crc+0x54>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80030f6:	2b7a      	cmp	r3, #122	@ 0x7a
 80030f8:	d808      	bhi.n	800310c <prv_check_crc+0x54>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003100:	3b57      	subs	r3, #87	@ 0x57
 8003102:	b2db      	uxtb	r3, r3
 8003104:	b25b      	sxtb	r3, r3
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	b25a      	sxtb	r2, r3
 800310a:	e013      	b.n	8003134 <prv_check_crc+0x7c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003112:	2b40      	cmp	r3, #64	@ 0x40
 8003114:	d90d      	bls.n	8003132 <prv_check_crc+0x7a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800311c:	2b5a      	cmp	r3, #90	@ 0x5a
 800311e:	d808      	bhi.n	8003132 <prv_check_crc+0x7a>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8003126:	3b37      	subs	r3, #55	@ 0x37
 8003128:	b2db      	uxtb	r3, r3
 800312a:	b25b      	sxtb	r3, r3
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	b25a      	sxtb	r2, r3
 8003130:	e000      	b.n	8003134 <prv_check_crc+0x7c>
 8003132:	2200      	movs	r2, #0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800313a:	2b2f      	cmp	r3, #47	@ 0x2f
 800313c:	d90c      	bls.n	8003158 <prv_check_crc+0xa0>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003144:	2b39      	cmp	r3, #57	@ 0x39
 8003146:	d807      	bhi.n	8003158 <prv_check_crc+0xa0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800314e:	b25b      	sxtb	r3, r3
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	b25b      	sxtb	r3, r3
 8003156:	e028      	b.n	80031aa <prv_check_crc+0xf2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800315e:	2b60      	cmp	r3, #96	@ 0x60
 8003160:	d90e      	bls.n	8003180 <prv_check_crc+0xc8>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003168:	2b7a      	cmp	r3, #122	@ 0x7a
 800316a:	d809      	bhi.n	8003180 <prv_check_crc+0xc8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003172:	3b57      	subs	r3, #87	@ 0x57
 8003174:	b2db      	uxtb	r3, r3
 8003176:	b25b      	sxtb	r3, r3
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	b25b      	sxtb	r3, r3
 800317e:	e014      	b.n	80031aa <prv_check_crc+0xf2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003186:	2b40      	cmp	r3, #64	@ 0x40
 8003188:	d90e      	bls.n	80031a8 <prv_check_crc+0xf0>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003190:	2b5a      	cmp	r3, #90	@ 0x5a
 8003192:	d809      	bhi.n	80031a8 <prv_check_crc+0xf0>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800319a:	3b37      	subs	r3, #55	@ 0x37
 800319c:	b2db      	uxtb	r3, r3
 800319e:	b25b      	sxtb	r3, r3
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	b25b      	sxtb	r3, r3
 80031a6:	e000      	b.n	80031aa <prv_check_crc+0xf2>
 80031a8:	2300      	movs	r3, #0
 80031aa:	4313      	orrs	r3, r2
 80031ac:	b25b      	sxtb	r3, r3
 80031ae:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80031b6:	7bfa      	ldrb	r2, [r7, #15]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d136      	bne.n	800324e <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gh->hours = gh->p.data.gga.hours;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800324c:	e061      	b.n	8003312 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003254:	2b02      	cmp	r3, #2
 8003256:	d121      	bne.n	800329c <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	33a1      	adds	r3, #161	@ 0xa1
 8003292:	220c      	movs	r2, #12
 8003294:	4619      	mov	r1, r3
 8003296:	f006 fe4e 	bl	8009f36 <memcpy>
 800329a:	e03a      	b.n	8003312 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d106      	bne.n	80032b4 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80032b2:	e02e      	b.n	8003312 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d129      	bne.n	8003312 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        gh->speed = gh->p.data.rmc.speed;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        gh->variation = gh->p.data.rmc.variation;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        gh->date = gh->p.data.rmc.date;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        gh->month = gh->p.data.rmc.month;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gh->year = gh->p.data.rmc.year;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8003312:	2301      	movs	r3, #1
}
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8003324:	22b0      	movs	r2, #176	@ 0xb0
 8003326:	2100      	movs	r1, #0
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f006 fd77 	bl	8009e1c <memset>
    return 1;
 800332e:	2301      	movs	r3, #1
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8003348:	e0ad      	b.n	80034a6 <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b24      	cmp	r3, #36	@ 0x24
 8003350:	d128      	bne.n	80033a4 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	3370      	adds	r3, #112	@ 0x70
 8003356:	2240      	movs	r2, #64	@ 0x40
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f006 fd5e 	bl	8009e1c <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003366:	2b0b      	cmp	r3, #11
 8003368:	f200 8097 	bhi.w	800349a <lwgps_process+0x162>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003372:	4619      	mov	r1, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	781a      	ldrb	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	440b      	add	r3, r1
 800337c:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003386:	3301      	adds	r3, #1
 8003388:	b2da      	uxtb	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003396:	461a      	mov	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4413      	add	r3, r2
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80033a2:	e07a      	b.n	800349a <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b2c      	cmp	r3, #44	@ 0x2c
 80033aa:	d11d      	bne.n	80033e8 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f7ff fbd7 	bl	8002b60 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	4053      	eors	r3, r2
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80033dc:	3301      	adds	r3, #1
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 80033e6:	e058      	b.n	800349a <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80033ee:	d117      	bne.n	8003420 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f7ff fbb5 	bl	8002b60 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8003414:	3301      	adds	r3, #1
 8003416:	b2da      	uxtb	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 800341e:	e03c      	b.n	800349a <lwgps_process+0x162>
        } else if (*d == '\r') {
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b0d      	cmp	r3, #13
 8003426:	d109      	bne.n	800343c <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f7ff fe45 	bl	80030b8 <prv_check_crc>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d032      	beq.n	800349a <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7ff feca 	bl	80031ce <prv_copy_from_tmp_memory>
 800343a:	e02e      	b.n	800349a <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	4053      	eors	r3, r2
 8003452:	b2da      	uxtb	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8003460:	2b0b      	cmp	r3, #11
 8003462:	d81a      	bhi.n	800349a <lwgps_process+0x162>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800346a:	4619      	mov	r1, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	440b      	add	r3, r1
 8003474:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800347e:	3301      	adds	r3, #1
 8003480:	b2da      	uxtb	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800348e:	461a      	mov	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4413      	add	r3, r2
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	3301      	adds	r3, #1
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f47f af4e 	bne.w	800334a <lwgps_process+0x12>
        }
    }
    return 1;
 80034ae:	2301      	movs	r3, #1
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f023 0210 	bic.w	r2, r3, #16
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	605a      	str	r2, [r3, #4]
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b02      	cmp	r3, #2
 8003516:	d101      	bne.n	800351c <LL_SPI_IsActiveFlag_TXE+0x18>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	330c      	adds	r3, #12
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b2db      	uxtb	r3, r3
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8003546:	b480      	push	{r7}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	460b      	mov	r3, r1
 8003550:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	330c      	adds	r3, #12
 8003556:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	041a      	lsls	r2, r3, #16
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	619a      	str	r2, [r3, #24]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003590:	4b08      	ldr	r3, [pc, #32]	@ (80035b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003592:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003594:	4907      	ldr	r1, [pc, #28]	@ (80035b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4313      	orrs	r3, r2
 800359a:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800359c:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800359e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4013      	ands	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035a6:	68fb      	ldr	r3, [r7, #12]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40023800 	.word	0x40023800

080035b8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80035c0:	4b08      	ldr	r3, [pc, #32]	@ (80035e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80035c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035c4:	4907      	ldr	r1, [pc, #28]	@ (80035e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80035cc:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80035ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4013      	ands	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035d6:	68fb      	ldr	r3, [r7, #12]
}
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	40023800 	.word	0x40023800

080035e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80035f0:	4b08      	ldr	r3, [pc, #32]	@ (8003614 <LL_APB2_GRP1_EnableClock+0x2c>)
 80035f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035f4:	4907      	ldr	r1, [pc, #28]	@ (8003614 <LL_APB2_GRP1_EnableClock+0x2c>)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80035fc:	4b05      	ldr	r3, [pc, #20]	@ (8003614 <LL_APB2_GRP1_EnableClock+0x2c>)
 80035fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4013      	ands	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003606:	68fb      	ldr	r3, [r7, #12]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40023800 	.word	0x40023800

08003618 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2) // 10ms
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003628:	d138      	bne.n	800369c <HAL_TIM_PeriodElapsedCallback+0x84>
	{

		if(counter == 1)	task=1; //d1 conv
 800362a:	4b23      	ldr	r3, [pc, #140]	@ (80036b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d102      	bne.n	8003638 <HAL_TIM_PeriodElapsedCallback+0x20>
 8003632:	4b22      	ldr	r3, [pc, #136]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]
		if(counter == 3)	task=2; // d1 read
 8003638:	4b1f      	ldr	r3, [pc, #124]	@ (80036b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b03      	cmp	r3, #3
 800363e:	d102      	bne.n	8003646 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8003640:	4b1e      	ldr	r3, [pc, #120]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003642:	2202      	movs	r2, #2
 8003644:	601a      	str	r2, [r3, #0]
		if(counter == 5)	task=3; // d2 conv
 8003646:	4b1c      	ldr	r3, [pc, #112]	@ (80036b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b05      	cmp	r3, #5
 800364c:	d102      	bne.n	8003654 <HAL_TIM_PeriodElapsedCallback+0x3c>
 800364e:	4b1b      	ldr	r3, [pc, #108]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003650:	2203      	movs	r2, #3
 8003652:	601a      	str	r2, [r3, #0]
		if(counter == 7)	task=4; // d2 read
 8003654:	4b18      	ldr	r3, [pc, #96]	@ (80036b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b07      	cmp	r3, #7
 800365a:	d102      	bne.n	8003662 <HAL_TIM_PeriodElapsedCallback+0x4a>
 800365c:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800365e:	2204      	movs	r2, #4
 8003660:	601a      	str	r2, [r3, #0]
		if(counter == 9)	task=5; // math1
 8003662:	4b15      	ldr	r3, [pc, #84]	@ (80036b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b09      	cmp	r3, #9
 8003668:	d102      	bne.n	8003670 <HAL_TIM_PeriodElapsedCallback+0x58>
 800366a:	4b14      	ldr	r3, [pc, #80]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800366c:	2205      	movs	r2, #5
 800366e:	601a      	str	r2, [r3, #0]
		if(counter == 10)	task=6; // math2
 8003670:	4b11      	ldr	r3, [pc, #68]	@ (80036b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b0a      	cmp	r3, #10
 8003676:	d102      	bne.n	800367e <HAL_TIM_PeriodElapsedCallback+0x66>
 8003678:	4b10      	ldr	r3, [pc, #64]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800367a:	2206      	movs	r2, #6
 800367c:	601a      	str	r2, [r3, #0]
		if(counter == 60)			// math3
 800367e:	4b0e      	ldr	r3, [pc, #56]	@ (80036b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b3c      	cmp	r3, #60	@ 0x3c
 8003684:	d105      	bne.n	8003692 <HAL_TIM_PeriodElapsedCallback+0x7a>
		{
		 task = 7;
 8003686:	4b0d      	ldr	r3, [pc, #52]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003688:	2207      	movs	r2, #7
 800368a:	601a      	str	r2, [r3, #0]
		 counter =0;
 800368c:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
		}


		counter++;
 8003692:	4b09      	ldr	r3, [pc, #36]	@ (80036b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	4a07      	ldr	r2, [pc, #28]	@ (80036b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800369a:	6013      	str	r3, [r2, #0]
	}

	if(htim->Instance == TIM3) // 1ms
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a07      	ldr	r2, [pc, #28]	@ (80036c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d102      	bne.n	80036ac <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		tim3_1ms_flag =1;
 80036a6:	4b07      	ldr	r3, [pc, #28]	@ (80036c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
	}

}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	2000058c 	.word	0x2000058c
 80036bc:	200005a4 	.word	0x200005a4
 80036c0:	40000400 	.word	0x40000400
 80036c4:	20000590 	.word	0x20000590

080036c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	//static unsigned char cnt =0;

	if(huart->Instance == USART1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a57      	ldr	r2, [pc, #348]	@ (8003834 <HAL_UART_RxCpltCallback+0x16c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d154      	bne.n	8003784 <HAL_UART_RxCpltCallback+0xbc>
	{

		switch(cnt)
 80036da:	4b57      	ldr	r3, [pc, #348]	@ (8003838 <HAL_UART_RxCpltCallback+0x170>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b1f      	cmp	r3, #31
 80036e0:	d02e      	beq.n	8003740 <HAL_UART_RxCpltCallback+0x78>
 80036e2:	2b1f      	cmp	r3, #31
 80036e4:	dc3a      	bgt.n	800375c <HAL_UART_RxCpltCallback+0x94>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_UART_RxCpltCallback+0x28>
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d012      	beq.n	8003714 <HAL_UART_RxCpltCallback+0x4c>
 80036ee:	e035      	b.n	800375c <HAL_UART_RxCpltCallback+0x94>
				{

				case 0:

					if(uart1_rx_data == 0x20)
 80036f0:	4b52      	ldr	r3, [pc, #328]	@ (800383c <HAL_UART_RxCpltCallback+0x174>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d13f      	bne.n	8003778 <HAL_UART_RxCpltCallback+0xb0>
					{
						ibus_rx_buf[cnt] = uart1_rx_data;
 80036f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003838 <HAL_UART_RxCpltCallback+0x170>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	4b4f      	ldr	r3, [pc, #316]	@ (800383c <HAL_UART_RxCpltCallback+0x174>)
 8003700:	7819      	ldrb	r1, [r3, #0]
 8003702:	4b4f      	ldr	r3, [pc, #316]	@ (8003840 <HAL_UART_RxCpltCallback+0x178>)
 8003704:	5499      	strb	r1, [r3, r2]
						cnt++;
 8003706:	4b4c      	ldr	r3, [pc, #304]	@ (8003838 <HAL_UART_RxCpltCallback+0x170>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	3301      	adds	r3, #1
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4b4a      	ldr	r3, [pc, #296]	@ (8003838 <HAL_UART_RxCpltCallback+0x170>)
 8003710:	701a      	strb	r2, [r3, #0]
					}

				break;
 8003712:	e031      	b.n	8003778 <HAL_UART_RxCpltCallback+0xb0>

				case 1:

					if(uart1_rx_data == 0x40)
 8003714:	4b49      	ldr	r3, [pc, #292]	@ (800383c <HAL_UART_RxCpltCallback+0x174>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b40      	cmp	r3, #64	@ 0x40
 800371a:	d10d      	bne.n	8003738 <HAL_UART_RxCpltCallback+0x70>
					{
						ibus_rx_buf[cnt] = uart1_rx_data;
 800371c:	4b46      	ldr	r3, [pc, #280]	@ (8003838 <HAL_UART_RxCpltCallback+0x170>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	4b46      	ldr	r3, [pc, #280]	@ (800383c <HAL_UART_RxCpltCallback+0x174>)
 8003724:	7819      	ldrb	r1, [r3, #0]
 8003726:	4b46      	ldr	r3, [pc, #280]	@ (8003840 <HAL_UART_RxCpltCallback+0x178>)
 8003728:	5499      	strb	r1, [r3, r2]
						cnt++;
 800372a:	4b43      	ldr	r3, [pc, #268]	@ (8003838 <HAL_UART_RxCpltCallback+0x170>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	3301      	adds	r3, #1
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4b41      	ldr	r3, [pc, #260]	@ (8003838 <HAL_UART_RxCpltCallback+0x170>)
 8003734:	701a      	strb	r2, [r3, #0]
					}

				else cnt =0;

				break;
 8003736:	e020      	b.n	800377a <HAL_UART_RxCpltCallback+0xb2>
				else cnt =0;
 8003738:	4b3f      	ldr	r3, [pc, #252]	@ (8003838 <HAL_UART_RxCpltCallback+0x170>)
 800373a:	2200      	movs	r2, #0
 800373c:	701a      	strb	r2, [r3, #0]
				break;
 800373e:	e01c      	b.n	800377a <HAL_UART_RxCpltCallback+0xb2>

				case 31:
					ibus_rx_buf[cnt] = uart1_rx_data;
 8003740:	4b3d      	ldr	r3, [pc, #244]	@ (8003838 <HAL_UART_RxCpltCallback+0x170>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	4b3d      	ldr	r3, [pc, #244]	@ (800383c <HAL_UART_RxCpltCallback+0x174>)
 8003748:	7819      	ldrb	r1, [r3, #0]
 800374a:	4b3d      	ldr	r3, [pc, #244]	@ (8003840 <HAL_UART_RxCpltCallback+0x178>)
 800374c:	5499      	strb	r1, [r3, r2]
					cnt =0;
 800374e:	4b3a      	ldr	r3, [pc, #232]	@ (8003838 <HAL_UART_RxCpltCallback+0x170>)
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
					ibus_rx_cplt_flag =1;
 8003754:	4b3b      	ldr	r3, [pc, #236]	@ (8003844 <HAL_UART_RxCpltCallback+0x17c>)
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]

				break;
 800375a:	e00e      	b.n	800377a <HAL_UART_RxCpltCallback+0xb2>

				default:
					ibus_rx_buf[cnt] = uart1_rx_data;
 800375c:	4b36      	ldr	r3, [pc, #216]	@ (8003838 <HAL_UART_RxCpltCallback+0x170>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	4b36      	ldr	r3, [pc, #216]	@ (800383c <HAL_UART_RxCpltCallback+0x174>)
 8003764:	7819      	ldrb	r1, [r3, #0]
 8003766:	4b36      	ldr	r3, [pc, #216]	@ (8003840 <HAL_UART_RxCpltCallback+0x178>)
 8003768:	5499      	strb	r1, [r3, r2]
					cnt++;
 800376a:	4b33      	ldr	r3, [pc, #204]	@ (8003838 <HAL_UART_RxCpltCallback+0x170>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	3301      	adds	r3, #1
 8003770:	b2da      	uxtb	r2, r3
 8003772:	4b31      	ldr	r3, [pc, #196]	@ (8003838 <HAL_UART_RxCpltCallback+0x170>)
 8003774:	701a      	strb	r2, [r3, #0]
				break;
 8003776:	e000      	b.n	800377a <HAL_UART_RxCpltCallback+0xb2>
				break;
 8003778:	bf00      	nop

			    }


		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 800377a:	2201      	movs	r2, #1
 800377c:	492f      	ldr	r1, [pc, #188]	@ (800383c <HAL_UART_RxCpltCallback+0x174>)
 800377e:	4832      	ldr	r0, [pc, #200]	@ (8003848 <HAL_UART_RxCpltCallback+0x180>)
 8003780:	f004 fa24 	bl	8007bcc <HAL_UART_Receive_IT>

	}

	if(huart->Instance == USART2){
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a30      	ldr	r2, [pc, #192]	@ (800384c <HAL_UART_RxCpltCallback+0x184>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d127      	bne.n	80037de <HAL_UART_RxCpltCallback+0x116>
		if(rx_data_gps != '\n' && rx_index < RX_BUFFER_SIZE) {
 800378e:	4b30      	ldr	r3, [pc, #192]	@ (8003850 <HAL_UART_RxCpltCallback+0x188>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b0a      	cmp	r3, #10
 8003794:	d010      	beq.n	80037b8 <HAL_UART_RxCpltCallback+0xf0>
 8003796:	4b2f      	ldr	r3, [pc, #188]	@ (8003854 <HAL_UART_RxCpltCallback+0x18c>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	b25b      	sxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	db0b      	blt.n	80037b8 <HAL_UART_RxCpltCallback+0xf0>
			rx_buffer_gps[rx_index++] = rx_data_gps;
 80037a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003854 <HAL_UART_RxCpltCallback+0x18c>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	b2d1      	uxtb	r1, r2
 80037a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003854 <HAL_UART_RxCpltCallback+0x18c>)
 80037aa:	7011      	strb	r1, [r2, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	4b28      	ldr	r3, [pc, #160]	@ (8003850 <HAL_UART_RxCpltCallback+0x188>)
 80037b0:	7819      	ldrb	r1, [r3, #0]
 80037b2:	4b29      	ldr	r3, [pc, #164]	@ (8003858 <HAL_UART_RxCpltCallback+0x190>)
 80037b4:	5499      	strb	r1, [r3, r2]
 80037b6:	e00d      	b.n	80037d4 <HAL_UART_RxCpltCallback+0x10c>
		} else {
			lwgps_process(&gps, rx_buffer_gps, rx_index+1);
 80037b8:	4b26      	ldr	r3, [pc, #152]	@ (8003854 <HAL_UART_RxCpltCallback+0x18c>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	3301      	adds	r3, #1
 80037be:	461a      	mov	r2, r3
 80037c0:	4925      	ldr	r1, [pc, #148]	@ (8003858 <HAL_UART_RxCpltCallback+0x190>)
 80037c2:	4826      	ldr	r0, [pc, #152]	@ (800385c <HAL_UART_RxCpltCallback+0x194>)
 80037c4:	f7ff fdb8 	bl	8003338 <lwgps_process>
			rx_index = 0;
 80037c8:	4b22      	ldr	r3, [pc, #136]	@ (8003854 <HAL_UART_RxCpltCallback+0x18c>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
			rx_data_gps = 0;
 80037ce:	4b20      	ldr	r3, [pc, #128]	@ (8003850 <HAL_UART_RxCpltCallback+0x188>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &rx_data_gps, 1);
 80037d4:	2201      	movs	r2, #1
 80037d6:	491e      	ldr	r1, [pc, #120]	@ (8003850 <HAL_UART_RxCpltCallback+0x188>)
 80037d8:	4821      	ldr	r0, [pc, #132]	@ (8003860 <HAL_UART_RxCpltCallback+0x198>)
 80037da:	f004 f9f7 	bl	8007bcc <HAL_UART_Receive_IT>
		}


	if(huart->Instance == USART6){
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a20      	ldr	r2, [pc, #128]	@ (8003864 <HAL_UART_RxCpltCallback+0x19c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d121      	bne.n	800382c <HAL_UART_RxCpltCallback+0x164>

		if(rx_data_PID != '\n' && rx_index_PID < RX_PID_BUFFER_SIZE)
 80037e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003868 <HAL_UART_RxCpltCallback+0x1a0>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b0a      	cmp	r3, #10
 80037ee:	d00f      	beq.n	8003810 <HAL_UART_RxCpltCallback+0x148>
 80037f0:	4b1e      	ldr	r3, [pc, #120]	@ (800386c <HAL_UART_RxCpltCallback+0x1a4>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b48      	cmp	r3, #72	@ 0x48
 80037f6:	d80b      	bhi.n	8003810 <HAL_UART_RxCpltCallback+0x148>
		{
			rx_buffer_PID[rx_index_PID++] = rx_data_PID;
 80037f8:	4b1c      	ldr	r3, [pc, #112]	@ (800386c <HAL_UART_RxCpltCallback+0x1a4>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	b2d1      	uxtb	r1, r2
 8003800:	4a1a      	ldr	r2, [pc, #104]	@ (800386c <HAL_UART_RxCpltCallback+0x1a4>)
 8003802:	7011      	strb	r1, [r2, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	4b18      	ldr	r3, [pc, #96]	@ (8003868 <HAL_UART_RxCpltCallback+0x1a0>)
 8003808:	7819      	ldrb	r1, [r3, #0]
 800380a:	4b19      	ldr	r3, [pc, #100]	@ (8003870 <HAL_UART_RxCpltCallback+0x1a8>)
 800380c:	5499      	strb	r1, [r3, r2]
 800380e:	e008      	b.n	8003822 <HAL_UART_RxCpltCallback+0x15a>
		}
		else {
			rx_index_PID = 0;
 8003810:	4b16      	ldr	r3, [pc, #88]	@ (800386c <HAL_UART_RxCpltCallback+0x1a4>)
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
			rx_data_PID = 0;
 8003816:	4b14      	ldr	r3, [pc, #80]	@ (8003868 <HAL_UART_RxCpltCallback+0x1a0>)
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
			PID_Config_flag = 1;
 800381c:	4b15      	ldr	r3, [pc, #84]	@ (8003874 <HAL_UART_RxCpltCallback+0x1ac>)
 800381e:	2201      	movs	r2, #1
 8003820:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart6, &rx_data_PID, 1);
 8003822:	2201      	movs	r2, #1
 8003824:	4910      	ldr	r1, [pc, #64]	@ (8003868 <HAL_UART_RxCpltCallback+0x1a0>)
 8003826:	4814      	ldr	r0, [pc, #80]	@ (8003878 <HAL_UART_RxCpltCallback+0x1b0>)
 8003828:	f004 f9d0 	bl	8007bcc <HAL_UART_Receive_IT>
	}

}
 800382c:	bf00      	nop
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40011000 	.word	0x40011000
 8003838:	200006c4 	.word	0x200006c4
 800383c:	200006a5 	.word	0x200006a5
 8003840:	20000684 	.word	0x20000684
 8003844:	200006a4 	.word	0x200006a4
 8003848:	200007a0 	.word	0x200007a0
 800384c:	40004400 	.word	0x40004400
 8003850:	20000635 	.word	0x20000635
 8003854:	20000634 	.word	0x20000634
 8003858:	200005b4 	.word	0x200005b4
 800385c:	20000488 	.word	0x20000488
 8003860:	200007e4 	.word	0x200007e4
 8003864:	40011400 	.word	0x40011400
 8003868:	20000681 	.word	0x20000681
 800386c:	20000682 	.word	0x20000682
 8003870:	20000638 	.word	0x20000638
 8003874:	20000683 	.word	0x20000683
 8003878:	20000828 	.word	0x20000828

0800387c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]

}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	float q[4];
	float quatRadianAccuracy;
	float yaw_heading_reference;
	int motor_arming_flag=0;
 8003896:	2300      	movs	r3, #0
 8003898:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800389a:	f002 f8b7 	bl	8005a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800389e:	f000 fbdf 	bl	8004060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038a2:	f000 fe9d 	bl	80045e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80038a6:	f000 fce9 	bl	800427c <MX_TIM2_Init>
  MX_TIM3_Init();
 80038aa:	f000 fd35 	bl	8004318 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80038ae:	f000 fe19 	bl	80044e4 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80038b2:	f000 fc8f 	bl	80041d4 <MX_SPI2_Init>
  MX_SPI1_Init();
 80038b6:	f000 fc3b 	bl	8004130 <MX_SPI1_Init>
  MX_TIM4_Init();
 80038ba:	f000 fd7b 	bl	80043b4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80038be:	f000 fe3b 	bl	8004538 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80038c2:	f000 fe63 	bl	800458c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80038c6:	48c5      	ldr	r0, [pc, #788]	@ (8003bdc <main+0x34c>)
 80038c8:	f003 f97a 	bl	8006bc0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80038cc:	48c4      	ldr	r0, [pc, #784]	@ (8003be0 <main+0x350>)
 80038ce:	f003 f977 	bl	8006bc0 <HAL_TIM_Base_Start_IT>

  // ** PWM **
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80038d2:	2100      	movs	r1, #0
 80038d4:	48c3      	ldr	r0, [pc, #780]	@ (8003be4 <main+0x354>)
 80038d6:	f003 fa2f 	bl	8006d38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80038da:	2104      	movs	r1, #4
 80038dc:	48c1      	ldr	r0, [pc, #772]	@ (8003be4 <main+0x354>)
 80038de:	f003 fa2b 	bl	8006d38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80038e2:	2108      	movs	r1, #8
 80038e4:	48bf      	ldr	r0, [pc, #764]	@ (8003be4 <main+0x354>)
 80038e6:	f003 fa27 	bl	8006d38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80038ea:	210c      	movs	r1, #12
 80038ec:	48bd      	ldr	r0, [pc, #756]	@ (8003be4 <main+0x354>)
 80038ee:	f003 fa23 	bl	8006d38 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 80038f2:	2201      	movs	r2, #1
 80038f4:	49bc      	ldr	r1, [pc, #752]	@ (8003be8 <main+0x358>)
 80038f6:	48bd      	ldr	r0, [pc, #756]	@ (8003bec <main+0x35c>)
 80038f8:	f004 f968 	bl	8007bcc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data_gps, 1);
 80038fc:	2201      	movs	r2, #1
 80038fe:	49bc      	ldr	r1, [pc, #752]	@ (8003bf0 <main+0x360>)
 8003900:	48bc      	ldr	r0, [pc, #752]	@ (8003bf4 <main+0x364>)
 8003902:	f004 f963 	bl	8007bcc <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart6, Tx_Buff, 28);
 8003906:	221c      	movs	r2, #28
 8003908:	49bb      	ldr	r1, [pc, #748]	@ (8003bf8 <main+0x368>)
 800390a:	48bc      	ldr	r0, [pc, #752]	@ (8003bfc <main+0x36c>)
 800390c:	f004 f919 	bl	8007b42 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart6, &rx_data_PID, 1);
 8003910:	2201      	movs	r2, #1
 8003912:	49bb      	ldr	r1, [pc, #748]	@ (8003c00 <main+0x370>)
 8003914:	48b9      	ldr	r0, [pc, #740]	@ (8003bfc <main+0x36c>)
 8003916:	f004 f959 	bl	8007bcc <HAL_UART_Receive_IT>

  PID_Coef_Config();
 800391a:	f001 fb6f 	bl	8004ffc <PID_Coef_Config>

  Buzzer();
 800391e:	f001 fa47 	bl	8004db0 <Buzzer>

  BNO080_Initialization();
 8003922:	f7fd fce3 	bl	80012ec <BNO080_Initialization>
  BNO080_enableRotationVector(2500); // 2500us 400 hz
 8003926:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800392a:	f7fd ffc2 	bl	80018b2 <BNO080_enableRotationVector>
  //BNO080_enableGyro(1000);

  ICM20602_Initialization();
 800392e:	f7fe fadf 	bl	8001ef0 <ICM20602_Initialization>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 8003932:	2201      	movs	r2, #1
 8003934:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003938:	48b2      	ldr	r0, [pc, #712]	@ (8003c04 <main+0x374>)
 800393a:	f002 fc25 	bl	8006188 <HAL_GPIO_WritePin>
  MS5611_C();
 800393e:	f000 fec7 	bl	80046d0 <MS5611_C>
  MS5611_D_Convertion();
 8003942:	f000 ffb1 	bl	80048a8 <MS5611_D_Convertion>
  MS5611_calc();
 8003946:	f001 f82f 	bl	80049a8 <MS5611_calc>

  lwgps_init(&gps);
 800394a:	48af      	ldr	r0, [pc, #700]	@ (8003c08 <main+0x378>)
 800394c:	f7ff fce6 	bl	800331c <lwgps_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003950:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003954:	48ad      	ldr	r0, [pc, #692]	@ (8003c0c <main+0x37c>)
 8003956:	f002 fc30 	bl	80061ba <HAL_GPIO_TogglePin>

	  if(task == 7)
 800395a:	4bad      	ldr	r3, [pc, #692]	@ (8003c10 <main+0x380>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b07      	cmp	r3, #7
 8003960:	d101      	bne.n	8003966 <main+0xd6>
	  {
		 send();
 8003962:	f001 fa91 	bl	8004e88 <send>

	  }


	  if(ibus_rx_cplt_flag == 1) // kumanda
 8003966:	4bab      	ldr	r3, [pc, #684]	@ (8003c14 <main+0x384>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d11f      	bne.n	80039ae <main+0x11e>
	 	{
	 	 ibus_rx_cplt_flag =0;
 800396e:	4ba9      	ldr	r3, [pc, #676]	@ (8003c14 <main+0x384>)
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]

	 		 if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 8003974:	2120      	movs	r1, #32
 8003976:	48a8      	ldr	r0, [pc, #672]	@ (8003c18 <main+0x388>)
 8003978:	f7fe fffc 	bl	8002974 <iBus_Check_CHKSUM>
 800397c:	4603      	mov	r3, r0
 800397e:	2b01      	cmp	r3, #1
 8003980:	d115      	bne.n	80039ae <main+0x11e>
	 		 {
	 			 iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8003982:	49a6      	ldr	r1, [pc, #664]	@ (8003c1c <main+0x38c>)
 8003984:	48a4      	ldr	r0, [pc, #656]	@ (8003c18 <main+0x388>)
 8003986:	f7fe ff67 	bl	8002858 <iBus_Parsing>

	 			 if(iBus_isActiveFailsafe(&iBus)== 1)
 800398a:	48a4      	ldr	r0, [pc, #656]	@ (8003c1c <main+0x38c>)
 800398c:	f001 fb24 	bl	8004fd8 <iBus_isActiveFailsafe>
 8003990:	4603      	mov	r3, r0
 8003992:	2b01      	cmp	r3, #1
 8003994:	d10b      	bne.n	80039ae <main+0x11e>
	 			 {
	 				 TIM4->CCR1 = 0;
 8003996:	4ba2      	ldr	r3, [pc, #648]	@ (8003c20 <main+0x390>)
 8003998:	2200      	movs	r2, #0
 800399a:	635a      	str	r2, [r3, #52]	@ 0x34
	 				 TIM4->CCR2 = 0;
 800399c:	4ba0      	ldr	r3, [pc, #640]	@ (8003c20 <main+0x390>)
 800399e:	2200      	movs	r2, #0
 80039a0:	639a      	str	r2, [r3, #56]	@ 0x38
	 				 TIM4->CCR3 = 0;
 80039a2:	4b9f      	ldr	r3, [pc, #636]	@ (8003c20 <main+0x390>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	 				 TIM4->CCR4 = 0;
 80039a8:	4b9d      	ldr	r3, [pc, #628]	@ (8003c20 <main+0x390>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	641a      	str	r2, [r3, #64]	@ 0x40
	 			 }
	 		 }
	 	}

	  if(BNO080_dataAvailable() == 1)
 80039ae:	f7fd fd31 	bl	8001414 <BNO080_dataAvailable>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d135      	bne.n	8003a24 <main+0x194>
	  {
		  q[0] = BNO080_getQuatI();
 80039b8:	f7fd fee6 	bl	8001788 <BNO080_getQuatI>
 80039bc:	eef0 7a40 	vmov.f32	s15, s0
 80039c0:	edc7 7a01 	vstr	s15, [r7, #4]
		  q[1] = BNO080_getQuatJ();
 80039c4:	f7fd fef6 	bl	80017b4 <BNO080_getQuatJ>
 80039c8:	eef0 7a40 	vmov.f32	s15, s0
 80039cc:	edc7 7a02 	vstr	s15, [r7, #8]
		  q[2] = BNO080_getQuatK();
 80039d0:	f7fd ff06 	bl	80017e0 <BNO080_getQuatK>
 80039d4:	eef0 7a40 	vmov.f32	s15, s0
 80039d8:	edc7 7a03 	vstr	s15, [r7, #12]
		  q[3] = BNO080_getQuatReal();
 80039dc:	f7fd ff16 	bl	800180c <BNO080_getQuatReal>
 80039e0:	eef0 7a40 	vmov.f32	s15, s0
 80039e4:	edc7 7a04 	vstr	s15, [r7, #16]
		  quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 80039e8:	f7fd ff26 	bl	8001838 <BNO080_getQuatRadianAccuracy>
 80039ec:	ed87 0a05 	vstr	s0, [r7, #20]

		  Quaternion_Update(&q[0]);
 80039f0:	1d3b      	adds	r3, r7, #4
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fdb2 	bl	800255c <Quaternion_Update>

		  BNO080_Roll = BNO080_Roll-0.5;
 80039f8:	4b8a      	ldr	r3, [pc, #552]	@ (8003c24 <main+0x394>)
 80039fa:	edd3 7a00 	vldr	s15, [r3]
 80039fe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003a02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a06:	4b87      	ldr	r3, [pc, #540]	@ (8003c24 <main+0x394>)
 8003a08:	edc3 7a00 	vstr	s15, [r3]
		  BNO080_Pitch = -BNO080_Pitch-1.5;
 8003a0c:	4b86      	ldr	r3, [pc, #536]	@ (8003c28 <main+0x398>)
 8003a0e:	edd3 7a00 	vldr	s15, [r3]
 8003a12:	eef1 7a67 	vneg.f32	s15, s15
 8003a16:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8003a1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a1e:	4b82      	ldr	r3, [pc, #520]	@ (8003c28 <main+0x398>)
 8003a20:	edc3 7a00 	vstr	s15, [r3]

	  }

	  if(ICM20602_DataReady() == 1)
 8003a24:	f7fe fb0e 	bl	8002044 <ICM20602_DataReady>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d148      	bne.n	8003ac0 <main+0x230>
	  {
		//  LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_4);

		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 8003a2e:	487f      	ldr	r0, [pc, #508]	@ (8003c2c <main+0x39c>)
 8003a30:	f7fe fadc 	bl	8001fec <ICM20602_Get3AxisGyroRawData>

		  ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 8003a34:	4b7e      	ldr	r3, [pc, #504]	@ (8003c30 <main+0x3a0>)
 8003a36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a42:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8003c34 <main+0x3a4>
 8003a46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a4a:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 8003c38 <main+0x3a8>
 8003a4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a52:	4b77      	ldr	r3, [pc, #476]	@ (8003c30 <main+0x3a0>)
 8003a54:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 8003a58:	4b75      	ldr	r3, [pc, #468]	@ (8003c30 <main+0x3a0>)
 8003a5a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a66:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8003c34 <main+0x3a4>
 8003a6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a6e:	eddf 6a72 	vldr	s13, [pc, #456]	@ 8003c38 <main+0x3a8>
 8003a72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a76:	4b6e      	ldr	r3, [pc, #440]	@ (8003c30 <main+0x3a0>)
 8003a78:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 8003a7c:	4b6c      	ldr	r3, [pc, #432]	@ (8003c30 <main+0x3a0>)
 8003a7e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a8a:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8003c34 <main+0x3a4>
 8003a8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a92:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8003c38 <main+0x3a8>
 8003a96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a9a:	4b65      	ldr	r3, [pc, #404]	@ (8003c30 <main+0x3a0>)
 8003a9c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		  ICM20602.gyro_x = -ICM20602.gyro_x;
 8003aa0:	4b63      	ldr	r3, [pc, #396]	@ (8003c30 <main+0x3a0>)
 8003aa2:	edd3 7a07 	vldr	s15, [r3, #28]
 8003aa6:	eef1 7a67 	vneg.f32	s15, s15
 8003aaa:	4b61      	ldr	r3, [pc, #388]	@ (8003c30 <main+0x3a0>)
 8003aac:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_z = -ICM20602.gyro_z;
 8003ab0:	4b5f      	ldr	r3, [pc, #380]	@ (8003c30 <main+0x3a0>)
 8003ab2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003ab6:	eef1 7a67 	vneg.f32	s15, s15
 8003aba:	4b5d      	ldr	r3, [pc, #372]	@ (8003c30 <main+0x3a0>)
 8003abc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24


	  }

	  if(iBus.SwA == 1000)
 8003ac0:	4b56      	ldr	r3, [pc, #344]	@ (8003c1c <main+0x38c>)
 8003ac2:	891b      	ldrh	r3, [r3, #8]
 8003ac4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ac8:	d10a      	bne.n	8003ae0 <main+0x250>
	  {
		  if(iBus.LV < 1010)
 8003aca:	4b54      	ldr	r3, [pc, #336]	@ (8003c1c <main+0x38c>)
 8003acc:	889b      	ldrh	r3, [r3, #4]
 8003ace:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d804      	bhi.n	8003ae0 <main+0x250>
	  	  {
		  motor_arming_flag = 1;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	61bb      	str	r3, [r7, #24]
		  yaw_heading_reference = BNO080_Yaw;
 8003ada:	4b58      	ldr	r3, [pc, #352]	@ (8003c3c <main+0x3ac>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	61fb      	str	r3, [r7, #28]
	  	  }
	  }

	  if(iBus.SwA == 1000 && motor_arming_flag ==1)
 8003ae0:	4b4e      	ldr	r3, [pc, #312]	@ (8003c1c <main+0x38c>)
 8003ae2:	891b      	ldrh	r3, [r3, #8]
 8003ae4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ae8:	f040 8286 	bne.w	8003ff8 <main+0x768>
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	f040 8282 	bne.w	8003ff8 <main+0x768>
	  {

	  if(tim3_1ms_flag == 1)
 8003af4:	4b52      	ldr	r3, [pc, #328]	@ (8003c40 <main+0x3b0>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	f040 828d 	bne.w	8004018 <main+0x788>
		  {
		  tim3_1ms_flag = 0;
 8003afe:	4b50      	ldr	r3, [pc, #320]	@ (8003c40 <main+0x3b0>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]

	 			  Double_Roll_Pitch_PID_Calculation(&pitch, -(iBus.RV - 1500) * 0.1f, BNO080_Pitch, ICM20602.gyro_x);
 8003b04:	4b45      	ldr	r3, [pc, #276]	@ (8003c1c <main+0x38c>)
 8003b06:	885b      	ldrh	r3, [r3, #2]
 8003b08:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	ee07 3a90 	vmov	s15, r3
 8003b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b16:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003c44 <main+0x3b4>
 8003b1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b1e:	4b42      	ldr	r3, [pc, #264]	@ (8003c28 <main+0x398>)
 8003b20:	ed93 7a00 	vldr	s14, [r3]
 8003b24:	4b42      	ldr	r3, [pc, #264]	@ (8003c30 <main+0x3a0>)
 8003b26:	edd3 6a07 	vldr	s13, [r3, #28]
 8003b2a:	eeb0 1a66 	vmov.f32	s2, s13
 8003b2e:	eef0 0a47 	vmov.f32	s1, s14
 8003b32:	eeb0 0a67 	vmov.f32	s0, s15
 8003b36:	4844      	ldr	r0, [pc, #272]	@ (8003c48 <main+0x3b8>)
 8003b38:	f7fe fa90 	bl	800205c <Double_Roll_Pitch_PID_Calculation>
	 			  Double_Roll_Pitch_PID_Calculation(&roll, -(iBus.RH - 1500) * 0.1f, BNO080_Roll, -ICM20602.gyro_y);
 8003b3c:	4b37      	ldr	r3, [pc, #220]	@ (8003c1c <main+0x38c>)
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8003b44:	3304      	adds	r3, #4
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b4e:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8003c44 <main+0x3b4>
 8003b52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b56:	4b33      	ldr	r3, [pc, #204]	@ (8003c24 <main+0x394>)
 8003b58:	edd3 6a00 	vldr	s13, [r3]
 8003b5c:	4b34      	ldr	r3, [pc, #208]	@ (8003c30 <main+0x3a0>)
 8003b5e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003b62:	eef1 7a67 	vneg.f32	s15, s15
 8003b66:	eeb0 1a67 	vmov.f32	s2, s15
 8003b6a:	eef0 0a66 	vmov.f32	s1, s13
 8003b6e:	eeb0 0a47 	vmov.f32	s0, s14
 8003b72:	4836      	ldr	r0, [pc, #216]	@ (8003c4c <main+0x3bc>)
 8003b74:	f7fe fa72 	bl	800205c <Double_Roll_Pitch_PID_Calculation>
//	 			  {
//	 				  Single_Altitude_PID_Calculation(&altitude, Altitude_set_point, Altitude_meas);
//
//	 			  }
//	 			  else {
	 				 altitude.pid_result =0;
 8003b78:	4b35      	ldr	r3, [pc, #212]	@ (8003c50 <main+0x3c0>)
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	635a      	str	r2, [r3, #52]	@ 0x34
//	 			  }
//


	 			  if(iBus.LV < 1030 )
 8003b80:	4b26      	ldr	r3, [pc, #152]	@ (8003c1c <main+0x38c>)
 8003b82:	889b      	ldrh	r3, [r3, #4]
 8003b84:	f240 4205 	movw	r2, #1029	@ 0x405
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d801      	bhi.n	8003b90 <main+0x300>
	 			  {
	 				  Reset_All_PID_Integrator();
 8003b8c:	f7fe fcbe 	bl	800250c <Reset_All_PID_Integrator>
	 				// yaw_heading_reference = BNO080_Yaw;
	 			  }


	 			  if(iBus.LH < 1485 || iBus.LH > 1515) // stick
 8003b90:	4b22      	ldr	r3, [pc, #136]	@ (8003c1c <main+0x38c>)
 8003b92:	88db      	ldrh	r3, [r3, #6]
 8003b94:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d906      	bls.n	8003baa <main+0x31a>
 8003b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8003c1c <main+0x38c>)
 8003b9e:	88db      	ldrh	r3, [r3, #6]
 8003ba0:	f240 52eb 	movw	r2, #1515	@ 0x5eb
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	f240 80fa 	bls.w	8003d9e <main+0x50e>
	 				  {
	 				  	  yaw_heading_reference = BNO080_Yaw;
 8003baa:	4b24      	ldr	r3, [pc, #144]	@ (8003c3c <main+0x3ac>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	61fb      	str	r3, [r7, #28]
	 				      Single_Yaw_Rate_PID_Calculation(&yaw_rate, (iBus.LH - 1500), (ICM20602.gyro_z) );
 8003bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c1c <main+0x38c>)
 8003bb2:	88db      	ldrh	r3, [r3, #6]
 8003bb4:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8003bb8:	ee07 3a90 	vmov	s15, r3
 8003bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c30 <main+0x3a0>)
 8003bc2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003bc6:	eef0 0a47 	vmov.f32	s1, s14
 8003bca:	eeb0 0a67 	vmov.f32	s0, s15
 8003bce:	4821      	ldr	r0, [pc, #132]	@ (8003c54 <main+0x3c4>)
 8003bd0:	f7fe fc18 	bl	8002404 <Single_Yaw_Rate_PID_Calculation>

	 					  motor1 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result - roll.in.pid_result + yaw_rate.pid_result + altitude.pid_result;
 8003bd4:	4b11      	ldr	r3, [pc, #68]	@ (8003c1c <main+0x38c>)
 8003bd6:	889b      	ldrh	r3, [r3, #4]
 8003bd8:	e03e      	b.n	8003c58 <main+0x3c8>
 8003bda:	bf00      	nop
 8003bdc:	200006c8 	.word	0x200006c8
 8003be0:	20000710 	.word	0x20000710
 8003be4:	20000758 	.word	0x20000758
 8003be8:	200006a5 	.word	0x200006a5
 8003bec:	200007a0 	.word	0x200007a0
 8003bf0:	20000635 	.word	0x20000635
 8003bf4:	200007e4 	.word	0x200007e4
 8003bf8:	200006a8 	.word	0x200006a8
 8003bfc:	20000828 	.word	0x20000828
 8003c00:	20000681 	.word	0x20000681
 8003c04:	40020400 	.word	0x40020400
 8003c08:	20000488 	.word	0x20000488
 8003c0c:	40020800 	.word	0x40020800
 8003c10:	200005a4 	.word	0x200005a4
 8003c14:	200006a4 	.word	0x200006a4
 8003c18:	20000684 	.word	0x20000684
 8003c1c:	20000538 	.word	0x20000538
 8003c20:	40000800 	.word	0x40000800
 8003c24:	2000047c 	.word	0x2000047c
 8003c28:	20000480 	.word	0x20000480
 8003c2c:	200002d4 	.word	0x200002d4
 8003c30:	200002cc 	.word	0x200002cc
 8003c34:	44fa0000 	.word	0x44fa0000
 8003c38:	47000000 	.word	0x47000000
 8003c3c:	20000484 	.word	0x20000484
 8003c40:	20000590 	.word	0x20000590
 8003c44:	3dcccccd 	.word	0x3dcccccd
 8003c48:	20000364 	.word	0x20000364
 8003c4c:	200002f4 	.word	0x200002f4
 8003c50:	20000444 	.word	0x20000444
 8003c54:	2000040c 	.word	0x2000040c
 8003c58:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8003c68:	3338      	adds	r3, #56	@ 0x38
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c72:	4bc9      	ldr	r3, [pc, #804]	@ (8003f98 <main+0x708>)
 8003c74:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003c78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c7c:	4bc7      	ldr	r3, [pc, #796]	@ (8003f9c <main+0x70c>)
 8003c7e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003c82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c86:	4bc6      	ldr	r3, [pc, #792]	@ (8003fa0 <main+0x710>)
 8003c88:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003c8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c90:	4bc4      	ldr	r3, [pc, #784]	@ (8003fa4 <main+0x714>)
 8003c92:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c9e:	ee17 2a90 	vmov	r2, s15
 8003ca2:	4bc1      	ldr	r3, [pc, #772]	@ (8003fa8 <main+0x718>)
 8003ca4:	601a      	str	r2, [r3, #0]
	 					  motor2 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result + roll.in.pid_result + yaw_rate.pid_result + altitude.pid_result;
 8003ca6:	4bc1      	ldr	r3, [pc, #772]	@ (8003fac <main+0x71c>)
 8003ca8:	889b      	ldrh	r3, [r3, #4]
 8003caa:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8003cba:	3338      	adds	r3, #56	@ 0x38
 8003cbc:	ee07 3a90 	vmov	s15, r3
 8003cc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cc4:	4bb4      	ldr	r3, [pc, #720]	@ (8003f98 <main+0x708>)
 8003cc6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003cca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cce:	4bb3      	ldr	r3, [pc, #716]	@ (8003f9c <main+0x70c>)
 8003cd0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003cd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cd8:	4bb1      	ldr	r3, [pc, #708]	@ (8003fa0 <main+0x710>)
 8003cda:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003cde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ce2:	4bb0      	ldr	r3, [pc, #704]	@ (8003fa4 <main+0x714>)
 8003ce4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cf0:	ee17 2a90 	vmov	r2, s15
 8003cf4:	4bae      	ldr	r3, [pc, #696]	@ (8003fb0 <main+0x720>)
 8003cf6:	601a      	str	r2, [r3, #0]
	 					  motor3 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result + roll.in.pid_result - yaw_rate.pid_result + altitude.pid_result;
 8003cf8:	4bac      	ldr	r3, [pc, #688]	@ (8003fac <main+0x71c>)
 8003cfa:	889b      	ldrh	r3, [r3, #4]
 8003cfc:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8003d0c:	3338      	adds	r3, #56	@ 0x38
 8003d0e:	ee07 3a90 	vmov	s15, r3
 8003d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d16:	4ba0      	ldr	r3, [pc, #640]	@ (8003f98 <main+0x708>)
 8003d18:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003d1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d20:	4b9e      	ldr	r3, [pc, #632]	@ (8003f9c <main+0x70c>)
 8003d22:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003d26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d2a:	4b9d      	ldr	r3, [pc, #628]	@ (8003fa0 <main+0x710>)
 8003d2c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003d30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d34:	4b9b      	ldr	r3, [pc, #620]	@ (8003fa4 <main+0x714>)
 8003d36:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d42:	ee17 2a90 	vmov	r2, s15
 8003d46:	4b9b      	ldr	r3, [pc, #620]	@ (8003fb4 <main+0x724>)
 8003d48:	601a      	str	r2, [r3, #0]
	 					  motor4 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result - roll.in.pid_result - yaw_rate.pid_result + altitude.pid_result;
 8003d4a:	4b98      	ldr	r3, [pc, #608]	@ (8003fac <main+0x71c>)
 8003d4c:	889b      	ldrh	r3, [r3, #4]
 8003d4e:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8003d5e:	3338      	adds	r3, #56	@ 0x38
 8003d60:	ee07 3a90 	vmov	s15, r3
 8003d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d68:	4b8b      	ldr	r3, [pc, #556]	@ (8003f98 <main+0x708>)
 8003d6a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003d6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d72:	4b8a      	ldr	r3, [pc, #552]	@ (8003f9c <main+0x70c>)
 8003d74:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003d78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d7c:	4b88      	ldr	r3, [pc, #544]	@ (8003fa0 <main+0x710>)
 8003d7e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003d82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d86:	4b87      	ldr	r3, [pc, #540]	@ (8003fa4 <main+0x714>)
 8003d88:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d94:	ee17 2a90 	vmov	r2, s15
 8003d98:	4b87      	ldr	r3, [pc, #540]	@ (8003fb8 <main+0x728>)
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	e0b2      	b.n	8003f04 <main+0x674>

	      			  }
	 				  else
	 				  {

 					     Single_Yaw_Heading_PID_Calculation(&yaw_heading, yaw_heading_reference, BNO080_Yaw, (ICM20602.gyro_z));
 8003d9e:	4b87      	ldr	r3, [pc, #540]	@ (8003fbc <main+0x72c>)
 8003da0:	edd3 7a00 	vldr	s15, [r3]
 8003da4:	4b86      	ldr	r3, [pc, #536]	@ (8003fc0 <main+0x730>)
 8003da6:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003daa:	eeb0 1a47 	vmov.f32	s2, s14
 8003dae:	eef0 0a67 	vmov.f32	s1, s15
 8003db2:	ed97 0a07 	vldr	s0, [r7, #28]
 8003db6:	4883      	ldr	r0, [pc, #524]	@ (8003fc4 <main+0x734>)
 8003db8:	f7fe fa8a 	bl	80022d0 <Single_Yaw_Heading_PID_Calculation>

       					 motor1 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result - roll.in.pid_result + yaw_heading.pid_result + altitude.pid_result;
 8003dbc:	4b7b      	ldr	r3, [pc, #492]	@ (8003fac <main+0x71c>)
 8003dbe:	889b      	ldrh	r3, [r3, #4]
 8003dc0:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8003dd0:	3338      	adds	r3, #56	@ 0x38
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dda:	4b6f      	ldr	r3, [pc, #444]	@ (8003f98 <main+0x708>)
 8003ddc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003de0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003de4:	4b6d      	ldr	r3, [pc, #436]	@ (8003f9c <main+0x70c>)
 8003de6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003dea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dee:	4b75      	ldr	r3, [pc, #468]	@ (8003fc4 <main+0x734>)
 8003df0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003df4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003df8:	4b6a      	ldr	r3, [pc, #424]	@ (8003fa4 <main+0x714>)
 8003dfa:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e06:	ee17 2a90 	vmov	r2, s15
 8003e0a:	4b67      	ldr	r3, [pc, #412]	@ (8003fa8 <main+0x718>)
 8003e0c:	601a      	str	r2, [r3, #0]
						 motor2 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result + roll.in.pid_result + yaw_heading.pid_result + altitude.pid_result;
 8003e0e:	4b67      	ldr	r3, [pc, #412]	@ (8003fac <main+0x71c>)
 8003e10:	889b      	ldrh	r3, [r3, #4]
 8003e12:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8003e22:	3338      	adds	r3, #56	@ 0x38
 8003e24:	ee07 3a90 	vmov	s15, r3
 8003e28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e2c:	4b5a      	ldr	r3, [pc, #360]	@ (8003f98 <main+0x708>)
 8003e2e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003e32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e36:	4b59      	ldr	r3, [pc, #356]	@ (8003f9c <main+0x70c>)
 8003e38:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003e3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e40:	4b60      	ldr	r3, [pc, #384]	@ (8003fc4 <main+0x734>)
 8003e42:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003e46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e4a:	4b56      	ldr	r3, [pc, #344]	@ (8003fa4 <main+0x714>)
 8003e4c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e58:	ee17 2a90 	vmov	r2, s15
 8003e5c:	4b54      	ldr	r3, [pc, #336]	@ (8003fb0 <main+0x720>)
 8003e5e:	601a      	str	r2, [r3, #0]
						 motor3 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result + roll.in.pid_result - yaw_heading.pid_result + altitude.pid_result;
 8003e60:	4b52      	ldr	r3, [pc, #328]	@ (8003fac <main+0x71c>)
 8003e62:	889b      	ldrh	r3, [r3, #4]
 8003e64:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8003e74:	3338      	adds	r3, #56	@ 0x38
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e7e:	4b46      	ldr	r3, [pc, #280]	@ (8003f98 <main+0x708>)
 8003e80:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003e84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e88:	4b44      	ldr	r3, [pc, #272]	@ (8003f9c <main+0x70c>)
 8003e8a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003e8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e92:	4b4c      	ldr	r3, [pc, #304]	@ (8003fc4 <main+0x734>)
 8003e94:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003e98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e9c:	4b41      	ldr	r3, [pc, #260]	@ (8003fa4 <main+0x714>)
 8003e9e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ea6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eaa:	ee17 2a90 	vmov	r2, s15
 8003eae:	4b41      	ldr	r3, [pc, #260]	@ (8003fb4 <main+0x724>)
 8003eb0:	601a      	str	r2, [r3, #0]
	 					 motor4 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result - roll.in.pid_result - yaw_heading.pid_result + altitude.pid_result;
 8003eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8003fac <main+0x71c>)
 8003eb4:	889b      	ldrh	r3, [r3, #4]
 8003eb6:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8003ec6:	3338      	adds	r3, #56	@ 0x38
 8003ec8:	ee07 3a90 	vmov	s15, r3
 8003ecc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ed0:	4b31      	ldr	r3, [pc, #196]	@ (8003f98 <main+0x708>)
 8003ed2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003ed6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003eda:	4b30      	ldr	r3, [pc, #192]	@ (8003f9c <main+0x70c>)
 8003edc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003ee0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ee4:	4b37      	ldr	r3, [pc, #220]	@ (8003fc4 <main+0x734>)
 8003ee6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003eea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003eee:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa4 <main+0x714>)
 8003ef0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ef8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003efc:	ee17 2a90 	vmov	r2, s15
 8003f00:	4b2d      	ldr	r3, [pc, #180]	@ (8003fb8 <main+0x728>)
 8003f02:	601a      	str	r2, [r3, #0]

	 				  }

			  if(iBus.LV > 1030)
 8003f04:	4b29      	ldr	r3, [pc, #164]	@ (8003fac <main+0x71c>)
 8003f06:	889b      	ldrh	r3, [r3, #4]
 8003f08:	f240 4206 	movw	r2, #1030	@ 0x406
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d962      	bls.n	8003fd6 <main+0x746>
			  {
				  TIM4->CCR1 = motor1 > 21000 ? 21000 : motor1 < 11000 ? 11000 : motor1;
 8003f10:	4b25      	ldr	r3, [pc, #148]	@ (8003fa8 <main+0x718>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f245 2208 	movw	r2, #21000	@ 0x5208
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	dc07      	bgt.n	8003f2c <main+0x69c>
 8003f1c:	4b22      	ldr	r3, [pc, #136]	@ (8003fa8 <main+0x718>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8003f24:	4293      	cmp	r3, r2
 8003f26:	bfb8      	it	lt
 8003f28:	4613      	movlt	r3, r2
 8003f2a:	e001      	b.n	8003f30 <main+0x6a0>
 8003f2c:	f245 2308 	movw	r3, #21000	@ 0x5208
 8003f30:	4a25      	ldr	r2, [pc, #148]	@ (8003fc8 <main+0x738>)
 8003f32:	6353      	str	r3, [r2, #52]	@ 0x34
				  TIM4->CCR2 = motor2 > 21000 ? 21000 : motor2 < 11000 ? 11000 : motor2;
 8003f34:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb0 <main+0x720>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f245 2208 	movw	r2, #21000	@ 0x5208
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	dc07      	bgt.n	8003f50 <main+0x6c0>
 8003f40:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb0 <main+0x720>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	bfb8      	it	lt
 8003f4c:	4613      	movlt	r3, r2
 8003f4e:	e001      	b.n	8003f54 <main+0x6c4>
 8003f50:	f245 2308 	movw	r3, #21000	@ 0x5208
 8003f54:	4a1c      	ldr	r2, [pc, #112]	@ (8003fc8 <main+0x738>)
 8003f56:	6393      	str	r3, [r2, #56]	@ 0x38
				  TIM4->CCR3 = motor3 > 21000 ? 21000 : motor3 < 11000 ? 11000 : motor3;
 8003f58:	4b16      	ldr	r3, [pc, #88]	@ (8003fb4 <main+0x724>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f245 2208 	movw	r2, #21000	@ 0x5208
 8003f60:	4293      	cmp	r3, r2
 8003f62:	dc07      	bgt.n	8003f74 <main+0x6e4>
 8003f64:	4b13      	ldr	r3, [pc, #76]	@ (8003fb4 <main+0x724>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	bfb8      	it	lt
 8003f70:	4613      	movlt	r3, r2
 8003f72:	e001      	b.n	8003f78 <main+0x6e8>
 8003f74:	f245 2308 	movw	r3, #21000	@ 0x5208
 8003f78:	4a13      	ldr	r2, [pc, #76]	@ (8003fc8 <main+0x738>)
 8003f7a:	63d3      	str	r3, [r2, #60]	@ 0x3c
				  TIM4->CCR4 = motor4 > 21000 ? 21000 : motor4 < 11000 ? 11000 : motor4;
 8003f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb8 <main+0x728>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f245 2208 	movw	r2, #21000	@ 0x5208
 8003f84:	4293      	cmp	r3, r2
 8003f86:	dc21      	bgt.n	8003fcc <main+0x73c>
 8003f88:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb8 <main+0x728>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8003f90:	4293      	cmp	r3, r2
 8003f92:	bfb8      	it	lt
 8003f94:	4613      	movlt	r3, r2
 8003f96:	e01b      	b.n	8003fd0 <main+0x740>
 8003f98:	20000364 	.word	0x20000364
 8003f9c:	200002f4 	.word	0x200002f4
 8003fa0:	2000040c 	.word	0x2000040c
 8003fa4:	20000444 	.word	0x20000444
 8003fa8:	20000594 	.word	0x20000594
 8003fac:	20000538 	.word	0x20000538
 8003fb0:	20000598 	.word	0x20000598
 8003fb4:	2000059c 	.word	0x2000059c
 8003fb8:	200005a0 	.word	0x200005a0
 8003fbc:	20000484 	.word	0x20000484
 8003fc0:	200002cc 	.word	0x200002cc
 8003fc4:	200003d4 	.word	0x200003d4
 8003fc8:	40000800 	.word	0x40000800
 8003fcc:	f245 2308 	movw	r3, #21000	@ 0x5208
 8003fd0:	4a20      	ldr	r2, [pc, #128]	@ (8004054 <main+0x7c4>)
 8003fd2:	6413      	str	r3, [r2, #64]	@ 0x40
	  if(tim3_1ms_flag == 1)
 8003fd4:	e020      	b.n	8004018 <main+0x788>
			  }
			  else
			  {
				  TIM4->CCR1 = 11000;
 8003fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8004054 <main+0x7c4>)
 8003fd8:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8003fdc:	635a      	str	r2, [r3, #52]	@ 0x34
				  TIM4->CCR2 = 11000;
 8003fde:	4b1d      	ldr	r3, [pc, #116]	@ (8004054 <main+0x7c4>)
 8003fe0:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8003fe4:	639a      	str	r2, [r3, #56]	@ 0x38
				  TIM4->CCR3 = 11000;
 8003fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8004054 <main+0x7c4>)
 8003fe8:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8003fec:	63da      	str	r2, [r3, #60]	@ 0x3c
				  TIM4->CCR4 = 11000;
 8003fee:	4b19      	ldr	r3, [pc, #100]	@ (8004054 <main+0x7c4>)
 8003ff0:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8003ff4:	641a      	str	r2, [r3, #64]	@ 0x40
	  if(tim3_1ms_flag == 1)
 8003ff6:	e00f      	b.n	8004018 <main+0x788>

		   }

	  }
	  else {
		  TIM4->CCR1 = 10500;
 8003ff8:	4b16      	ldr	r3, [pc, #88]	@ (8004054 <main+0x7c4>)
 8003ffa:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003ffe:	635a      	str	r2, [r3, #52]	@ 0x34
		  TIM4->CCR2 = 10500;
 8004000:	4b14      	ldr	r3, [pc, #80]	@ (8004054 <main+0x7c4>)
 8004002:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004006:	639a      	str	r2, [r3, #56]	@ 0x38
		  TIM4->CCR3 = 10500;
 8004008:	4b12      	ldr	r3, [pc, #72]	@ (8004054 <main+0x7c4>)
 800400a:	f642 1204 	movw	r2, #10500	@ 0x2904
 800400e:	63da      	str	r2, [r3, #60]	@ 0x3c
		  TIM4->CCR4 = 10500;
 8004010:	4b10      	ldr	r3, [pc, #64]	@ (8004054 <main+0x7c4>)
 8004012:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004016:	641a      	str	r2, [r3, #64]	@ 0x40
	  }



	if(PID_Config_flag == 1)
 8004018:	4b0f      	ldr	r3, [pc, #60]	@ (8004058 <main+0x7c8>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	f47f ac97 	bne.w	8003950 <main+0xc0>
	{

		PID_CONFIG_LORA();
 8004022:	f001 f855 	bl	80050d0 <PID_CONFIG_LORA>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8004026:	2201      	movs	r2, #1
 8004028:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800402c:	480b      	ldr	r0, [pc, #44]	@ (800405c <main+0x7cc>)
 800402e:	f002 f8ab 	bl	8006188 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 8004032:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004036:	f001 fd5b 	bl	8005af0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 800403a:	2200      	movs	r2, #0
 800403c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004040:	4806      	ldr	r0, [pc, #24]	@ (800405c <main+0x7cc>)
 8004042:	f002 f8a1 	bl	8006188 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8004046:	2064      	movs	r0, #100	@ 0x64
 8004048:	f001 fd52 	bl	8005af0 <HAL_Delay>

		PID_Config_flag =0;
 800404c:	4b02      	ldr	r3, [pc, #8]	@ (8004058 <main+0x7c8>)
 800404e:	2200      	movs	r2, #0
 8004050:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004052:	e47d      	b.n	8003950 <main+0xc0>
 8004054:	40000800 	.word	0x40000800
 8004058:	20000683 	.word	0x20000683
 800405c:	40020800 	.word	0x40020800

08004060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b094      	sub	sp, #80	@ 0x50
 8004064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004066:	f107 0320 	add.w	r3, r7, #32
 800406a:	2230      	movs	r2, #48	@ 0x30
 800406c:	2100      	movs	r1, #0
 800406e:	4618      	mov	r0, r3
 8004070:	f005 fed4 	bl	8009e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004074:	f107 030c 	add.w	r3, r7, #12
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	605a      	str	r2, [r3, #4]
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004084:	2300      	movs	r3, #0
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	4b27      	ldr	r3, [pc, #156]	@ (8004128 <SystemClock_Config+0xc8>)
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	4a26      	ldr	r2, [pc, #152]	@ (8004128 <SystemClock_Config+0xc8>)
 800408e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004092:	6413      	str	r3, [r2, #64]	@ 0x40
 8004094:	4b24      	ldr	r3, [pc, #144]	@ (8004128 <SystemClock_Config+0xc8>)
 8004096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040a0:	2300      	movs	r3, #0
 80040a2:	607b      	str	r3, [r7, #4]
 80040a4:	4b21      	ldr	r3, [pc, #132]	@ (800412c <SystemClock_Config+0xcc>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a20      	ldr	r2, [pc, #128]	@ (800412c <SystemClock_Config+0xcc>)
 80040aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	4b1e      	ldr	r3, [pc, #120]	@ (800412c <SystemClock_Config+0xcc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80040b8:	607b      	str	r3, [r7, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040bc:	2302      	movs	r3, #2
 80040be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040c0:	2301      	movs	r3, #1
 80040c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040c4:	2310      	movs	r3, #16
 80040c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040c8:	2302      	movs	r3, #2
 80040ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80040cc:	2300      	movs	r3, #0
 80040ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80040d0:	2308      	movs	r3, #8
 80040d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80040d4:	2354      	movs	r3, #84	@ 0x54
 80040d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040d8:	2302      	movs	r3, #2
 80040da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80040dc:	2304      	movs	r3, #4
 80040de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040e0:	f107 0320 	add.w	r3, r7, #32
 80040e4:	4618      	mov	r0, r3
 80040e6:	f002 f883 	bl	80061f0 <HAL_RCC_OscConfig>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80040f0:	f001 f998 	bl	8005424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040f4:	230f      	movs	r3, #15
 80040f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040f8:	2302      	movs	r3, #2
 80040fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004100:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004104:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800410a:	f107 030c 	add.w	r3, r7, #12
 800410e:	2102      	movs	r1, #2
 8004110:	4618      	mov	r0, r3
 8004112:	f002 fae5 	bl	80066e0 <HAL_RCC_ClockConfig>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800411c:	f001 f982 	bl	8005424 <Error_Handler>
  }
}
 8004120:	bf00      	nop
 8004122:	3750      	adds	r7, #80	@ 0x50
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40023800 	.word	0x40023800
 800412c:	40007000 	.word	0x40007000

08004130 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b090      	sub	sp, #64	@ 0x40
 8004134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004136:	f107 0318 	add.w	r3, r7, #24
 800413a:	2228      	movs	r2, #40	@ 0x28
 800413c:	2100      	movs	r1, #0
 800413e:	4618      	mov	r0, r3
 8004140:	f005 fe6c 	bl	8009e1c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004144:	463b      	mov	r3, r7
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	605a      	str	r2, [r3, #4]
 800414c:	609a      	str	r2, [r3, #8]
 800414e:	60da      	str	r2, [r3, #12]
 8004150:	611a      	str	r2, [r3, #16]
 8004152:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8004154:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004158:	f7ff fa46 	bl	80035e8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800415c:	2001      	movs	r0, #1
 800415e:	f7ff fa13 	bl	8003588 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8004162:	23e0      	movs	r3, #224	@ 0xe0
 8004164:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004166:	2302      	movs	r3, #2
 8004168:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800416a:	2303      	movs	r3, #3
 800416c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004172:	2300      	movs	r3, #0
 8004174:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004176:	2305      	movs	r3, #5
 8004178:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800417a:	463b      	mov	r3, r7
 800417c:	4619      	mov	r1, r3
 800417e:	4813      	ldr	r0, [pc, #76]	@ (80041cc <MX_SPI1_Init+0x9c>)
 8004180:	f004 fd49 	bl	8008c16 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004184:	2300      	movs	r3, #0
 8004186:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004188:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800418c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800418e:	2300      	movs	r3, #0
 8004190:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8004192:	2302      	movs	r3, #2
 8004194:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004196:	2301      	movs	r3, #1
 8004198:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800419a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800419e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 80041a0:	2310      	movs	r3, #16
 80041a2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80041a4:	2300      	movs	r3, #0
 80041a6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80041ac:	230a      	movs	r3, #10
 80041ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80041b0:	f107 0318 	add.w	r3, r7, #24
 80041b4:	4619      	mov	r1, r3
 80041b6:	4806      	ldr	r0, [pc, #24]	@ (80041d0 <MX_SPI1_Init+0xa0>)
 80041b8:	f004 fdc3 	bl	8008d42 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80041bc:	2100      	movs	r1, #0
 80041be:	4804      	ldr	r0, [pc, #16]	@ (80041d0 <MX_SPI1_Init+0xa0>)
 80041c0:	f7ff f97a 	bl	80034b8 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80041c4:	bf00      	nop
 80041c6:	3740      	adds	r7, #64	@ 0x40
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40020000 	.word	0x40020000
 80041d0:	40013000 	.word	0x40013000

080041d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b090      	sub	sp, #64	@ 0x40
 80041d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80041da:	f107 0318 	add.w	r3, r7, #24
 80041de:	2228      	movs	r2, #40	@ 0x28
 80041e0:	2100      	movs	r1, #0
 80041e2:	4618      	mov	r0, r3
 80041e4:	f005 fe1a 	bl	8009e1c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e8:	463b      	mov	r3, r7
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	605a      	str	r2, [r3, #4]
 80041f0:	609a      	str	r2, [r3, #8]
 80041f2:	60da      	str	r2, [r3, #12]
 80041f4:	611a      	str	r2, [r3, #16]
 80041f6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80041f8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80041fc:	f7ff f9dc 	bl	80035b8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004200:	2002      	movs	r0, #2
 8004202:	f7ff f9c1 	bl	8003588 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8004206:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800420a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800420c:	2302      	movs	r3, #2
 800420e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004210:	2303      	movs	r3, #3
 8004212:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004218:	2300      	movs	r3, #0
 800421a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800421c:	2305      	movs	r3, #5
 800421e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004220:	463b      	mov	r3, r7
 8004222:	4619      	mov	r1, r3
 8004224:	4813      	ldr	r0, [pc, #76]	@ (8004274 <MX_SPI2_Init+0xa0>)
 8004226:	f004 fcf6 	bl	8008c16 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800422a:	2300      	movs	r3, #0
 800422c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800422e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8004232:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004234:	2300      	movs	r3, #0
 8004236:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8004238:	2302      	movs	r3, #2
 800423a:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800423c:	2301      	movs	r3, #1
 800423e:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004240:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8004246:	2318      	movs	r3, #24
 8004248:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800424a:	2300      	movs	r3, #0
 800424c:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800424e:	2300      	movs	r3, #0
 8004250:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8004252:	230a      	movs	r3, #10
 8004254:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8004256:	f107 0318 	add.w	r3, r7, #24
 800425a:	4619      	mov	r1, r3
 800425c:	4806      	ldr	r0, [pc, #24]	@ (8004278 <MX_SPI2_Init+0xa4>)
 800425e:	f004 fd70 	bl	8008d42 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8004262:	2100      	movs	r1, #0
 8004264:	4804      	ldr	r0, [pc, #16]	@ (8004278 <MX_SPI2_Init+0xa4>)
 8004266:	f7ff f927 	bl	80034b8 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800426a:	bf00      	nop
 800426c:	3740      	adds	r7, #64	@ 0x40
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40020400 	.word	0x40020400
 8004278:	40003800 	.word	0x40003800

0800427c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004282:	f107 0308 	add.w	r3, r7, #8
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	605a      	str	r2, [r3, #4]
 800428c:	609a      	str	r2, [r3, #8]
 800428e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004290:	463b      	mov	r3, r7
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004298:	4b1e      	ldr	r3, [pc, #120]	@ (8004314 <MX_TIM2_Init+0x98>)
 800429a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800429e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80042a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004314 <MX_TIM2_Init+0x98>)
 80042a2:	f240 3247 	movw	r2, #839	@ 0x347
 80042a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004314 <MX_TIM2_Init+0x98>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80042ae:	4b19      	ldr	r3, [pc, #100]	@ (8004314 <MX_TIM2_Init+0x98>)
 80042b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042b6:	4b17      	ldr	r3, [pc, #92]	@ (8004314 <MX_TIM2_Init+0x98>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042bc:	4b15      	ldr	r3, [pc, #84]	@ (8004314 <MX_TIM2_Init+0x98>)
 80042be:	2200      	movs	r2, #0
 80042c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80042c2:	4814      	ldr	r0, [pc, #80]	@ (8004314 <MX_TIM2_Init+0x98>)
 80042c4:	f002 fc2c 	bl	8006b20 <HAL_TIM_Base_Init>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80042ce:	f001 f8a9 	bl	8005424 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80042d8:	f107 0308 	add.w	r3, r7, #8
 80042dc:	4619      	mov	r1, r3
 80042de:	480d      	ldr	r0, [pc, #52]	@ (8004314 <MX_TIM2_Init+0x98>)
 80042e0:	f002 ffa4 	bl	800722c <HAL_TIM_ConfigClockSource>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80042ea:	f001 f89b 	bl	8005424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042ee:	2300      	movs	r3, #0
 80042f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042f6:	463b      	mov	r3, r7
 80042f8:	4619      	mov	r1, r3
 80042fa:	4806      	ldr	r0, [pc, #24]	@ (8004314 <MX_TIM2_Init+0x98>)
 80042fc:	f003 fb52 	bl	80079a4 <HAL_TIMEx_MasterConfigSynchronization>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004306:	f001 f88d 	bl	8005424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800430a:	bf00      	nop
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	200006c8 	.word	0x200006c8

08004318 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800431e:	f107 0308 	add.w	r3, r7, #8
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	605a      	str	r2, [r3, #4]
 8004328:	609a      	str	r2, [r3, #8]
 800432a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800432c:	463b      	mov	r3, r7
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004334:	4b1d      	ldr	r3, [pc, #116]	@ (80043ac <MX_TIM3_Init+0x94>)
 8004336:	4a1e      	ldr	r2, [pc, #120]	@ (80043b0 <MX_TIM3_Init+0x98>)
 8004338:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4200-1;
 800433a:	4b1c      	ldr	r3, [pc, #112]	@ (80043ac <MX_TIM3_Init+0x94>)
 800433c:	f241 0267 	movw	r2, #4199	@ 0x1067
 8004340:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004342:	4b1a      	ldr	r3, [pc, #104]	@ (80043ac <MX_TIM3_Init+0x94>)
 8004344:	2200      	movs	r2, #0
 8004346:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8004348:	4b18      	ldr	r3, [pc, #96]	@ (80043ac <MX_TIM3_Init+0x94>)
 800434a:	2263      	movs	r2, #99	@ 0x63
 800434c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800434e:	4b17      	ldr	r3, [pc, #92]	@ (80043ac <MX_TIM3_Init+0x94>)
 8004350:	2200      	movs	r2, #0
 8004352:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004354:	4b15      	ldr	r3, [pc, #84]	@ (80043ac <MX_TIM3_Init+0x94>)
 8004356:	2200      	movs	r2, #0
 8004358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800435a:	4814      	ldr	r0, [pc, #80]	@ (80043ac <MX_TIM3_Init+0x94>)
 800435c:	f002 fbe0 	bl	8006b20 <HAL_TIM_Base_Init>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004366:	f001 f85d 	bl	8005424 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800436a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800436e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004370:	f107 0308 	add.w	r3, r7, #8
 8004374:	4619      	mov	r1, r3
 8004376:	480d      	ldr	r0, [pc, #52]	@ (80043ac <MX_TIM3_Init+0x94>)
 8004378:	f002 ff58 	bl	800722c <HAL_TIM_ConfigClockSource>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8004382:	f001 f84f 	bl	8005424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004386:	2300      	movs	r3, #0
 8004388:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800438a:	2300      	movs	r3, #0
 800438c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800438e:	463b      	mov	r3, r7
 8004390:	4619      	mov	r1, r3
 8004392:	4806      	ldr	r0, [pc, #24]	@ (80043ac <MX_TIM3_Init+0x94>)
 8004394:	f003 fb06 	bl	80079a4 <HAL_TIMEx_MasterConfigSynchronization>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800439e:	f001 f841 	bl	8005424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80043a2:	bf00      	nop
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20000710 	.word	0x20000710
 80043b0:	40000400 	.word	0x40000400

080043b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08e      	sub	sp, #56	@ 0x38
 80043b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	605a      	str	r2, [r3, #4]
 80043c4:	609a      	str	r2, [r3, #8]
 80043c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043c8:	f107 0320 	add.w	r3, r7, #32
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043d2:	1d3b      	adds	r3, r7, #4
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	605a      	str	r2, [r3, #4]
 80043da:	609a      	str	r2, [r3, #8]
 80043dc:	60da      	str	r2, [r3, #12]
 80043de:	611a      	str	r2, [r3, #16]
 80043e0:	615a      	str	r2, [r3, #20]
 80043e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80043e4:	4b3d      	ldr	r3, [pc, #244]	@ (80044dc <MX_TIM4_Init+0x128>)
 80043e6:	4a3e      	ldr	r2, [pc, #248]	@ (80044e0 <MX_TIM4_Init+0x12c>)
 80043e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80043ea:	4b3c      	ldr	r3, [pc, #240]	@ (80044dc <MX_TIM4_Init+0x128>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043f0:	4b3a      	ldr	r3, [pc, #232]	@ (80044dc <MX_TIM4_Init+0x128>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 41999;
 80043f6:	4b39      	ldr	r3, [pc, #228]	@ (80044dc <MX_TIM4_Init+0x128>)
 80043f8:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80043fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043fe:	4b37      	ldr	r3, [pc, #220]	@ (80044dc <MX_TIM4_Init+0x128>)
 8004400:	2200      	movs	r2, #0
 8004402:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004404:	4b35      	ldr	r3, [pc, #212]	@ (80044dc <MX_TIM4_Init+0x128>)
 8004406:	2280      	movs	r2, #128	@ 0x80
 8004408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800440a:	4834      	ldr	r0, [pc, #208]	@ (80044dc <MX_TIM4_Init+0x128>)
 800440c:	f002 fb88 	bl	8006b20 <HAL_TIM_Base_Init>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8004416:	f001 f805 	bl	8005424 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800441a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800441e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004420:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004424:	4619      	mov	r1, r3
 8004426:	482d      	ldr	r0, [pc, #180]	@ (80044dc <MX_TIM4_Init+0x128>)
 8004428:	f002 ff00 	bl	800722c <HAL_TIM_ConfigClockSource>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8004432:	f000 fff7 	bl	8005424 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004436:	4829      	ldr	r0, [pc, #164]	@ (80044dc <MX_TIM4_Init+0x128>)
 8004438:	f002 fc24 	bl	8006c84 <HAL_TIM_PWM_Init>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8004442:	f000 ffef 	bl	8005424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004446:	2300      	movs	r3, #0
 8004448:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800444a:	2300      	movs	r3, #0
 800444c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800444e:	f107 0320 	add.w	r3, r7, #32
 8004452:	4619      	mov	r1, r3
 8004454:	4821      	ldr	r0, [pc, #132]	@ (80044dc <MX_TIM4_Init+0x128>)
 8004456:	f003 faa5 	bl	80079a4 <HAL_TIMEx_MasterConfigSynchronization>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8004460:	f000 ffe0 	bl	8005424 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004464:	2360      	movs	r3, #96	@ 0x60
 8004466:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004470:	2304      	movs	r3, #4
 8004472:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004474:	1d3b      	adds	r3, r7, #4
 8004476:	2200      	movs	r2, #0
 8004478:	4619      	mov	r1, r3
 800447a:	4818      	ldr	r0, [pc, #96]	@ (80044dc <MX_TIM4_Init+0x128>)
 800447c:	f002 fe14 	bl	80070a8 <HAL_TIM_PWM_ConfigChannel>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8004486:	f000 ffcd 	bl	8005424 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800448a:	1d3b      	adds	r3, r7, #4
 800448c:	2204      	movs	r2, #4
 800448e:	4619      	mov	r1, r3
 8004490:	4812      	ldr	r0, [pc, #72]	@ (80044dc <MX_TIM4_Init+0x128>)
 8004492:	f002 fe09 	bl	80070a8 <HAL_TIM_PWM_ConfigChannel>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800449c:	f000 ffc2 	bl	8005424 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80044a0:	1d3b      	adds	r3, r7, #4
 80044a2:	2208      	movs	r2, #8
 80044a4:	4619      	mov	r1, r3
 80044a6:	480d      	ldr	r0, [pc, #52]	@ (80044dc <MX_TIM4_Init+0x128>)
 80044a8:	f002 fdfe 	bl	80070a8 <HAL_TIM_PWM_ConfigChannel>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80044b2:	f000 ffb7 	bl	8005424 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80044b6:	1d3b      	adds	r3, r7, #4
 80044b8:	220c      	movs	r2, #12
 80044ba:	4619      	mov	r1, r3
 80044bc:	4807      	ldr	r0, [pc, #28]	@ (80044dc <MX_TIM4_Init+0x128>)
 80044be:	f002 fdf3 	bl	80070a8 <HAL_TIM_PWM_ConfigChannel>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80044c8:	f000 ffac 	bl	8005424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80044cc:	4803      	ldr	r0, [pc, #12]	@ (80044dc <MX_TIM4_Init+0x128>)
 80044ce:	f001 f831 	bl	8005534 <HAL_TIM_MspPostInit>

}
 80044d2:	bf00      	nop
 80044d4:	3738      	adds	r7, #56	@ 0x38
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000758 	.word	0x20000758
 80044e0:	40000800 	.word	0x40000800

080044e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80044e8:	4b11      	ldr	r3, [pc, #68]	@ (8004530 <MX_USART1_UART_Init+0x4c>)
 80044ea:	4a12      	ldr	r2, [pc, #72]	@ (8004534 <MX_USART1_UART_Init+0x50>)
 80044ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80044ee:	4b10      	ldr	r3, [pc, #64]	@ (8004530 <MX_USART1_UART_Init+0x4c>)
 80044f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80044f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004530 <MX_USART1_UART_Init+0x4c>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004530 <MX_USART1_UART_Init+0x4c>)
 80044fe:	2200      	movs	r2, #0
 8004500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004502:	4b0b      	ldr	r3, [pc, #44]	@ (8004530 <MX_USART1_UART_Init+0x4c>)
 8004504:	2200      	movs	r2, #0
 8004506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004508:	4b09      	ldr	r3, [pc, #36]	@ (8004530 <MX_USART1_UART_Init+0x4c>)
 800450a:	220c      	movs	r2, #12
 800450c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800450e:	4b08      	ldr	r3, [pc, #32]	@ (8004530 <MX_USART1_UART_Init+0x4c>)
 8004510:	2200      	movs	r2, #0
 8004512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004514:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <MX_USART1_UART_Init+0x4c>)
 8004516:	2200      	movs	r2, #0
 8004518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800451a:	4805      	ldr	r0, [pc, #20]	@ (8004530 <MX_USART1_UART_Init+0x4c>)
 800451c:	f003 fac4 	bl	8007aa8 <HAL_UART_Init>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004526:	f000 ff7d 	bl	8005424 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800452a:	bf00      	nop
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	200007a0 	.word	0x200007a0
 8004534:	40011000 	.word	0x40011000

08004538 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800453c:	4b11      	ldr	r3, [pc, #68]	@ (8004584 <MX_USART2_UART_Init+0x4c>)
 800453e:	4a12      	ldr	r2, [pc, #72]	@ (8004588 <MX_USART2_UART_Init+0x50>)
 8004540:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004542:	4b10      	ldr	r3, [pc, #64]	@ (8004584 <MX_USART2_UART_Init+0x4c>)
 8004544:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004548:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800454a:	4b0e      	ldr	r3, [pc, #56]	@ (8004584 <MX_USART2_UART_Init+0x4c>)
 800454c:	2200      	movs	r2, #0
 800454e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004550:	4b0c      	ldr	r3, [pc, #48]	@ (8004584 <MX_USART2_UART_Init+0x4c>)
 8004552:	2200      	movs	r2, #0
 8004554:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004556:	4b0b      	ldr	r3, [pc, #44]	@ (8004584 <MX_USART2_UART_Init+0x4c>)
 8004558:	2200      	movs	r2, #0
 800455a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800455c:	4b09      	ldr	r3, [pc, #36]	@ (8004584 <MX_USART2_UART_Init+0x4c>)
 800455e:	220c      	movs	r2, #12
 8004560:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004562:	4b08      	ldr	r3, [pc, #32]	@ (8004584 <MX_USART2_UART_Init+0x4c>)
 8004564:	2200      	movs	r2, #0
 8004566:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004568:	4b06      	ldr	r3, [pc, #24]	@ (8004584 <MX_USART2_UART_Init+0x4c>)
 800456a:	2200      	movs	r2, #0
 800456c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800456e:	4805      	ldr	r0, [pc, #20]	@ (8004584 <MX_USART2_UART_Init+0x4c>)
 8004570:	f003 fa9a 	bl	8007aa8 <HAL_UART_Init>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800457a:	f000 ff53 	bl	8005424 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800457e:	bf00      	nop
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	200007e4 	.word	0x200007e4
 8004588:	40004400 	.word	0x40004400

0800458c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004590:	4b11      	ldr	r3, [pc, #68]	@ (80045d8 <MX_USART6_UART_Init+0x4c>)
 8004592:	4a12      	ldr	r2, [pc, #72]	@ (80045dc <MX_USART6_UART_Init+0x50>)
 8004594:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004596:	4b10      	ldr	r3, [pc, #64]	@ (80045d8 <MX_USART6_UART_Init+0x4c>)
 8004598:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800459c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800459e:	4b0e      	ldr	r3, [pc, #56]	@ (80045d8 <MX_USART6_UART_Init+0x4c>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80045a4:	4b0c      	ldr	r3, [pc, #48]	@ (80045d8 <MX_USART6_UART_Init+0x4c>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80045aa:	4b0b      	ldr	r3, [pc, #44]	@ (80045d8 <MX_USART6_UART_Init+0x4c>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80045b0:	4b09      	ldr	r3, [pc, #36]	@ (80045d8 <MX_USART6_UART_Init+0x4c>)
 80045b2:	220c      	movs	r2, #12
 80045b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045b6:	4b08      	ldr	r3, [pc, #32]	@ (80045d8 <MX_USART6_UART_Init+0x4c>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80045bc:	4b06      	ldr	r3, [pc, #24]	@ (80045d8 <MX_USART6_UART_Init+0x4c>)
 80045be:	2200      	movs	r2, #0
 80045c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80045c2:	4805      	ldr	r0, [pc, #20]	@ (80045d8 <MX_USART6_UART_Init+0x4c>)
 80045c4:	f003 fa70 	bl	8007aa8 <HAL_UART_Init>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80045ce:	f000 ff29 	bl	8005424 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20000828 	.word	0x20000828
 80045dc:	40011400 	.word	0x40011400

080045e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e6:	463b      	mov	r3, r7
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	605a      	str	r2, [r3, #4]
 80045ee:	609a      	str	r2, [r3, #8]
 80045f0:	60da      	str	r2, [r3, #12]
 80045f2:	611a      	str	r2, [r3, #16]
 80045f4:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80045f6:	2004      	movs	r0, #4
 80045f8:	f7fe ffc6 	bl	8003588 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80045fc:	2080      	movs	r0, #128	@ 0x80
 80045fe:	f7fe ffc3 	bl	8003588 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004602:	2001      	movs	r0, #1
 8004604:	f7fe ffc0 	bl	8003588 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004608:	2002      	movs	r0, #2
 800460a:	f7fe ffbd 	bl	8003588 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED_Pin|Buzzer_Pin);
 800460e:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8004612:	482c      	ldr	r0, [pc, #176]	@ (80046c4 <MX_GPIO_Init+0xe4>)
 8004614:	f7fe ffa9 	bl	800356a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, CS_ICM_Pin|CS_MS56_Pin|CS_BNO_Pin);
 8004618:	f241 4102 	movw	r1, #5122	@ 0x1402
 800461c:	482a      	ldr	r0, [pc, #168]	@ (80046c8 <MX_GPIO_Init+0xe8>)
 800461e:	f7fe ffa4 	bl	800356a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, WAKE_Pin|RST_Pin);
 8004622:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8004626:	4829      	ldr	r0, [pc, #164]	@ (80046cc <MX_GPIO_Init+0xec>)
 8004628:	f7fe ff9f 	bl	800356a <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_Pin|Buzzer_Pin;
 800462c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8004630:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004632:	2301      	movs	r3, #1
 8004634:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800463e:	2300      	movs	r3, #0
 8004640:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004642:	463b      	mov	r3, r7
 8004644:	4619      	mov	r1, r3
 8004646:	481f      	ldr	r0, [pc, #124]	@ (80046c4 <MX_GPIO_Init+0xe4>)
 8004648:	f004 fae5 	bl	8008c16 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = INT_ICM_Pin;
 800464c:	2301      	movs	r3, #1
 800464e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004650:	2300      	movs	r3, #0
 8004652:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(INT_ICM_GPIO_Port, &GPIO_InitStruct);
 8004658:	463b      	mov	r3, r7
 800465a:	4619      	mov	r1, r3
 800465c:	481a      	ldr	r0, [pc, #104]	@ (80046c8 <MX_GPIO_Init+0xe8>)
 800465e:	f004 fada 	bl	8008c16 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_ICM_Pin|CS_MS56_Pin|CS_BNO_Pin;
 8004662:	f241 4302 	movw	r3, #5122	@ 0x1402
 8004666:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004668:	2301      	movs	r3, #1
 800466a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800466c:	2300      	movs	r3, #0
 800466e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004674:	2300      	movs	r3, #0
 8004676:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004678:	463b      	mov	r3, r7
 800467a:	4619      	mov	r1, r3
 800467c:	4812      	ldr	r0, [pc, #72]	@ (80046c8 <MX_GPIO_Init+0xe8>)
 800467e:	f004 faca 	bl	8008c16 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WAKE_Pin|RST_Pin;
 8004682:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004686:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004688:	2301      	movs	r3, #1
 800468a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800468c:	2300      	movs	r3, #0
 800468e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004694:	2300      	movs	r3, #0
 8004696:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004698:	463b      	mov	r3, r7
 800469a:	4619      	mov	r1, r3
 800469c:	480b      	ldr	r0, [pc, #44]	@ (80046cc <MX_GPIO_Init+0xec>)
 800469e:	f004 faba 	bl	8008c16 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = INT_Pin;
 80046a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80046a8:	2300      	movs	r3, #0
 80046aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80046ac:	2300      	movs	r3, #0
 80046ae:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 80046b0:	463b      	mov	r3, r7
 80046b2:	4619      	mov	r1, r3
 80046b4:	4805      	ldr	r0, [pc, #20]	@ (80046cc <MX_GPIO_Init+0xec>)
 80046b6:	f004 faae 	bl	8008c16 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80046ba:	bf00      	nop
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40020800 	.word	0x40020800
 80046c8:	40020400 	.word	0x40020400
 80046cc:	40020000 	.word	0x40020000

080046d0 <MS5611_C>:

/* USER CODE BEGIN 4 */
void MS5611_C()
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
	  uint8_t test[3] = {0};
 80046d6:	4b71      	ldr	r3, [pc, #452]	@ (800489c <MS5611_C+0x1cc>)
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	80bb      	strh	r3, [r7, #4]
 80046dc:	2300      	movs	r3, #0
 80046de:	71bb      	strb	r3, [r7, #6]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 80046e0:	2200      	movs	r2, #0
 80046e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80046e6:	486e      	ldr	r0, [pc, #440]	@ (80048a0 <MS5611_C+0x1d0>)
 80046e8:	f001 fd4e 	bl	8006188 <HAL_GPIO_WritePin>

	  SPI1_Write8(0xA2);
 80046ec:	20a2      	movs	r0, #162	@ 0xa2
 80046ee:	f000 fb21 	bl	8004d34 <SPI1_Write8>
	  test[0]=SPI1_Read8();
 80046f2:	f000 fb41 	bl	8004d78 <SPI1_Read8>
 80046f6:	4603      	mov	r3, r0
 80046f8:	713b      	strb	r3, [r7, #4]
	  test[1]=SPI1_Read8();
 80046fa:	f000 fb3d 	bl	8004d78 <SPI1_Read8>
 80046fe:	4603      	mov	r3, r0
 8004700:	717b      	strb	r3, [r7, #5]
	  MS5611.C1 = (test[0]<<8) + (test[1]);
 8004702:	793b      	ldrb	r3, [r7, #4]
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	b29b      	uxth	r3, r3
 8004708:	797a      	ldrb	r2, [r7, #5]
 800470a:	4413      	add	r3, r2
 800470c:	b29a      	uxth	r2, r3
 800470e:	4b65      	ldr	r3, [pc, #404]	@ (80048a4 <MS5611_C+0x1d4>)
 8004710:	801a      	strh	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 8004712:	2201      	movs	r2, #1
 8004714:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004718:	4861      	ldr	r0, [pc, #388]	@ (80048a0 <MS5611_C+0x1d0>)
 800471a:	f001 fd35 	bl	8006188 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800471e:	2200      	movs	r2, #0
 8004720:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004724:	485e      	ldr	r0, [pc, #376]	@ (80048a0 <MS5611_C+0x1d0>)
 8004726:	f001 fd2f 	bl	8006188 <HAL_GPIO_WritePin>

	  SPI1_Write8(0xA4);
 800472a:	20a4      	movs	r0, #164	@ 0xa4
 800472c:	f000 fb02 	bl	8004d34 <SPI1_Write8>
	  test[0]=SPI1_Read8();
 8004730:	f000 fb22 	bl	8004d78 <SPI1_Read8>
 8004734:	4603      	mov	r3, r0
 8004736:	713b      	strb	r3, [r7, #4]
	  test[1]=SPI1_Read8();
 8004738:	f000 fb1e 	bl	8004d78 <SPI1_Read8>
 800473c:	4603      	mov	r3, r0
 800473e:	717b      	strb	r3, [r7, #5]
	  MS5611.C2 = (test[0]<<8) + (test[1]);
 8004740:	793b      	ldrb	r3, [r7, #4]
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	b29b      	uxth	r3, r3
 8004746:	797a      	ldrb	r2, [r7, #5]
 8004748:	4413      	add	r3, r2
 800474a:	b29a      	uxth	r2, r3
 800474c:	4b55      	ldr	r3, [pc, #340]	@ (80048a4 <MS5611_C+0x1d4>)
 800474e:	805a      	strh	r2, [r3, #2]

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 8004750:	2201      	movs	r2, #1
 8004752:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004756:	4852      	ldr	r0, [pc, #328]	@ (80048a0 <MS5611_C+0x1d0>)
 8004758:	f001 fd16 	bl	8006188 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800475c:	2200      	movs	r2, #0
 800475e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004762:	484f      	ldr	r0, [pc, #316]	@ (80048a0 <MS5611_C+0x1d0>)
 8004764:	f001 fd10 	bl	8006188 <HAL_GPIO_WritePin>

	  SPI1_Write8(0xA6);
 8004768:	20a6      	movs	r0, #166	@ 0xa6
 800476a:	f000 fae3 	bl	8004d34 <SPI1_Write8>
	  test[0]=SPI1_Read8();
 800476e:	f000 fb03 	bl	8004d78 <SPI1_Read8>
 8004772:	4603      	mov	r3, r0
 8004774:	713b      	strb	r3, [r7, #4]
	  test[1]=SPI1_Read8();
 8004776:	f000 faff 	bl	8004d78 <SPI1_Read8>
 800477a:	4603      	mov	r3, r0
 800477c:	717b      	strb	r3, [r7, #5]
	  MS5611.C3 = (test[0]<<8) + (test[1]);
 800477e:	793b      	ldrb	r3, [r7, #4]
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	b29b      	uxth	r3, r3
 8004784:	797a      	ldrb	r2, [r7, #5]
 8004786:	4413      	add	r3, r2
 8004788:	b29a      	uxth	r2, r3
 800478a:	4b46      	ldr	r3, [pc, #280]	@ (80048a4 <MS5611_C+0x1d4>)
 800478c:	809a      	strh	r2, [r3, #4]

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 800478e:	2201      	movs	r2, #1
 8004790:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004794:	4842      	ldr	r0, [pc, #264]	@ (80048a0 <MS5611_C+0x1d0>)
 8004796:	f001 fcf7 	bl	8006188 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800479a:	2200      	movs	r2, #0
 800479c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80047a0:	483f      	ldr	r0, [pc, #252]	@ (80048a0 <MS5611_C+0x1d0>)
 80047a2:	f001 fcf1 	bl	8006188 <HAL_GPIO_WritePin>

	  SPI1_Write8(0xA8);
 80047a6:	20a8      	movs	r0, #168	@ 0xa8
 80047a8:	f000 fac4 	bl	8004d34 <SPI1_Write8>
	  test[0]=SPI1_Read8();
 80047ac:	f000 fae4 	bl	8004d78 <SPI1_Read8>
 80047b0:	4603      	mov	r3, r0
 80047b2:	713b      	strb	r3, [r7, #4]
	  test[1]=SPI1_Read8();
 80047b4:	f000 fae0 	bl	8004d78 <SPI1_Read8>
 80047b8:	4603      	mov	r3, r0
 80047ba:	717b      	strb	r3, [r7, #5]
	  MS5611.C4 = (test[0]<<8) + (test[1]);
 80047bc:	793b      	ldrb	r3, [r7, #4]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	797a      	ldrb	r2, [r7, #5]
 80047c4:	4413      	add	r3, r2
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	4b36      	ldr	r3, [pc, #216]	@ (80048a4 <MS5611_C+0x1d4>)
 80047ca:	80da      	strh	r2, [r3, #6]

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 80047cc:	2201      	movs	r2, #1
 80047ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80047d2:	4833      	ldr	r0, [pc, #204]	@ (80048a0 <MS5611_C+0x1d0>)
 80047d4:	f001 fcd8 	bl	8006188 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 80047d8:	2200      	movs	r2, #0
 80047da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80047de:	4830      	ldr	r0, [pc, #192]	@ (80048a0 <MS5611_C+0x1d0>)
 80047e0:	f001 fcd2 	bl	8006188 <HAL_GPIO_WritePin>

	  SPI1_Write8(0xAA);
 80047e4:	20aa      	movs	r0, #170	@ 0xaa
 80047e6:	f000 faa5 	bl	8004d34 <SPI1_Write8>
	  test[0]=SPI1_Read8();
 80047ea:	f000 fac5 	bl	8004d78 <SPI1_Read8>
 80047ee:	4603      	mov	r3, r0
 80047f0:	713b      	strb	r3, [r7, #4]
	  test[1]=SPI1_Read8();
 80047f2:	f000 fac1 	bl	8004d78 <SPI1_Read8>
 80047f6:	4603      	mov	r3, r0
 80047f8:	717b      	strb	r3, [r7, #5]
	  MS5611.C5 = (test[0]<<8) + (test[1]);
 80047fa:	793b      	ldrb	r3, [r7, #4]
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	b29b      	uxth	r3, r3
 8004800:	797a      	ldrb	r2, [r7, #5]
 8004802:	4413      	add	r3, r2
 8004804:	b29a      	uxth	r2, r3
 8004806:	4b27      	ldr	r3, [pc, #156]	@ (80048a4 <MS5611_C+0x1d4>)
 8004808:	811a      	strh	r2, [r3, #8]

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 800480a:	2201      	movs	r2, #1
 800480c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004810:	4823      	ldr	r0, [pc, #140]	@ (80048a0 <MS5611_C+0x1d0>)
 8004812:	f001 fcb9 	bl	8006188 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8004816:	2200      	movs	r2, #0
 8004818:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800481c:	4820      	ldr	r0, [pc, #128]	@ (80048a0 <MS5611_C+0x1d0>)
 800481e:	f001 fcb3 	bl	8006188 <HAL_GPIO_WritePin>

	  SPI1_Write8(0xAC);
 8004822:	20ac      	movs	r0, #172	@ 0xac
 8004824:	f000 fa86 	bl	8004d34 <SPI1_Write8>
	  test[0]=SPI1_Read8();
 8004828:	f000 faa6 	bl	8004d78 <SPI1_Read8>
 800482c:	4603      	mov	r3, r0
 800482e:	713b      	strb	r3, [r7, #4]
	  test[1]=SPI1_Read8();
 8004830:	f000 faa2 	bl	8004d78 <SPI1_Read8>
 8004834:	4603      	mov	r3, r0
 8004836:	717b      	strb	r3, [r7, #5]
	  MS5611.C6 = (test[0]<<8) + (test[1]);
 8004838:	793b      	ldrb	r3, [r7, #4]
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	b29b      	uxth	r3, r3
 800483e:	797a      	ldrb	r2, [r7, #5]
 8004840:	4413      	add	r3, r2
 8004842:	b29a      	uxth	r2, r3
 8004844:	4b17      	ldr	r3, [pc, #92]	@ (80048a4 <MS5611_C+0x1d4>)
 8004846:	815a      	strh	r2, [r3, #10]

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 8004848:	2201      	movs	r2, #1
 800484a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800484e:	4814      	ldr	r0, [pc, #80]	@ (80048a0 <MS5611_C+0x1d0>)
 8004850:	f001 fc9a 	bl	8006188 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8004854:	2200      	movs	r2, #0
 8004856:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800485a:	4811      	ldr	r0, [pc, #68]	@ (80048a0 <MS5611_C+0x1d0>)
 800485c:	f001 fc94 	bl	8006188 <HAL_GPIO_WritePin>

	  SPI1_Write8(0xAE);
 8004860:	20ae      	movs	r0, #174	@ 0xae
 8004862:	f000 fa67 	bl	8004d34 <SPI1_Write8>
	  test[0]=SPI1_Read8();
 8004866:	f000 fa87 	bl	8004d78 <SPI1_Read8>
 800486a:	4603      	mov	r3, r0
 800486c:	713b      	strb	r3, [r7, #4]
	  test[1]=SPI1_Read8();
 800486e:	f000 fa83 	bl	8004d78 <SPI1_Read8>
 8004872:	4603      	mov	r3, r0
 8004874:	717b      	strb	r3, [r7, #5]
	  MS5611.C7 = (test[0]<<8) + (test[1]);
 8004876:	793b      	ldrb	r3, [r7, #4]
 8004878:	021b      	lsls	r3, r3, #8
 800487a:	b29b      	uxth	r3, r3
 800487c:	797a      	ldrb	r2, [r7, #5]
 800487e:	4413      	add	r3, r2
 8004880:	b29a      	uxth	r2, r3
 8004882:	4b08      	ldr	r3, [pc, #32]	@ (80048a4 <MS5611_C+0x1d4>)
 8004884:	819a      	strh	r2, [r3, #12]

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 8004886:	2201      	movs	r2, #1
 8004888:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800488c:	4804      	ldr	r0, [pc, #16]	@ (80048a0 <MS5611_C+0x1d0>)
 800488e:	f001 fc7b 	bl	8006188 <HAL_GPIO_WritePin>





}
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	0800d794 	.word	0x0800d794
 80048a0:	40020400 	.word	0x40020400
 80048a4:	20000550 	.word	0x20000550

080048a8 <MS5611_D_Convertion>:

void MS5611_D_Convertion()
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
	uint8_t test[3] = {0};
 80048ae:	4b3b      	ldr	r3, [pc, #236]	@ (800499c <MS5611_D_Convertion+0xf4>)
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	80bb      	strh	r3, [r7, #4]
 80048b4:	2300      	movs	r3, #0
 80048b6:	71bb      	strb	r3, [r7, #6]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 80048b8:	2200      	movs	r2, #0
 80048ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80048be:	4838      	ldr	r0, [pc, #224]	@ (80049a0 <MS5611_D_Convertion+0xf8>)
 80048c0:	f001 fc62 	bl	8006188 <HAL_GPIO_WritePin>

	  SPI1_Write8(0x48);
 80048c4:	2048      	movs	r0, #72	@ 0x48
 80048c6:	f000 fa35 	bl	8004d34 <SPI1_Write8>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 80048ca:	2201      	movs	r2, #1
 80048cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80048d0:	4833      	ldr	r0, [pc, #204]	@ (80049a0 <MS5611_D_Convertion+0xf8>)
 80048d2:	f001 fc59 	bl	8006188 <HAL_GPIO_WritePin>
	  HAL_Delay(11);
 80048d6:	200b      	movs	r0, #11
 80048d8:	f001 f90a 	bl	8005af0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 80048dc:	2200      	movs	r2, #0
 80048de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80048e2:	482f      	ldr	r0, [pc, #188]	@ (80049a0 <MS5611_D_Convertion+0xf8>)
 80048e4:	f001 fc50 	bl	8006188 <HAL_GPIO_WritePin>
	  SPI1_Write8(0x00);
 80048e8:	2000      	movs	r0, #0
 80048ea:	f000 fa23 	bl	8004d34 <SPI1_Write8>
	  test[0]=SPI1_Read8();
 80048ee:	f000 fa43 	bl	8004d78 <SPI1_Read8>
 80048f2:	4603      	mov	r3, r0
 80048f4:	713b      	strb	r3, [r7, #4]
	  test[1]=SPI1_Read8();
 80048f6:	f000 fa3f 	bl	8004d78 <SPI1_Read8>
 80048fa:	4603      	mov	r3, r0
 80048fc:	717b      	strb	r3, [r7, #5]
	  test[2]=SPI1_Read8();
 80048fe:	f000 fa3b 	bl	8004d78 <SPI1_Read8>
 8004902:	4603      	mov	r3, r0
 8004904:	71bb      	strb	r3, [r7, #6]
	  MS5611.D1 = ((test[0]<<16) + (test[1]<<8) + ( test[2]) );
 8004906:	793b      	ldrb	r3, [r7, #4]
 8004908:	041a      	lsls	r2, r3, #16
 800490a:	797b      	ldrb	r3, [r7, #5]
 800490c:	021b      	lsls	r3, r3, #8
 800490e:	4413      	add	r3, r2
 8004910:	79ba      	ldrb	r2, [r7, #6]
 8004912:	4413      	add	r3, r2
 8004914:	461a      	mov	r2, r3
 8004916:	4b23      	ldr	r3, [pc, #140]	@ (80049a4 <MS5611_D_Convertion+0xfc>)
 8004918:	611a      	str	r2, [r3, #16]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 800491a:	2201      	movs	r2, #1
 800491c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004920:	481f      	ldr	r0, [pc, #124]	@ (80049a0 <MS5611_D_Convertion+0xf8>)
 8004922:	f001 fc31 	bl	8006188 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8004926:	2200      	movs	r2, #0
 8004928:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800492c:	481c      	ldr	r0, [pc, #112]	@ (80049a0 <MS5611_D_Convertion+0xf8>)
 800492e:	f001 fc2b 	bl	8006188 <HAL_GPIO_WritePin>

	  SPI1_Write8(0x58);
 8004932:	2058      	movs	r0, #88	@ 0x58
 8004934:	f000 f9fe 	bl	8004d34 <SPI1_Write8>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 8004938:	2201      	movs	r2, #1
 800493a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800493e:	4818      	ldr	r0, [pc, #96]	@ (80049a0 <MS5611_D_Convertion+0xf8>)
 8004940:	f001 fc22 	bl	8006188 <HAL_GPIO_WritePin>
	  HAL_Delay(11);
 8004944:	200b      	movs	r0, #11
 8004946:	f001 f8d3 	bl	8005af0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800494a:	2200      	movs	r2, #0
 800494c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004950:	4813      	ldr	r0, [pc, #76]	@ (80049a0 <MS5611_D_Convertion+0xf8>)
 8004952:	f001 fc19 	bl	8006188 <HAL_GPIO_WritePin>
	  SPI1_Write8(0x00);
 8004956:	2000      	movs	r0, #0
 8004958:	f000 f9ec 	bl	8004d34 <SPI1_Write8>
	  test[0]=SPI1_Read8();
 800495c:	f000 fa0c 	bl	8004d78 <SPI1_Read8>
 8004960:	4603      	mov	r3, r0
 8004962:	713b      	strb	r3, [r7, #4]
	  test[1]=SPI1_Read8();
 8004964:	f000 fa08 	bl	8004d78 <SPI1_Read8>
 8004968:	4603      	mov	r3, r0
 800496a:	717b      	strb	r3, [r7, #5]
	  test[2]=SPI1_Read8();
 800496c:	f000 fa04 	bl	8004d78 <SPI1_Read8>
 8004970:	4603      	mov	r3, r0
 8004972:	71bb      	strb	r3, [r7, #6]
	  MS5611.D2 = ((test[0]<<16) + (test[1]<<8) + ( test[2]) );
 8004974:	793b      	ldrb	r3, [r7, #4]
 8004976:	041a      	lsls	r2, r3, #16
 8004978:	797b      	ldrb	r3, [r7, #5]
 800497a:	021b      	lsls	r3, r3, #8
 800497c:	4413      	add	r3, r2
 800497e:	79ba      	ldrb	r2, [r7, #6]
 8004980:	4413      	add	r3, r2
 8004982:	461a      	mov	r2, r3
 8004984:	4b07      	ldr	r3, [pc, #28]	@ (80049a4 <MS5611_D_Convertion+0xfc>)
 8004986:	615a      	str	r2, [r3, #20]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 8004988:	2201      	movs	r2, #1
 800498a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800498e:	4804      	ldr	r0, [pc, #16]	@ (80049a0 <MS5611_D_Convertion+0xf8>)
 8004990:	f001 fbfa 	bl	8006188 <HAL_GPIO_WritePin>
}
 8004994:	bf00      	nop
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	0800d794 	.word	0x0800d794
 80049a0:	40020400 	.word	0x40020400
 80049a4:	20000550 	.word	0x20000550

080049a8 <MS5611_calc>:
void MS5611_calc(void)
{
 80049a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049ac:	b0a4      	sub	sp, #144	@ 0x90
 80049ae:	af00      	add	r7, sp, #0
	MS5611.dT = MS5611.D2 - ((uint32_t)MS5611.C5 * 256);
 80049b0:	4bcb      	ldr	r3, [pc, #812]	@ (8004ce0 <MS5611_calc+0x338>)
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	4bca      	ldr	r3, [pc, #808]	@ (8004ce0 <MS5611_calc+0x338>)
 80049b6:	891b      	ldrh	r3, [r3, #8]
 80049b8:	021b      	lsls	r3, r3, #8
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	4bc8      	ldr	r3, [pc, #800]	@ (8004ce0 <MS5611_calc+0x338>)
 80049c0:	619a      	str	r2, [r3, #24]
	MS5611.TEMP = 2000 + (((int64_t)MS5611.dT * MS5611.C6) / 8388608);
 80049c2:	4bc7      	ldr	r3, [pc, #796]	@ (8004ce0 <MS5611_calc+0x338>)
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	17da      	asrs	r2, r3, #31
 80049c8:	4698      	mov	r8, r3
 80049ca:	4691      	mov	r9, r2
 80049cc:	4bc4      	ldr	r3, [pc, #784]	@ (8004ce0 <MS5611_calc+0x338>)
 80049ce:	895b      	ldrh	r3, [r3, #10]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2200      	movs	r2, #0
 80049d4:	4618      	mov	r0, r3
 80049d6:	4611      	mov	r1, r2
 80049d8:	fb00 f209 	mul.w	r2, r0, r9
 80049dc:	fb08 f301 	mul.w	r3, r8, r1
 80049e0:	4413      	add	r3, r2
 80049e2:	fba8 4500 	umull	r4, r5, r8, r0
 80049e6:	442b      	add	r3, r5
 80049e8:	461d      	mov	r5, r3
 80049ea:	4622      	mov	r2, r4
 80049ec:	462b      	mov	r3, r5
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	da06      	bge.n	8004a00 <MS5611_calc+0x58>
 80049f2:	49bc      	ldr	r1, [pc, #752]	@ (8004ce4 <MS5611_calc+0x33c>)
 80049f4:	eb12 0a01 	adds.w	sl, r2, r1
 80049f8:	f143 0b00 	adc.w	fp, r3, #0
 80049fc:	4652      	mov	r2, sl
 80049fe:	465b      	mov	r3, fp
 8004a00:	f04f 0000 	mov.w	r0, #0
 8004a04:	f04f 0100 	mov.w	r1, #0
 8004a08:	0dd0      	lsrs	r0, r2, #23
 8004a0a:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 8004a0e:	15d9      	asrs	r1, r3, #23
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4613      	mov	r3, r2
 8004a16:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	4bb0      	ldr	r3, [pc, #704]	@ (8004ce0 <MS5611_calc+0x338>)
 8004a1e:	61da      	str	r2, [r3, #28]
	Temp = MS5611.TEMP/100.0;
 8004a20:	4baf      	ldr	r3, [pc, #700]	@ (8004ce0 <MS5611_calc+0x338>)
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fb fd7d 	bl	8000524 <__aeabi_i2d>
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	4bae      	ldr	r3, [pc, #696]	@ (8004ce8 <MS5611_calc+0x340>)
 8004a30:	f7fb ff0c 	bl	800084c <__aeabi_ddiv>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f7fc f8d4 	bl	8000be8 <__aeabi_d2f>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4baa      	ldr	r3, [pc, #680]	@ (8004cec <MS5611_calc+0x344>)
 8004a44:	601a      	str	r2, [r3, #0]

	MS5611.OFF = (int64_t)MS5611.C2*65535 + (int64_t)MS5611.C4*MS5611.dT/128;	//5611
 8004a46:	4ba6      	ldr	r3, [pc, #664]	@ (8004ce0 <MS5611_calc+0x338>)
 8004a48:	885b      	ldrh	r3, [r3, #2]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a50:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a52:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8004a56:	4622      	mov	r2, r4
 8004a58:	462b      	mov	r3, r5
 8004a5a:	f04f 0000 	mov.w	r0, #0
 8004a5e:	f04f 0100 	mov.w	r1, #0
 8004a62:	0419      	lsls	r1, r3, #16
 8004a64:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004a68:	0410      	lsls	r0, r2, #16
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4621      	mov	r1, r4
 8004a70:	1a51      	subs	r1, r2, r1
 8004a72:	66b9      	str	r1, [r7, #104]	@ 0x68
 8004a74:	4629      	mov	r1, r5
 8004a76:	eb63 0301 	sbc.w	r3, r3, r1
 8004a7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a7c:	4b98      	ldr	r3, [pc, #608]	@ (8004ce0 <MS5611_calc+0x338>)
 8004a7e:	88db      	ldrh	r3, [r3, #6]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2200      	movs	r2, #0
 8004a84:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a86:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a88:	4b95      	ldr	r3, [pc, #596]	@ (8004ce0 <MS5611_calc+0x338>)
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	17da      	asrs	r2, r3, #31
 8004a8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a90:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004a92:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004a96:	462b      	mov	r3, r5
 8004a98:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	fb02 f203 	mul.w	r2, r2, r3
 8004aa2:	464b      	mov	r3, r9
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	fb01 f303 	mul.w	r3, r1, r3
 8004aaa:	4413      	add	r3, r2
 8004aac:	4622      	mov	r2, r4
 8004aae:	4641      	mov	r1, r8
 8004ab0:	fba2 1201 	umull	r1, r2, r2, r1
 8004ab4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ab8:	460a      	mov	r2, r1
 8004aba:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8004abe:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ac8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	da07      	bge.n	8004ae0 <MS5611_calc+0x138>
 8004ad0:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8004ad4:	61b9      	str	r1, [r7, #24]
 8004ad6:	f143 0300 	adc.w	r3, r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
 8004adc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae0:	f04f 0000 	mov.w	r0, #0
 8004ae4:	f04f 0100 	mov.w	r1, #0
 8004ae8:	09d0      	lsrs	r0, r2, #7
 8004aea:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8004aee:	11d9      	asrs	r1, r3, #7
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8004af8:	4621      	mov	r1, r4
 8004afa:	1889      	adds	r1, r1, r2
 8004afc:	6539      	str	r1, [r7, #80]	@ 0x50
 8004afe:	4629      	mov	r1, r5
 8004b00:	eb43 0101 	adc.w	r1, r3, r1
 8004b04:	6579      	str	r1, [r7, #84]	@ 0x54
 8004b06:	4b76      	ldr	r3, [pc, #472]	@ (8004ce0 <MS5611_calc+0x338>)
 8004b08:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004b0c:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
	//MS5611.OFF = (int64_t)MS5611.C2*131072 + (int64_t)MS5611.C4*MS5611.dT/64;	//5607
	MS5611.SENS = (int64_t)MS5611.C1*32768 + (int64_t)MS5611.C3*MS5611.dT/256;	//5611
 8004b10:	4b73      	ldr	r3, [pc, #460]	@ (8004ce0 <MS5611_calc+0x338>)
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2200      	movs	r2, #0
 8004b18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b1a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004b1c:	f04f 0400 	mov.w	r4, #0
 8004b20:	f04f 0500 	mov.w	r5, #0
 8004b24:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004b28:	4613      	mov	r3, r2
 8004b2a:	03dd      	lsls	r5, r3, #15
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	ea45 4553 	orr.w	r5, r5, r3, lsr #17
 8004b32:	460b      	mov	r3, r1
 8004b34:	03dc      	lsls	r4, r3, #15
 8004b36:	4b6a      	ldr	r3, [pc, #424]	@ (8004ce0 <MS5611_calc+0x338>)
 8004b38:	889b      	ldrh	r3, [r3, #4]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b40:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b42:	4b67      	ldr	r3, [pc, #412]	@ (8004ce0 <MS5611_calc+0x338>)
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	17da      	asrs	r2, r3, #31
 8004b48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b4c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004b50:	464b      	mov	r3, r9
 8004b52:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8004b56:	4652      	mov	r2, sl
 8004b58:	fb02 f203 	mul.w	r2, r2, r3
 8004b5c:	465b      	mov	r3, fp
 8004b5e:	4641      	mov	r1, r8
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	4413      	add	r3, r2
 8004b66:	4642      	mov	r2, r8
 8004b68:	4651      	mov	r1, sl
 8004b6a:	fba2 1201 	umull	r1, r2, r2, r1
 8004b6e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004b72:	460a      	mov	r2, r1
 8004b74:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b78:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b82:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	da07      	bge.n	8004b9a <MS5611_calc+0x1f2>
 8004b8a:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8004b8e:	6139      	str	r1, [r7, #16]
 8004b90:	f143 0300 	adc.w	r3, r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b9a:	f04f 0000 	mov.w	r0, #0
 8004b9e:	f04f 0100 	mov.w	r1, #0
 8004ba2:	0a10      	lsrs	r0, r2, #8
 8004ba4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004ba8:	1219      	asrs	r1, r3, #8
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	18a1      	adds	r1, r4, r2
 8004bb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004bb2:	eb45 0303 	adc.w	r3, r5, r3
 8004bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb8:	4b49      	ldr	r3, [pc, #292]	@ (8004ce0 <MS5611_calc+0x338>)
 8004bba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004bbe:	e9c3 120c 	strd	r1, r2, [r3, #48]	@ 0x30
	//MS5611.SENS = (int64_t)MS5611.C1*65536 + (int64_t)MS5611.C3*MS5611.dT/128;	//5607
	MS5611.P = (MS5611.D1*MS5611.SENS/2097152 - MS5611.OFF)/32768;
 8004bc2:	4b47      	ldr	r3, [pc, #284]	@ (8004ce0 <MS5611_calc+0x338>)
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bcc:	4b44      	ldr	r3, [pc, #272]	@ (8004ce0 <MS5611_calc+0x338>)
 8004bce:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004bd2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	fb02 f001 	mul.w	r0, r2, r1
 8004bdc:	4621      	mov	r1, r4
 8004bde:	fb01 f103 	mul.w	r1, r1, r3
 8004be2:	4401      	add	r1, r0
 8004be4:	4620      	mov	r0, r4
 8004be6:	fba0 2302 	umull	r2, r3, r0, r2
 8004bea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bec:	4613      	mov	r3, r2
 8004bee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bf0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bf2:	18cb      	adds	r3, r1, r3
 8004bf4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bf6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	da07      	bge.n	8004c0e <MS5611_calc+0x266>
 8004bfe:	493c      	ldr	r1, [pc, #240]	@ (8004cf0 <MS5611_calc+0x348>)
 8004c00:	1851      	adds	r1, r2, r1
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	f143 0300 	adc.w	r3, r3, #0
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c0e:	f04f 0000 	mov.w	r0, #0
 8004c12:	f04f 0100 	mov.w	r1, #0
 8004c16:	0d50      	lsrs	r0, r2, #21
 8004c18:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8004c1c:	1559      	asrs	r1, r3, #21
 8004c1e:	4b30      	ldr	r3, [pc, #192]	@ (8004ce0 <MS5611_calc+0x338>)
 8004c20:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004c24:	1a84      	subs	r4, r0, r2
 8004c26:	623c      	str	r4, [r7, #32]
 8004c28:	eb61 0303 	sbc.w	r3, r1, r3
 8004c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	da08      	bge.n	8004c48 <MS5611_calc+0x2a0>
 8004c36:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004c3a:	1851      	adds	r1, r2, r1
 8004c3c:	6039      	str	r1, [r7, #0]
 8004c3e:	f143 0300 	adc.w	r3, r3, #0
 8004c42:	607b      	str	r3, [r7, #4]
 8004c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c48:	f04f 0000 	mov.w	r0, #0
 8004c4c:	f04f 0100 	mov.w	r1, #0
 8004c50:	0bd0      	lsrs	r0, r2, #15
 8004c52:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8004c56:	13d9      	asrs	r1, r3, #15
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4b20      	ldr	r3, [pc, #128]	@ (8004ce0 <MS5611_calc+0x338>)
 8004c5e:	621a      	str	r2, [r3, #32]
	Pressure = MS5611.P/100.0;
 8004c60:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce0 <MS5611_calc+0x338>)
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fb fc5d 	bl	8000524 <__aeabi_i2d>
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ce8 <MS5611_calc+0x340>)
 8004c70:	f7fb fdec 	bl	800084c <__aeabi_ddiv>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4610      	mov	r0, r2
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	f7fb ffb4 	bl	8000be8 <__aeabi_d2f>
 8004c80:	4603      	mov	r3, r0
 8004c82:	4a1c      	ldr	r2, [pc, #112]	@ (8004cf4 <MS5611_calc+0x34c>)
 8004c84:	6013      	str	r3, [r2, #0]
	Altitude_meas = (1 - pow((Pressure / 1013.25),0.190284)) * 44191.4;
 8004c86:	4b1b      	ldr	r3, [pc, #108]	@ (8004cf4 <MS5611_calc+0x34c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fb fc5c 	bl	8000548 <__aeabi_f2d>
 8004c90:	a30f      	add	r3, pc, #60	@ (adr r3, 8004cd0 <MS5611_calc+0x328>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f7fb fdd9 	bl	800084c <__aeabi_ddiv>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	ec43 2b17 	vmov	d7, r2, r3
 8004ca2:	ed9f 1b0d 	vldr	d1, [pc, #52]	@ 8004cd8 <MS5611_calc+0x330>
 8004ca6:	eeb0 0a47 	vmov.f32	s0, s14
 8004caa:	eef0 0a67 	vmov.f32	s1, s15
 8004cae:	f006 ff0b 	bl	800bac8 <pow>
 8004cb2:	ec53 2b10 	vmov	r2, r3, d0
 8004cb6:	f04f 0000 	mov.w	r0, #0
 8004cba:	490f      	ldr	r1, [pc, #60]	@ (8004cf8 <MS5611_calc+0x350>)
 8004cbc:	f7fb fae4 	bl	8000288 <__aeabi_dsub>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	e018      	b.n	8004cfc <MS5611_calc+0x354>
 8004cca:	bf00      	nop
 8004ccc:	f3af 8000 	nop.w
 8004cd0:	00000000 	.word	0x00000000
 8004cd4:	408faa00 	.word	0x408faa00
 8004cd8:	e279dd3c 	.word	0xe279dd3c
 8004cdc:	3fc85b39 	.word	0x3fc85b39
 8004ce0:	20000550 	.word	0x20000550
 8004ce4:	007fffff 	.word	0x007fffff
 8004ce8:	40590000 	.word	0x40590000
 8004cec:	200005a8 	.word	0x200005a8
 8004cf0:	001fffff 	.word	0x001fffff
 8004cf4:	200005ac 	.word	0x200005ac
 8004cf8:	3ff00000 	.word	0x3ff00000
 8004cfc:	a30b      	add	r3, pc, #44	@ (adr r3, 8004d2c <MS5611_calc+0x384>)
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	f7fb fc79 	bl	80005f8 <__aeabi_dmul>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	f7fb ff6b 	bl	8000be8 <__aeabi_d2f>
 8004d12:	4603      	mov	r3, r0
 8004d14:	4a04      	ldr	r2, [pc, #16]	@ (8004d28 <MS5611_calc+0x380>)
 8004d16:	6013      	str	r3, [r2, #0]

}
 8004d18:	bf00      	nop
 8004d1a:	3790      	adds	r7, #144	@ 0x90
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d22:	bf00      	nop
 8004d24:	f3af 8000 	nop.w
 8004d28:	200005b0 	.word	0x200005b0
 8004d2c:	cccccccd 	.word	0xcccccccd
 8004d30:	40e593ec 	.word	0x40e593ec

08004d34 <SPI1_Write8>:
//
// 8-bit veri yazma
void SPI1_Write8(uint8_t data) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	71fb      	strb	r3, [r7, #7]
    while (!LL_SPI_IsActiveFlag_TXE(SPI1))
 8004d3e:	bf00      	nop
 8004d40:	480c      	ldr	r0, [pc, #48]	@ (8004d74 <SPI1_Write8+0x40>)
 8004d42:	f7fe fbdf 	bl	8003504 <LL_SPI_IsActiveFlag_TXE>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0f9      	beq.n	8004d40 <SPI1_Write8+0xc>
        ;
    LL_SPI_TransmitData8(SPI1, data);
 8004d4c:	79fb      	ldrb	r3, [r7, #7]
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4808      	ldr	r0, [pc, #32]	@ (8004d74 <SPI1_Write8+0x40>)
 8004d52:	f7fe fbf8 	bl	8003546 <LL_SPI_TransmitData8>
    while (!LL_SPI_IsActiveFlag_RXNE(SPI1))
 8004d56:	bf00      	nop
 8004d58:	4806      	ldr	r0, [pc, #24]	@ (8004d74 <SPI1_Write8+0x40>)
 8004d5a:	f7fe fbc0 	bl	80034de <LL_SPI_IsActiveFlag_RXNE>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0f9      	beq.n	8004d58 <SPI1_Write8+0x24>
        ;
    LL_SPI_ReceiveData8(SPI1);
 8004d64:	4803      	ldr	r0, [pc, #12]	@ (8004d74 <SPI1_Write8+0x40>)
 8004d66:	f7fe fbe0 	bl	800352a <LL_SPI_ReceiveData8>
}
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40013000 	.word	0x40013000

08004d78 <SPI1_Read8>:

// 8-bit veri okuma
uint8_t SPI1_Read8(void) {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
    while (!LL_SPI_IsActiveFlag_TXE(SPI1))
 8004d7c:	bf00      	nop
 8004d7e:	480b      	ldr	r0, [pc, #44]	@ (8004dac <SPI1_Read8+0x34>)
 8004d80:	f7fe fbc0 	bl	8003504 <LL_SPI_IsActiveFlag_TXE>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0f9      	beq.n	8004d7e <SPI1_Read8+0x6>
        ;
    LL_SPI_TransmitData8(SPI1, 0xFF);
 8004d8a:	21ff      	movs	r1, #255	@ 0xff
 8004d8c:	4807      	ldr	r0, [pc, #28]	@ (8004dac <SPI1_Read8+0x34>)
 8004d8e:	f7fe fbda 	bl	8003546 <LL_SPI_TransmitData8>
    while (!LL_SPI_IsActiveFlag_RXNE(SPI1))
 8004d92:	bf00      	nop
 8004d94:	4805      	ldr	r0, [pc, #20]	@ (8004dac <SPI1_Read8+0x34>)
 8004d96:	f7fe fba2 	bl	80034de <LL_SPI_IsActiveFlag_RXNE>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f9      	beq.n	8004d94 <SPI1_Read8+0x1c>
        ;
    return LL_SPI_ReceiveData8(SPI1);
 8004da0:	4802      	ldr	r0, [pc, #8]	@ (8004dac <SPI1_Read8+0x34>)
 8004da2:	f7fe fbc2 	bl	800352a <LL_SPI_ReceiveData8>
 8004da6:	4603      	mov	r3, r0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40013000 	.word	0x40013000

08004db0 <Buzzer>:
uint32_t map( long A , long B , long C , long D, long E)
{
	return ( A - B) * (E - D ) / (C - B )+ D ;
}

void Buzzer(){
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8004db4:	2201      	movs	r2, #1
 8004db6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004dba:	482b      	ldr	r0, [pc, #172]	@ (8004e68 <Buzzer+0xb8>)
 8004dbc:	f001 f9e4 	bl	8006188 <HAL_GPIO_WritePin>
	  HAL_Delay(300);
 8004dc0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004dc4:	f000 fe94 	bl	8005af0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004dce:	4826      	ldr	r0, [pc, #152]	@ (8004e68 <Buzzer+0xb8>)
 8004dd0:	f001 f9da 	bl	8006188 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8004dd4:	2064      	movs	r0, #100	@ 0x64
 8004dd6:	f000 fe8b 	bl	8005af0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004de0:	4821      	ldr	r0, [pc, #132]	@ (8004e68 <Buzzer+0xb8>)
 8004de2:	f001 f9d1 	bl	8006188 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8004de6:	2096      	movs	r0, #150	@ 0x96
 8004de8:	f000 fe82 	bl	8005af0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8004dec:	2200      	movs	r2, #0
 8004dee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004df2:	481d      	ldr	r0, [pc, #116]	@ (8004e68 <Buzzer+0xb8>)
 8004df4:	f001 f9c8 	bl	8006188 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8004df8:	2064      	movs	r0, #100	@ 0x64
 8004dfa:	f000 fe79 	bl	8005af0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004e04:	4818      	ldr	r0, [pc, #96]	@ (8004e68 <Buzzer+0xb8>)
 8004e06:	f001 f9bf 	bl	8006188 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8004e0a:	2064      	movs	r0, #100	@ 0x64
 8004e0c:	f000 fe70 	bl	8005af0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8004e10:	2200      	movs	r2, #0
 8004e12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004e16:	4814      	ldr	r0, [pc, #80]	@ (8004e68 <Buzzer+0xb8>)
 8004e18:	f001 f9b6 	bl	8006188 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8004e1c:	2064      	movs	r0, #100	@ 0x64
 8004e1e:	f000 fe67 	bl	8005af0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8004e22:	2201      	movs	r2, #1
 8004e24:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004e28:	480f      	ldr	r0, [pc, #60]	@ (8004e68 <Buzzer+0xb8>)
 8004e2a:	f001 f9ad 	bl	8006188 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8004e2e:	2064      	movs	r0, #100	@ 0x64
 8004e30:	f000 fe5e 	bl	8005af0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8004e34:	2200      	movs	r2, #0
 8004e36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004e3a:	480b      	ldr	r0, [pc, #44]	@ (8004e68 <Buzzer+0xb8>)
 8004e3c:	f001 f9a4 	bl	8006188 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8004e40:	2064      	movs	r0, #100	@ 0x64
 8004e42:	f000 fe55 	bl	8005af0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8004e46:	2201      	movs	r2, #1
 8004e48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004e4c:	4806      	ldr	r0, [pc, #24]	@ (8004e68 <Buzzer+0xb8>)
 8004e4e:	f001 f99b 	bl	8006188 <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 8004e52:	20fa      	movs	r0, #250	@ 0xfa
 8004e54:	f000 fe4c 	bl	8005af0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004e5e:	4802      	ldr	r0, [pc, #8]	@ (8004e68 <Buzzer+0xb8>)
 8004e60:	f001 f992 	bl	8006188 <HAL_GPIO_WritePin>
}
 8004e64:	bf00      	nop
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40020800 	.word	0x40020800

08004e6c <_write>:

int _write(int file , char*p, int len)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
//	{
//		//HAL_UART_Transmit(huart, *(p+i), Size, Timeout)
//	}


	return len;
 8004e78:	687b      	ldr	r3, [r7, #4]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <send>:

}


void send()
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0

	 Tx_Buff[0] = 0x0;
 8004e8c:	4b4a      	ldr	r3, [pc, #296]	@ (8004fb8 <send+0x130>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	701a      	strb	r2, [r3, #0]
	 Tx_Buff[1] = 0x1;
 8004e92:	4b49      	ldr	r3, [pc, #292]	@ (8004fb8 <send+0x130>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	705a      	strb	r2, [r3, #1]
	 Tx_Buff[2] = 0x17;
 8004e98:	4b47      	ldr	r3, [pc, #284]	@ (8004fb8 <send+0x130>)
 8004e9a:	2217      	movs	r2, #23
 8004e9c:	709a      	strb	r2, [r3, #2]

	 converter.f =BNO080_Yaw ;
 8004e9e:	4b47      	ldr	r3, [pc, #284]	@ (8004fbc <send+0x134>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a47      	ldr	r2, [pc, #284]	@ (8004fc0 <send+0x138>)
 8004ea4:	6013      	str	r3, [r2, #0]

	 Tx_Buff[3]=converter.b[0];
 8004ea6:	4b46      	ldr	r3, [pc, #280]	@ (8004fc0 <send+0x138>)
 8004ea8:	781a      	ldrb	r2, [r3, #0]
 8004eaa:	4b43      	ldr	r3, [pc, #268]	@ (8004fb8 <send+0x130>)
 8004eac:	70da      	strb	r2, [r3, #3]
	 Tx_Buff[4]=converter.b[1];
 8004eae:	4b44      	ldr	r3, [pc, #272]	@ (8004fc0 <send+0x138>)
 8004eb0:	785a      	ldrb	r2, [r3, #1]
 8004eb2:	4b41      	ldr	r3, [pc, #260]	@ (8004fb8 <send+0x130>)
 8004eb4:	711a      	strb	r2, [r3, #4]
	 Tx_Buff[5]=converter.b[2];
 8004eb6:	4b42      	ldr	r3, [pc, #264]	@ (8004fc0 <send+0x138>)
 8004eb8:	789a      	ldrb	r2, [r3, #2]
 8004eba:	4b3f      	ldr	r3, [pc, #252]	@ (8004fb8 <send+0x130>)
 8004ebc:	715a      	strb	r2, [r3, #5]
	 Tx_Buff[6]=converter.b[3];
 8004ebe:	4b40      	ldr	r3, [pc, #256]	@ (8004fc0 <send+0x138>)
 8004ec0:	78da      	ldrb	r2, [r3, #3]
 8004ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8004fb8 <send+0x130>)
 8004ec4:	719a      	strb	r2, [r3, #6]

	 converter.f =BNO080_Roll ;
 8004ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8004fc4 <send+0x13c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a3d      	ldr	r2, [pc, #244]	@ (8004fc0 <send+0x138>)
 8004ecc:	6013      	str	r3, [r2, #0]

	 Tx_Buff[7]=converter.b[0];
 8004ece:	4b3c      	ldr	r3, [pc, #240]	@ (8004fc0 <send+0x138>)
 8004ed0:	781a      	ldrb	r2, [r3, #0]
 8004ed2:	4b39      	ldr	r3, [pc, #228]	@ (8004fb8 <send+0x130>)
 8004ed4:	71da      	strb	r2, [r3, #7]
	 Tx_Buff[8]=converter.b[1];
 8004ed6:	4b3a      	ldr	r3, [pc, #232]	@ (8004fc0 <send+0x138>)
 8004ed8:	785a      	ldrb	r2, [r3, #1]
 8004eda:	4b37      	ldr	r3, [pc, #220]	@ (8004fb8 <send+0x130>)
 8004edc:	721a      	strb	r2, [r3, #8]
	 Tx_Buff[9]=converter.b[2];
 8004ede:	4b38      	ldr	r3, [pc, #224]	@ (8004fc0 <send+0x138>)
 8004ee0:	789a      	ldrb	r2, [r3, #2]
 8004ee2:	4b35      	ldr	r3, [pc, #212]	@ (8004fb8 <send+0x130>)
 8004ee4:	725a      	strb	r2, [r3, #9]
	 Tx_Buff[10]=converter.b[3];
 8004ee6:	4b36      	ldr	r3, [pc, #216]	@ (8004fc0 <send+0x138>)
 8004ee8:	78da      	ldrb	r2, [r3, #3]
 8004eea:	4b33      	ldr	r3, [pc, #204]	@ (8004fb8 <send+0x130>)
 8004eec:	729a      	strb	r2, [r3, #10]

	 converter.f =BNO080_Pitch ;
 8004eee:	4b36      	ldr	r3, [pc, #216]	@ (8004fc8 <send+0x140>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a33      	ldr	r2, [pc, #204]	@ (8004fc0 <send+0x138>)
 8004ef4:	6013      	str	r3, [r2, #0]

	 Tx_Buff[11]=converter.b[0];
 8004ef6:	4b32      	ldr	r3, [pc, #200]	@ (8004fc0 <send+0x138>)
 8004ef8:	781a      	ldrb	r2, [r3, #0]
 8004efa:	4b2f      	ldr	r3, [pc, #188]	@ (8004fb8 <send+0x130>)
 8004efc:	72da      	strb	r2, [r3, #11]
	 Tx_Buff[12]=converter.b[1];
 8004efe:	4b30      	ldr	r3, [pc, #192]	@ (8004fc0 <send+0x138>)
 8004f00:	785a      	ldrb	r2, [r3, #1]
 8004f02:	4b2d      	ldr	r3, [pc, #180]	@ (8004fb8 <send+0x130>)
 8004f04:	731a      	strb	r2, [r3, #12]
	 Tx_Buff[13]=converter.b[2];
 8004f06:	4b2e      	ldr	r3, [pc, #184]	@ (8004fc0 <send+0x138>)
 8004f08:	789a      	ldrb	r2, [r3, #2]
 8004f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8004fb8 <send+0x130>)
 8004f0c:	735a      	strb	r2, [r3, #13]
	 Tx_Buff[14]=converter.b[3];
 8004f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8004fc0 <send+0x138>)
 8004f10:	78da      	ldrb	r2, [r3, #3]
 8004f12:	4b29      	ldr	r3, [pc, #164]	@ (8004fb8 <send+0x130>)
 8004f14:	739a      	strb	r2, [r3, #14]

	 converter.f = gps.latitude ;
 8004f16:	4b2d      	ldr	r3, [pc, #180]	@ (8004fcc <send+0x144>)
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4619      	mov	r1, r3
 8004f20:	f7fb fe62 	bl	8000be8 <__aeabi_d2f>
 8004f24:	4603      	mov	r3, r0
 8004f26:	4a26      	ldr	r2, [pc, #152]	@ (8004fc0 <send+0x138>)
 8004f28:	6013      	str	r3, [r2, #0]

	 Tx_Buff[15]=converter.b[0];
 8004f2a:	4b25      	ldr	r3, [pc, #148]	@ (8004fc0 <send+0x138>)
 8004f2c:	781a      	ldrb	r2, [r3, #0]
 8004f2e:	4b22      	ldr	r3, [pc, #136]	@ (8004fb8 <send+0x130>)
 8004f30:	73da      	strb	r2, [r3, #15]
	 Tx_Buff[16]=converter.b[1];
 8004f32:	4b23      	ldr	r3, [pc, #140]	@ (8004fc0 <send+0x138>)
 8004f34:	785a      	ldrb	r2, [r3, #1]
 8004f36:	4b20      	ldr	r3, [pc, #128]	@ (8004fb8 <send+0x130>)
 8004f38:	741a      	strb	r2, [r3, #16]
	 Tx_Buff[17]=converter.b[2];
 8004f3a:	4b21      	ldr	r3, [pc, #132]	@ (8004fc0 <send+0x138>)
 8004f3c:	789a      	ldrb	r2, [r3, #2]
 8004f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb8 <send+0x130>)
 8004f40:	745a      	strb	r2, [r3, #17]
	 Tx_Buff[18]=converter.b[3];
 8004f42:	4b1f      	ldr	r3, [pc, #124]	@ (8004fc0 <send+0x138>)
 8004f44:	78da      	ldrb	r2, [r3, #3]
 8004f46:	4b1c      	ldr	r3, [pc, #112]	@ (8004fb8 <send+0x130>)
 8004f48:	749a      	strb	r2, [r3, #18]

	 converter.f = gps.longitude;
 8004f4a:	4b20      	ldr	r3, [pc, #128]	@ (8004fcc <send+0x144>)
 8004f4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004f50:	4610      	mov	r0, r2
 8004f52:	4619      	mov	r1, r3
 8004f54:	f7fb fe48 	bl	8000be8 <__aeabi_d2f>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	4a19      	ldr	r2, [pc, #100]	@ (8004fc0 <send+0x138>)
 8004f5c:	6013      	str	r3, [r2, #0]

	 Tx_Buff[19]=converter.b[0];
 8004f5e:	4b18      	ldr	r3, [pc, #96]	@ (8004fc0 <send+0x138>)
 8004f60:	781a      	ldrb	r2, [r3, #0]
 8004f62:	4b15      	ldr	r3, [pc, #84]	@ (8004fb8 <send+0x130>)
 8004f64:	74da      	strb	r2, [r3, #19]
	 Tx_Buff[20]=converter.b[1];
 8004f66:	4b16      	ldr	r3, [pc, #88]	@ (8004fc0 <send+0x138>)
 8004f68:	785a      	ldrb	r2, [r3, #1]
 8004f6a:	4b13      	ldr	r3, [pc, #76]	@ (8004fb8 <send+0x130>)
 8004f6c:	751a      	strb	r2, [r3, #20]
	 Tx_Buff[21]=converter.b[2];
 8004f6e:	4b14      	ldr	r3, [pc, #80]	@ (8004fc0 <send+0x138>)
 8004f70:	789a      	ldrb	r2, [r3, #2]
 8004f72:	4b11      	ldr	r3, [pc, #68]	@ (8004fb8 <send+0x130>)
 8004f74:	755a      	strb	r2, [r3, #21]
	 Tx_Buff[22]=converter.b[3];
 8004f76:	4b12      	ldr	r3, [pc, #72]	@ (8004fc0 <send+0x138>)
 8004f78:	78da      	ldrb	r2, [r3, #3]
 8004f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb8 <send+0x130>)
 8004f7c:	759a      	strb	r2, [r3, #22]

	 converter.f = 31.1;
 8004f7e:	4b10      	ldr	r3, [pc, #64]	@ (8004fc0 <send+0x138>)
 8004f80:	4a13      	ldr	r2, [pc, #76]	@ (8004fd0 <send+0x148>)
 8004f82:	601a      	str	r2, [r3, #0]

	Tx_Buff[23]=converter.b[0];
 8004f84:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc0 <send+0x138>)
 8004f86:	781a      	ldrb	r2, [r3, #0]
 8004f88:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb8 <send+0x130>)
 8004f8a:	75da      	strb	r2, [r3, #23]
	Tx_Buff[24]=converter.b[1];
 8004f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc0 <send+0x138>)
 8004f8e:	785a      	ldrb	r2, [r3, #1]
 8004f90:	4b09      	ldr	r3, [pc, #36]	@ (8004fb8 <send+0x130>)
 8004f92:	761a      	strb	r2, [r3, #24]
	Tx_Buff[25]=converter.b[2];
 8004f94:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc0 <send+0x138>)
 8004f96:	789a      	ldrb	r2, [r3, #2]
 8004f98:	4b07      	ldr	r3, [pc, #28]	@ (8004fb8 <send+0x130>)
 8004f9a:	765a      	strb	r2, [r3, #25]
	Tx_Buff[26]=converter.b[3];
 8004f9c:	4b08      	ldr	r3, [pc, #32]	@ (8004fc0 <send+0x138>)
 8004f9e:	78da      	ldrb	r2, [r3, #3]
 8004fa0:	4b05      	ldr	r3, [pc, #20]	@ (8004fb8 <send+0x130>)
 8004fa2:	769a      	strb	r2, [r3, #26]
	 Tx_Buff[27]='\n';
 8004fa4:	4b04      	ldr	r3, [pc, #16]	@ (8004fb8 <send+0x130>)
 8004fa6:	220a      	movs	r2, #10
 8004fa8:	76da      	strb	r2, [r3, #27]


	//HAL_UART_Transmit(&huart6, &Low_Addr, 1, 100);
	//HAL_UART_Transmit(&huart6, &High_Addr, 1, 100);
	//HAL_UART_Transmit(&huart6, &CH, 1, 100);
	HAL_UART_Transmit_IT(&huart6, Tx_Buff, sizeof(Tx_Buff));
 8004faa:	221c      	movs	r2, #28
 8004fac:	4902      	ldr	r1, [pc, #8]	@ (8004fb8 <send+0x130>)
 8004fae:	4809      	ldr	r0, [pc, #36]	@ (8004fd4 <send+0x14c>)
 8004fb0:	f002 fdc7 	bl	8007b42 <HAL_UART_Transmit_IT>

	//HAL_UART_Transmit_IT(&huart6, Tx_Buff, 11);

}
 8004fb4:	bf00      	nop
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	200006a8 	.word	0x200006a8
 8004fbc:	20000484 	.word	0x20000484
 8004fc0:	20000588 	.word	0x20000588
 8004fc4:	2000047c 	.word	0x2000047c
 8004fc8:	20000480 	.word	0x20000480
 8004fcc:	20000488 	.word	0x20000488
 8004fd0:	41f8cccd 	.word	0x41f8cccd
 8004fd4:	20000828 	.word	0x20000828

08004fd8 <iBus_isActiveFailsafe>:

unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	7d1b      	ldrb	r3, [r3, #20]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	bf14      	ite	ne
 8004fe8:	2301      	movne	r3, #1
 8004fea:	2300      	moveq	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <PID_Coef_Config>:


void PID_Coef_Config(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0



	  roll.in.kd = 0.15;
 8005000:	4b23      	ldr	r3, [pc, #140]	@ (8005090 <PID_Coef_Config+0x94>)
 8005002:	4a24      	ldr	r2, [pc, #144]	@ (8005094 <PID_Coef_Config+0x98>)
 8005004:	609a      	str	r2, [r3, #8]
	  roll.in.kp = 2;
 8005006:	4b22      	ldr	r3, [pc, #136]	@ (8005090 <PID_Coef_Config+0x94>)
 8005008:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800500c:	601a      	str	r2, [r3, #0]
	  roll.in.ki = 0.3;
 800500e:	4b20      	ldr	r3, [pc, #128]	@ (8005090 <PID_Coef_Config+0x94>)
 8005010:	4a21      	ldr	r2, [pc, #132]	@ (8005098 <PID_Coef_Config+0x9c>)
 8005012:	605a      	str	r2, [r3, #4]

	  roll.out.kd = 4.5;
 8005014:	4b1e      	ldr	r3, [pc, #120]	@ (8005090 <PID_Coef_Config+0x94>)
 8005016:	4a21      	ldr	r2, [pc, #132]	@ (800509c <PID_Coef_Config+0xa0>)
 8005018:	641a      	str	r2, [r3, #64]	@ 0x40
	  roll.out.kp = 15;
 800501a:	4b1d      	ldr	r3, [pc, #116]	@ (8005090 <PID_Coef_Config+0x94>)
 800501c:	4a20      	ldr	r2, [pc, #128]	@ (80050a0 <PID_Coef_Config+0xa4>)
 800501e:	639a      	str	r2, [r3, #56]	@ 0x38
	  roll.out.ki =3.5;
 8005020:	4b1b      	ldr	r3, [pc, #108]	@ (8005090 <PID_Coef_Config+0x94>)
 8005022:	4a20      	ldr	r2, [pc, #128]	@ (80050a4 <PID_Coef_Config+0xa8>)
 8005024:	63da      	str	r2, [r3, #60]	@ 0x3c

	  pitch.in.kd = 0.15;
 8005026:	4b20      	ldr	r3, [pc, #128]	@ (80050a8 <PID_Coef_Config+0xac>)
 8005028:	4a1a      	ldr	r2, [pc, #104]	@ (8005094 <PID_Coef_Config+0x98>)
 800502a:	609a      	str	r2, [r3, #8]
	  pitch.in.kp = 2;
 800502c:	4b1e      	ldr	r3, [pc, #120]	@ (80050a8 <PID_Coef_Config+0xac>)
 800502e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005032:	601a      	str	r2, [r3, #0]
	  pitch.in.ki = 0.3;
 8005034:	4b1c      	ldr	r3, [pc, #112]	@ (80050a8 <PID_Coef_Config+0xac>)
 8005036:	4a18      	ldr	r2, [pc, #96]	@ (8005098 <PID_Coef_Config+0x9c>)
 8005038:	605a      	str	r2, [r3, #4]

	  pitch.out.kd = 4.5;
 800503a:	4b1b      	ldr	r3, [pc, #108]	@ (80050a8 <PID_Coef_Config+0xac>)
 800503c:	4a17      	ldr	r2, [pc, #92]	@ (800509c <PID_Coef_Config+0xa0>)
 800503e:	641a      	str	r2, [r3, #64]	@ 0x40
	  pitch.out.kp = 15;
 8005040:	4b19      	ldr	r3, [pc, #100]	@ (80050a8 <PID_Coef_Config+0xac>)
 8005042:	4a17      	ldr	r2, [pc, #92]	@ (80050a0 <PID_Coef_Config+0xa4>)
 8005044:	639a      	str	r2, [r3, #56]	@ 0x38
	  pitch.out.ki = 3.5;
 8005046:	4b18      	ldr	r3, [pc, #96]	@ (80050a8 <PID_Coef_Config+0xac>)
 8005048:	4a16      	ldr	r2, [pc, #88]	@ (80050a4 <PID_Coef_Config+0xa8>)
 800504a:	63da      	str	r2, [r3, #60]	@ 0x3c

	//
	  yaw_heading.kd = 15.0;
 800504c:	4b17      	ldr	r3, [pc, #92]	@ (80050ac <PID_Coef_Config+0xb0>)
 800504e:	4a14      	ldr	r2, [pc, #80]	@ (80050a0 <PID_Coef_Config+0xa4>)
 8005050:	609a      	str	r2, [r3, #8]
	  yaw_heading.kp = 30;
 8005052:	4b16      	ldr	r3, [pc, #88]	@ (80050ac <PID_Coef_Config+0xb0>)
 8005054:	4a16      	ldr	r2, [pc, #88]	@ (80050b0 <PID_Coef_Config+0xb4>)
 8005056:	601a      	str	r2, [r3, #0]
	  yaw_heading.ki =0.0001;
 8005058:	4b14      	ldr	r3, [pc, #80]	@ (80050ac <PID_Coef_Config+0xb0>)
 800505a:	4a16      	ldr	r2, [pc, #88]	@ (80050b4 <PID_Coef_Config+0xb8>)
 800505c:	605a      	str	r2, [r3, #4]

	  yaw_rate.kd = 0.05;
 800505e:	4b16      	ldr	r3, [pc, #88]	@ (80050b8 <PID_Coef_Config+0xbc>)
 8005060:	4a16      	ldr	r2, [pc, #88]	@ (80050bc <PID_Coef_Config+0xc0>)
 8005062:	609a      	str	r2, [r3, #8]
	  yaw_rate.kp = 4;
 8005064:	4b14      	ldr	r3, [pc, #80]	@ (80050b8 <PID_Coef_Config+0xbc>)
 8005066:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800506a:	601a      	str	r2, [r3, #0]
	  yaw_rate.ki = 0.0;
 800506c:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <PID_Coef_Config+0xbc>)
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	605a      	str	r2, [r3, #4]

	  altitude.kd = 0.01;
 8005074:	4b12      	ldr	r3, [pc, #72]	@ (80050c0 <PID_Coef_Config+0xc4>)
 8005076:	4a13      	ldr	r2, [pc, #76]	@ (80050c4 <PID_Coef_Config+0xc8>)
 8005078:	609a      	str	r2, [r3, #8]
	  altitude.kp = 3;
 800507a:	4b11      	ldr	r3, [pc, #68]	@ (80050c0 <PID_Coef_Config+0xc4>)
 800507c:	4a12      	ldr	r2, [pc, #72]	@ (80050c8 <PID_Coef_Config+0xcc>)
 800507e:	601a      	str	r2, [r3, #0]
	  altitude.ki = 0.001;
 8005080:	4b0f      	ldr	r3, [pc, #60]	@ (80050c0 <PID_Coef_Config+0xc4>)
 8005082:	4a12      	ldr	r2, [pc, #72]	@ (80050cc <PID_Coef_Config+0xd0>)
 8005084:	605a      	str	r2, [r3, #4]
}
 8005086:	bf00      	nop
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	200002f4 	.word	0x200002f4
 8005094:	3e19999a 	.word	0x3e19999a
 8005098:	3e99999a 	.word	0x3e99999a
 800509c:	40900000 	.word	0x40900000
 80050a0:	41700000 	.word	0x41700000
 80050a4:	40600000 	.word	0x40600000
 80050a8:	20000364 	.word	0x20000364
 80050ac:	200003d4 	.word	0x200003d4
 80050b0:	41f00000 	.word	0x41f00000
 80050b4:	38d1b717 	.word	0x38d1b717
 80050b8:	2000040c 	.word	0x2000040c
 80050bc:	3d4ccccd 	.word	0x3d4ccccd
 80050c0:	20000444 	.word	0x20000444
 80050c4:	3c23d70a 	.word	0x3c23d70a
 80050c8:	40400000 	.word	0x40400000
 80050cc:	3a83126f 	.word	0x3a83126f

080050d0 <PID_CONFIG_LORA>:

void PID_CONFIG_LORA()
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
	converter.b[0] = rx_buffer_PID[0];
 80050d4:	4b99      	ldr	r3, [pc, #612]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80050d6:	781a      	ldrb	r2, [r3, #0]
 80050d8:	4b99      	ldr	r3, [pc, #612]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80050da:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[1];
 80050dc:	4b97      	ldr	r3, [pc, #604]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80050de:	785a      	ldrb	r2, [r3, #1]
 80050e0:	4b97      	ldr	r3, [pc, #604]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80050e2:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[2];
 80050e4:	4b95      	ldr	r3, [pc, #596]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80050e6:	789a      	ldrb	r2, [r3, #2]
 80050e8:	4b95      	ldr	r3, [pc, #596]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80050ea:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[3];
 80050ec:	4b93      	ldr	r3, [pc, #588]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80050ee:	78da      	ldrb	r2, [r3, #3]
 80050f0:	4b93      	ldr	r3, [pc, #588]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80050f2:	70da      	strb	r2, [r3, #3]
	roll.in.kd = converter.f;
 80050f4:	4b92      	ldr	r3, [pc, #584]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a92      	ldr	r2, [pc, #584]	@ (8005344 <PID_CONFIG_LORA+0x274>)
 80050fa:	6093      	str	r3, [r2, #8]

	converter.b[0] = rx_buffer_PID[4];
 80050fc:	4b8f      	ldr	r3, [pc, #572]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80050fe:	791a      	ldrb	r2, [r3, #4]
 8005100:	4b8f      	ldr	r3, [pc, #572]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005102:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[5];
 8005104:	4b8d      	ldr	r3, [pc, #564]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005106:	795a      	ldrb	r2, [r3, #5]
 8005108:	4b8d      	ldr	r3, [pc, #564]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800510a:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[6];
 800510c:	4b8b      	ldr	r3, [pc, #556]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 800510e:	799a      	ldrb	r2, [r3, #6]
 8005110:	4b8b      	ldr	r3, [pc, #556]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005112:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[7];
 8005114:	4b89      	ldr	r3, [pc, #548]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005116:	79da      	ldrb	r2, [r3, #7]
 8005118:	4b89      	ldr	r3, [pc, #548]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800511a:	70da      	strb	r2, [r3, #3]
	roll.in.ki = converter.f;
 800511c:	4b88      	ldr	r3, [pc, #544]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a88      	ldr	r2, [pc, #544]	@ (8005344 <PID_CONFIG_LORA+0x274>)
 8005122:	6053      	str	r3, [r2, #4]

	converter.b[0] = rx_buffer_PID[8];
 8005124:	4b85      	ldr	r3, [pc, #532]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005126:	7a1a      	ldrb	r2, [r3, #8]
 8005128:	4b85      	ldr	r3, [pc, #532]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800512a:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[9];
 800512c:	4b83      	ldr	r3, [pc, #524]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 800512e:	7a5a      	ldrb	r2, [r3, #9]
 8005130:	4b83      	ldr	r3, [pc, #524]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005132:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[10];
 8005134:	4b81      	ldr	r3, [pc, #516]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005136:	7a9a      	ldrb	r2, [r3, #10]
 8005138:	4b81      	ldr	r3, [pc, #516]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800513a:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[11];
 800513c:	4b7f      	ldr	r3, [pc, #508]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 800513e:	7ada      	ldrb	r2, [r3, #11]
 8005140:	4b7f      	ldr	r3, [pc, #508]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005142:	70da      	strb	r2, [r3, #3]
	roll.in.kp = converter.f;
 8005144:	4b7e      	ldr	r3, [pc, #504]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a7e      	ldr	r2, [pc, #504]	@ (8005344 <PID_CONFIG_LORA+0x274>)
 800514a:	6013      	str	r3, [r2, #0]

	converter.b[0] = rx_buffer_PID[12];
 800514c:	4b7b      	ldr	r3, [pc, #492]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 800514e:	7b1a      	ldrb	r2, [r3, #12]
 8005150:	4b7b      	ldr	r3, [pc, #492]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005152:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[13];
 8005154:	4b79      	ldr	r3, [pc, #484]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005156:	7b5a      	ldrb	r2, [r3, #13]
 8005158:	4b79      	ldr	r3, [pc, #484]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800515a:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[14];
 800515c:	4b77      	ldr	r3, [pc, #476]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 800515e:	7b9a      	ldrb	r2, [r3, #14]
 8005160:	4b77      	ldr	r3, [pc, #476]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005162:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[15];
 8005164:	4b75      	ldr	r3, [pc, #468]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005166:	7bda      	ldrb	r2, [r3, #15]
 8005168:	4b75      	ldr	r3, [pc, #468]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800516a:	70da      	strb	r2, [r3, #3]
	roll.out.kd = converter.f;
 800516c:	4b74      	ldr	r3, [pc, #464]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a74      	ldr	r2, [pc, #464]	@ (8005344 <PID_CONFIG_LORA+0x274>)
 8005172:	6413      	str	r3, [r2, #64]	@ 0x40

	converter.b[0] = rx_buffer_PID[16];
 8005174:	4b71      	ldr	r3, [pc, #452]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005176:	7c1a      	ldrb	r2, [r3, #16]
 8005178:	4b71      	ldr	r3, [pc, #452]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800517a:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[17];
 800517c:	4b6f      	ldr	r3, [pc, #444]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 800517e:	7c5a      	ldrb	r2, [r3, #17]
 8005180:	4b6f      	ldr	r3, [pc, #444]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005182:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[18];
 8005184:	4b6d      	ldr	r3, [pc, #436]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005186:	7c9a      	ldrb	r2, [r3, #18]
 8005188:	4b6d      	ldr	r3, [pc, #436]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800518a:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[19];
 800518c:	4b6b      	ldr	r3, [pc, #428]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 800518e:	7cda      	ldrb	r2, [r3, #19]
 8005190:	4b6b      	ldr	r3, [pc, #428]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005192:	70da      	strb	r2, [r3, #3]
	roll.out.ki = converter.f;
 8005194:	4b6a      	ldr	r3, [pc, #424]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a6a      	ldr	r2, [pc, #424]	@ (8005344 <PID_CONFIG_LORA+0x274>)
 800519a:	63d3      	str	r3, [r2, #60]	@ 0x3c

	converter.b[0] = rx_buffer_PID[20];
 800519c:	4b67      	ldr	r3, [pc, #412]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 800519e:	7d1a      	ldrb	r2, [r3, #20]
 80051a0:	4b67      	ldr	r3, [pc, #412]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80051a2:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[21];
 80051a4:	4b65      	ldr	r3, [pc, #404]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80051a6:	7d5a      	ldrb	r2, [r3, #21]
 80051a8:	4b65      	ldr	r3, [pc, #404]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80051aa:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[22];
 80051ac:	4b63      	ldr	r3, [pc, #396]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80051ae:	7d9a      	ldrb	r2, [r3, #22]
 80051b0:	4b63      	ldr	r3, [pc, #396]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80051b2:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[23];
 80051b4:	4b61      	ldr	r3, [pc, #388]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80051b6:	7dda      	ldrb	r2, [r3, #23]
 80051b8:	4b61      	ldr	r3, [pc, #388]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80051ba:	70da      	strb	r2, [r3, #3]
	roll.out.kp = converter.f;
 80051bc:	4b60      	ldr	r3, [pc, #384]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a60      	ldr	r2, [pc, #384]	@ (8005344 <PID_CONFIG_LORA+0x274>)
 80051c2:	6393      	str	r3, [r2, #56]	@ 0x38

	converter.b[0] = rx_buffer_PID[24];
 80051c4:	4b5d      	ldr	r3, [pc, #372]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80051c6:	7e1a      	ldrb	r2, [r3, #24]
 80051c8:	4b5d      	ldr	r3, [pc, #372]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80051ca:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[25];
 80051cc:	4b5b      	ldr	r3, [pc, #364]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80051ce:	7e5a      	ldrb	r2, [r3, #25]
 80051d0:	4b5b      	ldr	r3, [pc, #364]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80051d2:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[26];
 80051d4:	4b59      	ldr	r3, [pc, #356]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80051d6:	7e9a      	ldrb	r2, [r3, #26]
 80051d8:	4b59      	ldr	r3, [pc, #356]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80051da:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[27];
 80051dc:	4b57      	ldr	r3, [pc, #348]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80051de:	7eda      	ldrb	r2, [r3, #27]
 80051e0:	4b57      	ldr	r3, [pc, #348]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80051e2:	70da      	strb	r2, [r3, #3]
	pitch.in.kd = converter.f;
 80051e4:	4b56      	ldr	r3, [pc, #344]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a57      	ldr	r2, [pc, #348]	@ (8005348 <PID_CONFIG_LORA+0x278>)
 80051ea:	6093      	str	r3, [r2, #8]

	converter.b[0] = rx_buffer_PID[28];
 80051ec:	4b53      	ldr	r3, [pc, #332]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80051ee:	7f1a      	ldrb	r2, [r3, #28]
 80051f0:	4b53      	ldr	r3, [pc, #332]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80051f2:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[29];
 80051f4:	4b51      	ldr	r3, [pc, #324]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80051f6:	7f5a      	ldrb	r2, [r3, #29]
 80051f8:	4b51      	ldr	r3, [pc, #324]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80051fa:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[30];
 80051fc:	4b4f      	ldr	r3, [pc, #316]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80051fe:	7f9a      	ldrb	r2, [r3, #30]
 8005200:	4b4f      	ldr	r3, [pc, #316]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005202:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[31];
 8005204:	4b4d      	ldr	r3, [pc, #308]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005206:	7fda      	ldrb	r2, [r3, #31]
 8005208:	4b4d      	ldr	r3, [pc, #308]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800520a:	70da      	strb	r2, [r3, #3]
	pitch.in.ki = converter.f;
 800520c:	4b4c      	ldr	r3, [pc, #304]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a4d      	ldr	r2, [pc, #308]	@ (8005348 <PID_CONFIG_LORA+0x278>)
 8005212:	6053      	str	r3, [r2, #4]

	converter.b[0] = rx_buffer_PID[32];
 8005214:	4b49      	ldr	r3, [pc, #292]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005216:	f893 2020 	ldrb.w	r2, [r3, #32]
 800521a:	4b49      	ldr	r3, [pc, #292]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800521c:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[33];
 800521e:	4b47      	ldr	r3, [pc, #284]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005220:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8005224:	4b46      	ldr	r3, [pc, #280]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005226:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[34];
 8005228:	4b44      	ldr	r3, [pc, #272]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 800522a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800522e:	4b44      	ldr	r3, [pc, #272]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005230:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[35];
 8005232:	4b42      	ldr	r3, [pc, #264]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005234:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8005238:	4b41      	ldr	r3, [pc, #260]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800523a:	70da      	strb	r2, [r3, #3]
	pitch.in.kp = converter.f;
 800523c:	4b40      	ldr	r3, [pc, #256]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a41      	ldr	r2, [pc, #260]	@ (8005348 <PID_CONFIG_LORA+0x278>)
 8005242:	6013      	str	r3, [r2, #0]

	converter.b[0] = rx_buffer_PID[36];
 8005244:	4b3d      	ldr	r3, [pc, #244]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005246:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800524a:	4b3d      	ldr	r3, [pc, #244]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800524c:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[37];
 800524e:	4b3b      	ldr	r3, [pc, #236]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005250:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8005254:	4b3a      	ldr	r3, [pc, #232]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005256:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[38];
 8005258:	4b38      	ldr	r3, [pc, #224]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 800525a:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800525e:	4b38      	ldr	r3, [pc, #224]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005260:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[39];
 8005262:	4b36      	ldr	r3, [pc, #216]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005264:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8005268:	4b35      	ldr	r3, [pc, #212]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800526a:	70da      	strb	r2, [r3, #3]
	pitch.out.kd = converter.f;
 800526c:	4b34      	ldr	r3, [pc, #208]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a35      	ldr	r2, [pc, #212]	@ (8005348 <PID_CONFIG_LORA+0x278>)
 8005272:	6413      	str	r3, [r2, #64]	@ 0x40

	converter.b[0] = rx_buffer_PID[40];
 8005274:	4b31      	ldr	r3, [pc, #196]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005276:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 800527a:	4b31      	ldr	r3, [pc, #196]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800527c:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[41];
 800527e:	4b2f      	ldr	r3, [pc, #188]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005280:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8005284:	4b2e      	ldr	r3, [pc, #184]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005286:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[42];
 8005288:	4b2c      	ldr	r3, [pc, #176]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 800528a:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800528e:	4b2c      	ldr	r3, [pc, #176]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005290:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[43];
 8005292:	4b2a      	ldr	r3, [pc, #168]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005294:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8005298:	4b29      	ldr	r3, [pc, #164]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800529a:	70da      	strb	r2, [r3, #3]
	pitch.out.ki = converter.f;
 800529c:	4b28      	ldr	r3, [pc, #160]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a29      	ldr	r2, [pc, #164]	@ (8005348 <PID_CONFIG_LORA+0x278>)
 80052a2:	63d3      	str	r3, [r2, #60]	@ 0x3c

	converter.b[0] = rx_buffer_PID[44];
 80052a4:	4b25      	ldr	r3, [pc, #148]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80052a6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80052aa:	4b25      	ldr	r3, [pc, #148]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80052ac:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[45];
 80052ae:	4b23      	ldr	r3, [pc, #140]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80052b0:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80052b4:	4b22      	ldr	r3, [pc, #136]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80052b6:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[46];
 80052b8:	4b20      	ldr	r3, [pc, #128]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80052ba:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80052be:	4b20      	ldr	r3, [pc, #128]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80052c0:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[47];
 80052c2:	4b1e      	ldr	r3, [pc, #120]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80052c4:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80052c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80052ca:	70da      	strb	r2, [r3, #3]
	pitch.out.kp = converter.f;
 80052cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005348 <PID_CONFIG_LORA+0x278>)
 80052d2:	6393      	str	r3, [r2, #56]	@ 0x38

	converter.b[0] = rx_buffer_PID[48];
 80052d4:	4b19      	ldr	r3, [pc, #100]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80052d6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80052da:	4b19      	ldr	r3, [pc, #100]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80052dc:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[49];
 80052de:	4b17      	ldr	r3, [pc, #92]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80052e0:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 80052e4:	4b16      	ldr	r3, [pc, #88]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80052e6:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[50];
 80052e8:	4b14      	ldr	r3, [pc, #80]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80052ea:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80052ee:	4b14      	ldr	r3, [pc, #80]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80052f0:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[51];
 80052f2:	4b12      	ldr	r3, [pc, #72]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 80052f4:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80052f8:	4b11      	ldr	r3, [pc, #68]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80052fa:	70da      	strb	r2, [r3, #3]
	yaw_heading.kd = converter.f;
 80052fc:	4b10      	ldr	r3, [pc, #64]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a12      	ldr	r2, [pc, #72]	@ (800534c <PID_CONFIG_LORA+0x27c>)
 8005302:	6093      	str	r3, [r2, #8]

	converter.b[0] = rx_buffer_PID[52];
 8005304:	4b0d      	ldr	r3, [pc, #52]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005306:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800530a:	4b0d      	ldr	r3, [pc, #52]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800530c:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[53];
 800530e:	4b0b      	ldr	r3, [pc, #44]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005310:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8005314:	4b0a      	ldr	r3, [pc, #40]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005316:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[54];
 8005318:	4b08      	ldr	r3, [pc, #32]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 800531a:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 800531e:	4b08      	ldr	r3, [pc, #32]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 8005320:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[55];
 8005322:	4b06      	ldr	r3, [pc, #24]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005324:	f893 2037 	ldrb.w	r2, [r3, #55]	@ 0x37
 8005328:	4b05      	ldr	r3, [pc, #20]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800532a:	70da      	strb	r2, [r3, #3]
	yaw_heading.ki = converter.f;
 800532c:	4b04      	ldr	r3, [pc, #16]	@ (8005340 <PID_CONFIG_LORA+0x270>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a06      	ldr	r2, [pc, #24]	@ (800534c <PID_CONFIG_LORA+0x27c>)
 8005332:	6053      	str	r3, [r2, #4]

	converter.b[0] = rx_buffer_PID[56];
 8005334:	4b01      	ldr	r3, [pc, #4]	@ (800533c <PID_CONFIG_LORA+0x26c>)
 8005336:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 800533a:	e009      	b.n	8005350 <PID_CONFIG_LORA+0x280>
 800533c:	20000638 	.word	0x20000638
 8005340:	20000588 	.word	0x20000588
 8005344:	200002f4 	.word	0x200002f4
 8005348:	20000364 	.word	0x20000364
 800534c:	200003d4 	.word	0x200003d4
 8005350:	4b30      	ldr	r3, [pc, #192]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 8005352:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[57];
 8005354:	4b30      	ldr	r3, [pc, #192]	@ (8005418 <PID_CONFIG_LORA+0x348>)
 8005356:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800535a:	4b2e      	ldr	r3, [pc, #184]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 800535c:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[58];
 800535e:	4b2e      	ldr	r3, [pc, #184]	@ (8005418 <PID_CONFIG_LORA+0x348>)
 8005360:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8005364:	4b2b      	ldr	r3, [pc, #172]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 8005366:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[59];
 8005368:	4b2b      	ldr	r3, [pc, #172]	@ (8005418 <PID_CONFIG_LORA+0x348>)
 800536a:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800536e:	4b29      	ldr	r3, [pc, #164]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 8005370:	70da      	strb	r2, [r3, #3]
	yaw_heading.kp = converter.f;
 8005372:	4b28      	ldr	r3, [pc, #160]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a29      	ldr	r2, [pc, #164]	@ (800541c <PID_CONFIG_LORA+0x34c>)
 8005378:	6013      	str	r3, [r2, #0]

	converter.b[0] = rx_buffer_PID[60];
 800537a:	4b27      	ldr	r3, [pc, #156]	@ (8005418 <PID_CONFIG_LORA+0x348>)
 800537c:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8005380:	4b24      	ldr	r3, [pc, #144]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 8005382:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[61];
 8005384:	4b24      	ldr	r3, [pc, #144]	@ (8005418 <PID_CONFIG_LORA+0x348>)
 8005386:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 800538a:	4b22      	ldr	r3, [pc, #136]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 800538c:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[62];
 800538e:	4b22      	ldr	r3, [pc, #136]	@ (8005418 <PID_CONFIG_LORA+0x348>)
 8005390:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8005394:	4b1f      	ldr	r3, [pc, #124]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 8005396:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[63];
 8005398:	4b1f      	ldr	r3, [pc, #124]	@ (8005418 <PID_CONFIG_LORA+0x348>)
 800539a:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
 800539e:	4b1d      	ldr	r3, [pc, #116]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 80053a0:	70da      	strb	r2, [r3, #3]
	yaw_rate.kd = converter.f;
 80053a2:	4b1c      	ldr	r3, [pc, #112]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005420 <PID_CONFIG_LORA+0x350>)
 80053a8:	6093      	str	r3, [r2, #8]

	converter.b[0] = rx_buffer_PID[64];
 80053aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005418 <PID_CONFIG_LORA+0x348>)
 80053ac:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80053b0:	4b18      	ldr	r3, [pc, #96]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 80053b2:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[65];
 80053b4:	4b18      	ldr	r3, [pc, #96]	@ (8005418 <PID_CONFIG_LORA+0x348>)
 80053b6:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80053ba:	4b16      	ldr	r3, [pc, #88]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 80053bc:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[66];
 80053be:	4b16      	ldr	r3, [pc, #88]	@ (8005418 <PID_CONFIG_LORA+0x348>)
 80053c0:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80053c4:	4b13      	ldr	r3, [pc, #76]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 80053c6:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[67];
 80053c8:	4b13      	ldr	r3, [pc, #76]	@ (8005418 <PID_CONFIG_LORA+0x348>)
 80053ca:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 80053ce:	4b11      	ldr	r3, [pc, #68]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 80053d0:	70da      	strb	r2, [r3, #3]
	yaw_rate.ki = converter.f;
 80053d2:	4b10      	ldr	r3, [pc, #64]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a12      	ldr	r2, [pc, #72]	@ (8005420 <PID_CONFIG_LORA+0x350>)
 80053d8:	6053      	str	r3, [r2, #4]

	converter.b[0] = rx_buffer_PID[68];
 80053da:	4b0f      	ldr	r3, [pc, #60]	@ (8005418 <PID_CONFIG_LORA+0x348>)
 80053dc:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80053e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 80053e2:	701a      	strb	r2, [r3, #0]
	converter.b[1] = rx_buffer_PID[69];
 80053e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005418 <PID_CONFIG_LORA+0x348>)
 80053e6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80053ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 80053ec:	705a      	strb	r2, [r3, #1]
	converter.b[2] = rx_buffer_PID[70];
 80053ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005418 <PID_CONFIG_LORA+0x348>)
 80053f0:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80053f4:	4b07      	ldr	r3, [pc, #28]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 80053f6:	709a      	strb	r2, [r3, #2]
	converter.b[3] = rx_buffer_PID[71];
 80053f8:	4b07      	ldr	r3, [pc, #28]	@ (8005418 <PID_CONFIG_LORA+0x348>)
 80053fa:	f893 2047 	ldrb.w	r2, [r3, #71]	@ 0x47
 80053fe:	4b05      	ldr	r3, [pc, #20]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 8005400:	70da      	strb	r2, [r3, #3]
	yaw_rate.kp = converter.f;
 8005402:	4b04      	ldr	r3, [pc, #16]	@ (8005414 <PID_CONFIG_LORA+0x344>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a06      	ldr	r2, [pc, #24]	@ (8005420 <PID_CONFIG_LORA+0x350>)
 8005408:	6013      	str	r3, [r2, #0]


}
 800540a:	bf00      	nop
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	20000588 	.word	0x20000588
 8005418:	20000638 	.word	0x20000638
 800541c:	200003d4 	.word	0x200003d4
 8005420:	2000040c 	.word	0x2000040c

08005424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005428:	b672      	cpsid	i
}
 800542a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800542c:	bf00      	nop
 800542e:	e7fd      	b.n	800542c <Error_Handler+0x8>

08005430 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	607b      	str	r3, [r7, #4]
 800543a:	4b10      	ldr	r3, [pc, #64]	@ (800547c <HAL_MspInit+0x4c>)
 800543c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543e:	4a0f      	ldr	r2, [pc, #60]	@ (800547c <HAL_MspInit+0x4c>)
 8005440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005444:	6453      	str	r3, [r2, #68]	@ 0x44
 8005446:	4b0d      	ldr	r3, [pc, #52]	@ (800547c <HAL_MspInit+0x4c>)
 8005448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800544e:	607b      	str	r3, [r7, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005452:	2300      	movs	r3, #0
 8005454:	603b      	str	r3, [r7, #0]
 8005456:	4b09      	ldr	r3, [pc, #36]	@ (800547c <HAL_MspInit+0x4c>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545a:	4a08      	ldr	r2, [pc, #32]	@ (800547c <HAL_MspInit+0x4c>)
 800545c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005460:	6413      	str	r3, [r2, #64]	@ 0x40
 8005462:	4b06      	ldr	r3, [pc, #24]	@ (800547c <HAL_MspInit+0x4c>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40023800 	.word	0x40023800

08005480 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005490:	d116      	bne.n	80054c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	4b24      	ldr	r3, [pc, #144]	@ (8005528 <HAL_TIM_Base_MspInit+0xa8>)
 8005498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549a:	4a23      	ldr	r2, [pc, #140]	@ (8005528 <HAL_TIM_Base_MspInit+0xa8>)
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80054a2:	4b21      	ldr	r3, [pc, #132]	@ (8005528 <HAL_TIM_Base_MspInit+0xa8>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80054ae:	2200      	movs	r2, #0
 80054b0:	2100      	movs	r1, #0
 80054b2:	201c      	movs	r0, #28
 80054b4:	f000 fc1b 	bl	8005cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80054b8:	201c      	movs	r0, #28
 80054ba:	f000 fc34 	bl	8005d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80054be:	e02e      	b.n	800551e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a19      	ldr	r2, [pc, #100]	@ (800552c <HAL_TIM_Base_MspInit+0xac>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d116      	bne.n	80054f8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80054ca:	2300      	movs	r3, #0
 80054cc:	613b      	str	r3, [r7, #16]
 80054ce:	4b16      	ldr	r3, [pc, #88]	@ (8005528 <HAL_TIM_Base_MspInit+0xa8>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d2:	4a15      	ldr	r2, [pc, #84]	@ (8005528 <HAL_TIM_Base_MspInit+0xa8>)
 80054d4:	f043 0302 	orr.w	r3, r3, #2
 80054d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80054da:	4b13      	ldr	r3, [pc, #76]	@ (8005528 <HAL_TIM_Base_MspInit+0xa8>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80054e6:	2200      	movs	r2, #0
 80054e8:	2100      	movs	r1, #0
 80054ea:	201d      	movs	r0, #29
 80054ec:	f000 fbff 	bl	8005cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80054f0:	201d      	movs	r0, #29
 80054f2:	f000 fc18 	bl	8005d26 <HAL_NVIC_EnableIRQ>
}
 80054f6:	e012      	b.n	800551e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a0c      	ldr	r2, [pc, #48]	@ (8005530 <HAL_TIM_Base_MspInit+0xb0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d10d      	bne.n	800551e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	4b08      	ldr	r3, [pc, #32]	@ (8005528 <HAL_TIM_Base_MspInit+0xa8>)
 8005508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550a:	4a07      	ldr	r2, [pc, #28]	@ (8005528 <HAL_TIM_Base_MspInit+0xa8>)
 800550c:	f043 0304 	orr.w	r3, r3, #4
 8005510:	6413      	str	r3, [r2, #64]	@ 0x40
 8005512:	4b05      	ldr	r3, [pc, #20]	@ (8005528 <HAL_TIM_Base_MspInit+0xa8>)
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
}
 800551e:	bf00      	nop
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	40023800 	.word	0x40023800
 800552c:	40000400 	.word	0x40000400
 8005530:	40000800 	.word	0x40000800

08005534 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800553c:	f107 030c 	add.w	r3, r7, #12
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	605a      	str	r2, [r3, #4]
 8005546:	609a      	str	r2, [r3, #8]
 8005548:	60da      	str	r2, [r3, #12]
 800554a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a12      	ldr	r2, [pc, #72]	@ (800559c <HAL_TIM_MspPostInit+0x68>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d11e      	bne.n	8005594 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005556:	2300      	movs	r3, #0
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	4b11      	ldr	r3, [pc, #68]	@ (80055a0 <HAL_TIM_MspPostInit+0x6c>)
 800555c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800555e:	4a10      	ldr	r2, [pc, #64]	@ (80055a0 <HAL_TIM_MspPostInit+0x6c>)
 8005560:	f043 0302 	orr.w	r3, r3, #2
 8005564:	6313      	str	r3, [r2, #48]	@ 0x30
 8005566:	4b0e      	ldr	r3, [pc, #56]	@ (80055a0 <HAL_TIM_MspPostInit+0x6c>)
 8005568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	60bb      	str	r3, [r7, #8]
 8005570:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005572:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8005576:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005578:	2302      	movs	r3, #2
 800557a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005580:	2300      	movs	r3, #0
 8005582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005584:	2302      	movs	r3, #2
 8005586:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005588:	f107 030c 	add.w	r3, r7, #12
 800558c:	4619      	mov	r1, r3
 800558e:	4805      	ldr	r0, [pc, #20]	@ (80055a4 <HAL_TIM_MspPostInit+0x70>)
 8005590:	f000 fc76 	bl	8005e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005594:	bf00      	nop
 8005596:	3720      	adds	r7, #32
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40000800 	.word	0x40000800
 80055a0:	40023800 	.word	0x40023800
 80055a4:	40020400 	.word	0x40020400

080055a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08e      	sub	sp, #56	@ 0x38
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	605a      	str	r2, [r3, #4]
 80055ba:	609a      	str	r2, [r3, #8]
 80055bc:	60da      	str	r2, [r3, #12]
 80055be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a67      	ldr	r2, [pc, #412]	@ (8005764 <HAL_UART_MspInit+0x1bc>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d153      	bne.n	8005672 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80055ca:	2300      	movs	r3, #0
 80055cc:	623b      	str	r3, [r7, #32]
 80055ce:	4b66      	ldr	r3, [pc, #408]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 80055d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d2:	4a65      	ldr	r2, [pc, #404]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 80055d4:	f043 0310 	orr.w	r3, r3, #16
 80055d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80055da:	4b63      	ldr	r3, [pc, #396]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 80055dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055de:	f003 0310 	and.w	r3, r3, #16
 80055e2:	623b      	str	r3, [r7, #32]
 80055e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055e6:	2300      	movs	r3, #0
 80055e8:	61fb      	str	r3, [r7, #28]
 80055ea:	4b5f      	ldr	r3, [pc, #380]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 80055ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ee:	4a5e      	ldr	r2, [pc, #376]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 80055f0:	f043 0301 	orr.w	r3, r3, #1
 80055f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80055f6:	4b5c      	ldr	r3, [pc, #368]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 80055f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	61fb      	str	r3, [r7, #28]
 8005600:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
 8005606:	4b58      	ldr	r3, [pc, #352]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 8005608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560a:	4a57      	ldr	r2, [pc, #348]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 800560c:	f043 0302 	orr.w	r3, r3, #2
 8005610:	6313      	str	r3, [r2, #48]	@ 0x30
 8005612:	4b55      	ldr	r3, [pc, #340]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 8005614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	61bb      	str	r3, [r7, #24]
 800561c:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800561e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005622:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005624:	2302      	movs	r3, #2
 8005626:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005628:	2300      	movs	r3, #0
 800562a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800562c:	2303      	movs	r3, #3
 800562e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005630:	2307      	movs	r3, #7
 8005632:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005638:	4619      	mov	r1, r3
 800563a:	484c      	ldr	r0, [pc, #304]	@ (800576c <HAL_UART_MspInit+0x1c4>)
 800563c:	f000 fc20 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005640:	2308      	movs	r3, #8
 8005642:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005644:	2302      	movs	r3, #2
 8005646:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005648:	2300      	movs	r3, #0
 800564a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800564c:	2303      	movs	r3, #3
 800564e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005650:	2307      	movs	r3, #7
 8005652:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005658:	4619      	mov	r1, r3
 800565a:	4845      	ldr	r0, [pc, #276]	@ (8005770 <HAL_UART_MspInit+0x1c8>)
 800565c:	f000 fc10 	bl	8005e80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005660:	2200      	movs	r2, #0
 8005662:	2100      	movs	r1, #0
 8005664:	2025      	movs	r0, #37	@ 0x25
 8005666:	f000 fb42 	bl	8005cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800566a:	2025      	movs	r0, #37	@ 0x25
 800566c:	f000 fb5b 	bl	8005d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005670:	e073      	b.n	800575a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a3f      	ldr	r2, [pc, #252]	@ (8005774 <HAL_UART_MspInit+0x1cc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d134      	bne.n	80056e6 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	4b39      	ldr	r3, [pc, #228]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 8005682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005684:	4a38      	ldr	r2, [pc, #224]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 8005686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800568a:	6413      	str	r3, [r2, #64]	@ 0x40
 800568c:	4b36      	ldr	r3, [pc, #216]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 800568e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005698:	2300      	movs	r3, #0
 800569a:	613b      	str	r3, [r7, #16]
 800569c:	4b32      	ldr	r3, [pc, #200]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 800569e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a0:	4a31      	ldr	r2, [pc, #196]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 80056a2:	f043 0301 	orr.w	r3, r3, #1
 80056a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80056a8:	4b2f      	ldr	r3, [pc, #188]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 80056aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80056b4:	230c      	movs	r3, #12
 80056b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b8:	2302      	movs	r3, #2
 80056ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056c0:	2303      	movs	r3, #3
 80056c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80056c4:	2307      	movs	r3, #7
 80056c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056cc:	4619      	mov	r1, r3
 80056ce:	4827      	ldr	r0, [pc, #156]	@ (800576c <HAL_UART_MspInit+0x1c4>)
 80056d0:	f000 fbd6 	bl	8005e80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80056d4:	2200      	movs	r2, #0
 80056d6:	2100      	movs	r1, #0
 80056d8:	2026      	movs	r0, #38	@ 0x26
 80056da:	f000 fb08 	bl	8005cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80056de:	2026      	movs	r0, #38	@ 0x26
 80056e0:	f000 fb21 	bl	8005d26 <HAL_NVIC_EnableIRQ>
}
 80056e4:	e039      	b.n	800575a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART6)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a23      	ldr	r2, [pc, #140]	@ (8005778 <HAL_UART_MspInit+0x1d0>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d134      	bne.n	800575a <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80056f0:	2300      	movs	r3, #0
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 80056f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 80056fa:	f043 0320 	orr.w	r3, r3, #32
 80056fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8005700:	4b19      	ldr	r3, [pc, #100]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 8005702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800570c:	2300      	movs	r3, #0
 800570e:	60bb      	str	r3, [r7, #8]
 8005710:	4b15      	ldr	r3, [pc, #84]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 8005712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005714:	4a14      	ldr	r2, [pc, #80]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	6313      	str	r3, [r2, #48]	@ 0x30
 800571c:	4b12      	ldr	r3, [pc, #72]	@ (8005768 <HAL_UART_MspInit+0x1c0>)
 800571e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	60bb      	str	r3, [r7, #8]
 8005726:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005728:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800572c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800572e:	2302      	movs	r3, #2
 8005730:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005732:	2300      	movs	r3, #0
 8005734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005736:	2303      	movs	r3, #3
 8005738:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800573a:	2308      	movs	r3, #8
 800573c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800573e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005742:	4619      	mov	r1, r3
 8005744:	4809      	ldr	r0, [pc, #36]	@ (800576c <HAL_UART_MspInit+0x1c4>)
 8005746:	f000 fb9b 	bl	8005e80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800574a:	2200      	movs	r2, #0
 800574c:	2100      	movs	r1, #0
 800574e:	2047      	movs	r0, #71	@ 0x47
 8005750:	f000 facd 	bl	8005cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005754:	2047      	movs	r0, #71	@ 0x47
 8005756:	f000 fae6 	bl	8005d26 <HAL_NVIC_EnableIRQ>
}
 800575a:	bf00      	nop
 800575c:	3738      	adds	r7, #56	@ 0x38
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	40011000 	.word	0x40011000
 8005768:	40023800 	.word	0x40023800
 800576c:	40020000 	.word	0x40020000
 8005770:	40020400 	.word	0x40020400
 8005774:	40004400 	.word	0x40004400
 8005778:	40011400 	.word	0x40011400

0800577c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005780:	bf00      	nop
 8005782:	e7fd      	b.n	8005780 <NMI_Handler+0x4>

08005784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005788:	bf00      	nop
 800578a:	e7fd      	b.n	8005788 <HardFault_Handler+0x4>

0800578c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005790:	bf00      	nop
 8005792:	e7fd      	b.n	8005790 <MemManage_Handler+0x4>

08005794 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005798:	bf00      	nop
 800579a:	e7fd      	b.n	8005798 <BusFault_Handler+0x4>

0800579c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057a0:	bf00      	nop
 80057a2:	e7fd      	b.n	80057a0 <UsageFault_Handler+0x4>

080057a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057a8:	bf00      	nop
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057b2:	b480      	push	{r7}
 80057b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057b6:	bf00      	nop
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057c4:	bf00      	nop
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057d2:	f000 f96d 	bl	8005ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057d6:	bf00      	nop
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80057e0:	4802      	ldr	r0, [pc, #8]	@ (80057ec <TIM2_IRQHandler+0x10>)
 80057e2:	f001 fb59 	bl	8006e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80057e6:	bf00      	nop
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	200006c8 	.word	0x200006c8

080057f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80057f4:	4802      	ldr	r0, [pc, #8]	@ (8005800 <TIM3_IRQHandler+0x10>)
 80057f6:	f001 fb4f 	bl	8006e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80057fa:	bf00      	nop
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20000710 	.word	0x20000710

08005804 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005808:	4802      	ldr	r0, [pc, #8]	@ (8005814 <USART1_IRQHandler+0x10>)
 800580a:	f002 fa0f 	bl	8007c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800580e:	bf00      	nop
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	200007a0 	.word	0x200007a0

08005818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800581c:	4802      	ldr	r0, [pc, #8]	@ (8005828 <USART2_IRQHandler+0x10>)
 800581e:	f002 fa05 	bl	8007c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005822:	bf00      	nop
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	200007e4 	.word	0x200007e4

0800582c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005830:	4802      	ldr	r0, [pc, #8]	@ (800583c <USART6_IRQHandler+0x10>)
 8005832:	f002 f9fb 	bl	8007c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005836:	bf00      	nop
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20000828 	.word	0x20000828

08005840 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  return 1;
 8005844:	2301      	movs	r3, #1
}
 8005846:	4618      	mov	r0, r3
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <_kill>:

int _kill(int pid, int sig)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800585a:	f004 fb3f 	bl	8009edc <__errno>
 800585e:	4603      	mov	r3, r0
 8005860:	2216      	movs	r2, #22
 8005862:	601a      	str	r2, [r3, #0]
  return -1;
 8005864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <_exit>:

void _exit (int status)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005878:	f04f 31ff 	mov.w	r1, #4294967295
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7ff ffe7 	bl	8005850 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005882:	bf00      	nop
 8005884:	e7fd      	b.n	8005882 <_exit+0x12>

08005886 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b086      	sub	sp, #24
 800588a:	af00      	add	r7, sp, #0
 800588c:	60f8      	str	r0, [r7, #12]
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005892:	2300      	movs	r3, #0
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	e00a      	b.n	80058ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005898:	f3af 8000 	nop.w
 800589c:	4601      	mov	r1, r0
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	60ba      	str	r2, [r7, #8]
 80058a4:	b2ca      	uxtb	r2, r1
 80058a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	3301      	adds	r3, #1
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	dbf0      	blt.n	8005898 <_read+0x12>
  }

  return len;
 80058b6:	687b      	ldr	r3, [r7, #4]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80058e8:	605a      	str	r2, [r3, #4]
  return 0;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <_isatty>:

int _isatty(int file)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005900:	2301      	movs	r3, #1
}
 8005902:	4618      	mov	r0, r3
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800590e:	b480      	push	{r7}
 8005910:	b085      	sub	sp, #20
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005930:	4a14      	ldr	r2, [pc, #80]	@ (8005984 <_sbrk+0x5c>)
 8005932:	4b15      	ldr	r3, [pc, #84]	@ (8005988 <_sbrk+0x60>)
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800593c:	4b13      	ldr	r3, [pc, #76]	@ (800598c <_sbrk+0x64>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d102      	bne.n	800594a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005944:	4b11      	ldr	r3, [pc, #68]	@ (800598c <_sbrk+0x64>)
 8005946:	4a12      	ldr	r2, [pc, #72]	@ (8005990 <_sbrk+0x68>)
 8005948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800594a:	4b10      	ldr	r3, [pc, #64]	@ (800598c <_sbrk+0x64>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4413      	add	r3, r2
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	429a      	cmp	r2, r3
 8005956:	d207      	bcs.n	8005968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005958:	f004 fac0 	bl	8009edc <__errno>
 800595c:	4603      	mov	r3, r0
 800595e:	220c      	movs	r2, #12
 8005960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005962:	f04f 33ff 	mov.w	r3, #4294967295
 8005966:	e009      	b.n	800597c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005968:	4b08      	ldr	r3, [pc, #32]	@ (800598c <_sbrk+0x64>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800596e:	4b07      	ldr	r3, [pc, #28]	@ (800598c <_sbrk+0x64>)
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4413      	add	r3, r2
 8005976:	4a05      	ldr	r2, [pc, #20]	@ (800598c <_sbrk+0x64>)
 8005978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800597a:	68fb      	ldr	r3, [r7, #12]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	20020000 	.word	0x20020000
 8005988:	00000400 	.word	0x00000400
 800598c:	2000086c 	.word	0x2000086c
 8005990:	200009c0 	.word	0x200009c0

08005994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005998:	4b06      	ldr	r3, [pc, #24]	@ (80059b4 <SystemInit+0x20>)
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800599e:	4a05      	ldr	r2, [pc, #20]	@ (80059b4 <SystemInit+0x20>)
 80059a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059a8:	bf00      	nop
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	e000ed00 	.word	0xe000ed00

080059b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80059b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80059f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80059bc:	480d      	ldr	r0, [pc, #52]	@ (80059f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80059be:	490e      	ldr	r1, [pc, #56]	@ (80059f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80059c0:	4a0e      	ldr	r2, [pc, #56]	@ (80059fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80059c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059c4:	e002      	b.n	80059cc <LoopCopyDataInit>

080059c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059ca:	3304      	adds	r3, #4

080059cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059d0:	d3f9      	bcc.n	80059c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059d2:	4a0b      	ldr	r2, [pc, #44]	@ (8005a00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80059d4:	4c0b      	ldr	r4, [pc, #44]	@ (8005a04 <LoopFillZerobss+0x26>)
  movs r3, #0
 80059d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059d8:	e001      	b.n	80059de <LoopFillZerobss>

080059da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059dc:	3204      	adds	r2, #4

080059de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059e0:	d3fb      	bcc.n	80059da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80059e2:	f7ff ffd7 	bl	8005994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80059e6:	f004 fa7f 	bl	8009ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80059ea:	f7fd ff51 	bl	8003890 <main>
  bx  lr    
 80059ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80059f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80059f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059f8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80059fc:	0800dbf8 	.word	0x0800dbf8
  ldr r2, =_sbss
 8005a00:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8005a04:	200009c0 	.word	0x200009c0

08005a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a08:	e7fe      	b.n	8005a08 <ADC_IRQHandler>
	...

08005a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005a10:	4b0e      	ldr	r3, [pc, #56]	@ (8005a4c <HAL_Init+0x40>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a0d      	ldr	r2, [pc, #52]	@ (8005a4c <HAL_Init+0x40>)
 8005a16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a4c <HAL_Init+0x40>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a0a      	ldr	r2, [pc, #40]	@ (8005a4c <HAL_Init+0x40>)
 8005a22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a28:	4b08      	ldr	r3, [pc, #32]	@ (8005a4c <HAL_Init+0x40>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a07      	ldr	r2, [pc, #28]	@ (8005a4c <HAL_Init+0x40>)
 8005a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a34:	2003      	movs	r0, #3
 8005a36:	f000 f94f 	bl	8005cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a3a:	200f      	movs	r0, #15
 8005a3c:	f000 f808 	bl	8005a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a40:	f7ff fcf6 	bl	8005430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40023c00 	.word	0x40023c00

08005a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005a58:	4b12      	ldr	r3, [pc, #72]	@ (8005aa4 <HAL_InitTick+0x54>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	4b12      	ldr	r3, [pc, #72]	@ (8005aa8 <HAL_InitTick+0x58>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	4619      	mov	r1, r3
 8005a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 f967 	bl	8005d42 <HAL_SYSTICK_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e00e      	b.n	8005a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b0f      	cmp	r3, #15
 8005a82:	d80a      	bhi.n	8005a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a84:	2200      	movs	r2, #0
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8c:	f000 f92f 	bl	8005cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005a90:	4a06      	ldr	r2, [pc, #24]	@ (8005aac <HAL_InitTick+0x5c>)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	e000      	b.n	8005a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20000004 	.word	0x20000004
 8005aa8:	2000000c 	.word	0x2000000c
 8005aac:	20000008 	.word	0x20000008

08005ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ab4:	4b06      	ldr	r3, [pc, #24]	@ (8005ad0 <HAL_IncTick+0x20>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	4b06      	ldr	r3, [pc, #24]	@ (8005ad4 <HAL_IncTick+0x24>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4413      	add	r3, r2
 8005ac0:	4a04      	ldr	r2, [pc, #16]	@ (8005ad4 <HAL_IncTick+0x24>)
 8005ac2:	6013      	str	r3, [r2, #0]
}
 8005ac4:	bf00      	nop
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	2000000c 	.word	0x2000000c
 8005ad4:	20000870 	.word	0x20000870

08005ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  return uwTick;
 8005adc:	4b03      	ldr	r3, [pc, #12]	@ (8005aec <HAL_GetTick+0x14>)
 8005ade:	681b      	ldr	r3, [r3, #0]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	20000870 	.word	0x20000870

08005af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005af8:	f7ff ffee 	bl	8005ad8 <HAL_GetTick>
 8005afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b08:	d005      	beq.n	8005b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b34 <HAL_Delay+0x44>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005b16:	bf00      	nop
 8005b18:	f7ff ffde 	bl	8005ad8 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d8f7      	bhi.n	8005b18 <HAL_Delay+0x28>
  {
  }
}
 8005b28:	bf00      	nop
 8005b2a:	bf00      	nop
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	2000000c 	.word	0x2000000c

08005b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b48:	4b0c      	ldr	r3, [pc, #48]	@ (8005b7c <__NVIC_SetPriorityGrouping+0x44>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005b54:	4013      	ands	r3, r2
 8005b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b6a:	4a04      	ldr	r2, [pc, #16]	@ (8005b7c <__NVIC_SetPriorityGrouping+0x44>)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	60d3      	str	r3, [r2, #12]
}
 8005b70:	bf00      	nop
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	e000ed00 	.word	0xe000ed00

08005b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b84:	4b04      	ldr	r3, [pc, #16]	@ (8005b98 <__NVIC_GetPriorityGrouping+0x18>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	0a1b      	lsrs	r3, r3, #8
 8005b8a:	f003 0307 	and.w	r3, r3, #7
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	e000ed00 	.word	0xe000ed00

08005b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	db0b      	blt.n	8005bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	f003 021f 	and.w	r2, r3, #31
 8005bb4:	4907      	ldr	r1, [pc, #28]	@ (8005bd4 <__NVIC_EnableIRQ+0x38>)
 8005bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	2001      	movs	r0, #1
 8005bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8005bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	e000e100 	.word	0xe000e100

08005bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	4603      	mov	r3, r0
 8005be0:	6039      	str	r1, [r7, #0]
 8005be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	db0a      	blt.n	8005c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	490c      	ldr	r1, [pc, #48]	@ (8005c24 <__NVIC_SetPriority+0x4c>)
 8005bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf6:	0112      	lsls	r2, r2, #4
 8005bf8:	b2d2      	uxtb	r2, r2
 8005bfa:	440b      	add	r3, r1
 8005bfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c00:	e00a      	b.n	8005c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	4908      	ldr	r1, [pc, #32]	@ (8005c28 <__NVIC_SetPriority+0x50>)
 8005c08:	79fb      	ldrb	r3, [r7, #7]
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	3b04      	subs	r3, #4
 8005c10:	0112      	lsls	r2, r2, #4
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	440b      	add	r3, r1
 8005c16:	761a      	strb	r2, [r3, #24]
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	e000e100 	.word	0xe000e100
 8005c28:	e000ed00 	.word	0xe000ed00

08005c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b089      	sub	sp, #36	@ 0x24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f1c3 0307 	rsb	r3, r3, #7
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	bf28      	it	cs
 8005c4a:	2304      	movcs	r3, #4
 8005c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	3304      	adds	r3, #4
 8005c52:	2b06      	cmp	r3, #6
 8005c54:	d902      	bls.n	8005c5c <NVIC_EncodePriority+0x30>
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	3b03      	subs	r3, #3
 8005c5a:	e000      	b.n	8005c5e <NVIC_EncodePriority+0x32>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c60:	f04f 32ff 	mov.w	r2, #4294967295
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	43da      	mvns	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	401a      	ands	r2, r3
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c74:	f04f 31ff 	mov.w	r1, #4294967295
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7e:	43d9      	mvns	r1, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c84:	4313      	orrs	r3, r2
         );
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3724      	adds	r7, #36	@ 0x24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
	...

08005c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ca4:	d301      	bcc.n	8005caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e00f      	b.n	8005cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005caa:	4a0a      	ldr	r2, [pc, #40]	@ (8005cd4 <SysTick_Config+0x40>)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cb2:	210f      	movs	r1, #15
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb8:	f7ff ff8e 	bl	8005bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005cbc:	4b05      	ldr	r3, [pc, #20]	@ (8005cd4 <SysTick_Config+0x40>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cc2:	4b04      	ldr	r3, [pc, #16]	@ (8005cd4 <SysTick_Config+0x40>)
 8005cc4:	2207      	movs	r2, #7
 8005cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	e000e010 	.word	0xe000e010

08005cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff ff29 	bl	8005b38 <__NVIC_SetPriorityGrouping>
}
 8005ce6:	bf00      	nop
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b086      	sub	sp, #24
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	607a      	str	r2, [r7, #4]
 8005cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d00:	f7ff ff3e 	bl	8005b80 <__NVIC_GetPriorityGrouping>
 8005d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	6978      	ldr	r0, [r7, #20]
 8005d0c:	f7ff ff8e 	bl	8005c2c <NVIC_EncodePriority>
 8005d10:	4602      	mov	r2, r0
 8005d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d16:	4611      	mov	r1, r2
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff ff5d 	bl	8005bd8 <__NVIC_SetPriority>
}
 8005d1e:	bf00      	nop
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff ff31 	bl	8005b9c <__NVIC_EnableIRQ>
}
 8005d3a:	bf00      	nop
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff ffa2 	bl	8005c94 <SysTick_Config>
 8005d50:	4603      	mov	r3, r0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d68:	f7ff feb6 	bl	8005ad8 <HAL_GetTick>
 8005d6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d008      	beq.n	8005d8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2280      	movs	r2, #128	@ 0x80
 8005d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e052      	b.n	8005e32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0216 	bic.w	r2, r2, #22
 8005d9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695a      	ldr	r2, [r3, #20]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005daa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d103      	bne.n	8005dbc <HAL_DMA_Abort+0x62>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d007      	beq.n	8005dcc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0208 	bic.w	r2, r2, #8
 8005dca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0201 	bic.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ddc:	e013      	b.n	8005e06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dde:	f7ff fe7b 	bl	8005ad8 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b05      	cmp	r3, #5
 8005dea:	d90c      	bls.n	8005e06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2220      	movs	r2, #32
 8005df0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2203      	movs	r2, #3
 8005df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e015      	b.n	8005e32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e4      	bne.n	8005dde <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e18:	223f      	movs	r2, #63	@ 0x3f
 8005e1a:	409a      	lsls	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d004      	beq.n	8005e58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2280      	movs	r2, #128	@ 0x80
 8005e52:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e00c      	b.n	8005e72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2205      	movs	r2, #5
 8005e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0201 	bic.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
	...

08005e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b089      	sub	sp, #36	@ 0x24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e96:	2300      	movs	r3, #0
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	e159      	b.n	8006150 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4013      	ands	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	f040 8148 	bne.w	800614a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d005      	beq.n	8005ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d130      	bne.n	8005f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	2203      	movs	r2, #3
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	43db      	mvns	r3, r3
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f08:	2201      	movs	r2, #1
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f10:	43db      	mvns	r3, r3
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	4013      	ands	r3, r2
 8005f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	091b      	lsrs	r3, r3, #4
 8005f1e:	f003 0201 	and.w	r2, r3, #1
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f003 0303 	and.w	r3, r3, #3
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d017      	beq.n	8005f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	2203      	movs	r2, #3
 8005f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f50:	43db      	mvns	r3, r3
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	4013      	ands	r3, r2
 8005f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	fa02 f303 	lsl.w	r3, r2, r3
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f003 0303 	and.w	r3, r3, #3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d123      	bne.n	8005fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	08da      	lsrs	r2, r3, #3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3208      	adds	r2, #8
 8005f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	220f      	movs	r2, #15
 8005f94:	fa02 f303 	lsl.w	r3, r2, r3
 8005f98:	43db      	mvns	r3, r3
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	08da      	lsrs	r2, r3, #3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3208      	adds	r2, #8
 8005fbe:	69b9      	ldr	r1, [r7, #24]
 8005fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	2203      	movs	r2, #3
 8005fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f003 0203 	and.w	r2, r3, #3
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 80a2 	beq.w	800614a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	4b57      	ldr	r3, [pc, #348]	@ (8006168 <HAL_GPIO_Init+0x2e8>)
 800600c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800600e:	4a56      	ldr	r2, [pc, #344]	@ (8006168 <HAL_GPIO_Init+0x2e8>)
 8006010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006014:	6453      	str	r3, [r2, #68]	@ 0x44
 8006016:	4b54      	ldr	r3, [pc, #336]	@ (8006168 <HAL_GPIO_Init+0x2e8>)
 8006018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006022:	4a52      	ldr	r2, [pc, #328]	@ (800616c <HAL_GPIO_Init+0x2ec>)
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	089b      	lsrs	r3, r3, #2
 8006028:	3302      	adds	r3, #2
 800602a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800602e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	220f      	movs	r2, #15
 800603a:	fa02 f303 	lsl.w	r3, r2, r3
 800603e:	43db      	mvns	r3, r3
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	4013      	ands	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a49      	ldr	r2, [pc, #292]	@ (8006170 <HAL_GPIO_Init+0x2f0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d019      	beq.n	8006082 <HAL_GPIO_Init+0x202>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a48      	ldr	r2, [pc, #288]	@ (8006174 <HAL_GPIO_Init+0x2f4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d013      	beq.n	800607e <HAL_GPIO_Init+0x1fe>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a47      	ldr	r2, [pc, #284]	@ (8006178 <HAL_GPIO_Init+0x2f8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00d      	beq.n	800607a <HAL_GPIO_Init+0x1fa>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a46      	ldr	r2, [pc, #280]	@ (800617c <HAL_GPIO_Init+0x2fc>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d007      	beq.n	8006076 <HAL_GPIO_Init+0x1f6>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a45      	ldr	r2, [pc, #276]	@ (8006180 <HAL_GPIO_Init+0x300>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d101      	bne.n	8006072 <HAL_GPIO_Init+0x1f2>
 800606e:	2304      	movs	r3, #4
 8006070:	e008      	b.n	8006084 <HAL_GPIO_Init+0x204>
 8006072:	2307      	movs	r3, #7
 8006074:	e006      	b.n	8006084 <HAL_GPIO_Init+0x204>
 8006076:	2303      	movs	r3, #3
 8006078:	e004      	b.n	8006084 <HAL_GPIO_Init+0x204>
 800607a:	2302      	movs	r3, #2
 800607c:	e002      	b.n	8006084 <HAL_GPIO_Init+0x204>
 800607e:	2301      	movs	r3, #1
 8006080:	e000      	b.n	8006084 <HAL_GPIO_Init+0x204>
 8006082:	2300      	movs	r3, #0
 8006084:	69fa      	ldr	r2, [r7, #28]
 8006086:	f002 0203 	and.w	r2, r2, #3
 800608a:	0092      	lsls	r2, r2, #2
 800608c:	4093      	lsls	r3, r2
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	4313      	orrs	r3, r2
 8006092:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006094:	4935      	ldr	r1, [pc, #212]	@ (800616c <HAL_GPIO_Init+0x2ec>)
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	089b      	lsrs	r3, r3, #2
 800609a:	3302      	adds	r3, #2
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060a2:	4b38      	ldr	r3, [pc, #224]	@ (8006184 <HAL_GPIO_Init+0x304>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	43db      	mvns	r3, r3
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	4013      	ands	r3, r2
 80060b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060c6:	4a2f      	ldr	r2, [pc, #188]	@ (8006184 <HAL_GPIO_Init+0x304>)
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006184 <HAL_GPIO_Init+0x304>)
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	43db      	mvns	r3, r3
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	4013      	ands	r3, r2
 80060da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80060f0:	4a24      	ldr	r2, [pc, #144]	@ (8006184 <HAL_GPIO_Init+0x304>)
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80060f6:	4b23      	ldr	r3, [pc, #140]	@ (8006184 <HAL_GPIO_Init+0x304>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	43db      	mvns	r3, r3
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	4013      	ands	r3, r2
 8006104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800611a:	4a1a      	ldr	r2, [pc, #104]	@ (8006184 <HAL_GPIO_Init+0x304>)
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006120:	4b18      	ldr	r3, [pc, #96]	@ (8006184 <HAL_GPIO_Init+0x304>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	43db      	mvns	r3, r3
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	4013      	ands	r3, r2
 800612e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006144:	4a0f      	ldr	r2, [pc, #60]	@ (8006184 <HAL_GPIO_Init+0x304>)
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	3301      	adds	r3, #1
 800614e:	61fb      	str	r3, [r7, #28]
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	2b0f      	cmp	r3, #15
 8006154:	f67f aea2 	bls.w	8005e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006158:	bf00      	nop
 800615a:	bf00      	nop
 800615c:	3724      	adds	r7, #36	@ 0x24
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40023800 	.word	0x40023800
 800616c:	40013800 	.word	0x40013800
 8006170:	40020000 	.word	0x40020000
 8006174:	40020400 	.word	0x40020400
 8006178:	40020800 	.word	0x40020800
 800617c:	40020c00 	.word	0x40020c00
 8006180:	40021000 	.word	0x40021000
 8006184:	40013c00 	.word	0x40013c00

08006188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	807b      	strh	r3, [r7, #2]
 8006194:	4613      	mov	r3, r2
 8006196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006198:	787b      	ldrb	r3, [r7, #1]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800619e:	887a      	ldrh	r2, [r7, #2]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061a4:	e003      	b.n	80061ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061a6:	887b      	ldrh	r3, [r7, #2]
 80061a8:	041a      	lsls	r2, r3, #16
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	619a      	str	r2, [r3, #24]
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80061cc:	887a      	ldrh	r2, [r7, #2]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4013      	ands	r3, r2
 80061d2:	041a      	lsls	r2, r3, #16
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	43d9      	mvns	r1, r3
 80061d8:	887b      	ldrh	r3, [r7, #2]
 80061da:	400b      	ands	r3, r1
 80061dc:	431a      	orrs	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	619a      	str	r2, [r3, #24]
}
 80061e2:	bf00      	nop
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
	...

080061f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e267      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d075      	beq.n	80062fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800620e:	4b88      	ldr	r3, [pc, #544]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 030c 	and.w	r3, r3, #12
 8006216:	2b04      	cmp	r3, #4
 8006218:	d00c      	beq.n	8006234 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800621a:	4b85      	ldr	r3, [pc, #532]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006222:	2b08      	cmp	r3, #8
 8006224:	d112      	bne.n	800624c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006226:	4b82      	ldr	r3, [pc, #520]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800622e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006232:	d10b      	bne.n	800624c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006234:	4b7e      	ldr	r3, [pc, #504]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d05b      	beq.n	80062f8 <HAL_RCC_OscConfig+0x108>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d157      	bne.n	80062f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e242      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006254:	d106      	bne.n	8006264 <HAL_RCC_OscConfig+0x74>
 8006256:	4b76      	ldr	r3, [pc, #472]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a75      	ldr	r2, [pc, #468]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800625c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	e01d      	b.n	80062a0 <HAL_RCC_OscConfig+0xb0>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800626c:	d10c      	bne.n	8006288 <HAL_RCC_OscConfig+0x98>
 800626e:	4b70      	ldr	r3, [pc, #448]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a6f      	ldr	r2, [pc, #444]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	4b6d      	ldr	r3, [pc, #436]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a6c      	ldr	r2, [pc, #432]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	e00b      	b.n	80062a0 <HAL_RCC_OscConfig+0xb0>
 8006288:	4b69      	ldr	r3, [pc, #420]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a68      	ldr	r2, [pc, #416]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800628e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	4b66      	ldr	r3, [pc, #408]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a65      	ldr	r2, [pc, #404]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800629a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800629e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d013      	beq.n	80062d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a8:	f7ff fc16 	bl	8005ad8 <HAL_GetTick>
 80062ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062b0:	f7ff fc12 	bl	8005ad8 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b64      	cmp	r3, #100	@ 0x64
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e207      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c2:	4b5b      	ldr	r3, [pc, #364]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0f0      	beq.n	80062b0 <HAL_RCC_OscConfig+0xc0>
 80062ce:	e014      	b.n	80062fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d0:	f7ff fc02 	bl	8005ad8 <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062d8:	f7ff fbfe 	bl	8005ad8 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b64      	cmp	r3, #100	@ 0x64
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e1f3      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ea:	4b51      	ldr	r3, [pc, #324]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1f0      	bne.n	80062d8 <HAL_RCC_OscConfig+0xe8>
 80062f6:	e000      	b.n	80062fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d063      	beq.n	80063ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006306:	4b4a      	ldr	r3, [pc, #296]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 030c 	and.w	r3, r3, #12
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00b      	beq.n	800632a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006312:	4b47      	ldr	r3, [pc, #284]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800631a:	2b08      	cmp	r3, #8
 800631c:	d11c      	bne.n	8006358 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800631e:	4b44      	ldr	r3, [pc, #272]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d116      	bne.n	8006358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800632a:	4b41      	ldr	r3, [pc, #260]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <HAL_RCC_OscConfig+0x152>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d001      	beq.n	8006342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e1c7      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006342:	4b3b      	ldr	r3, [pc, #236]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	4937      	ldr	r1, [pc, #220]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006352:	4313      	orrs	r3, r2
 8006354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006356:	e03a      	b.n	80063ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d020      	beq.n	80063a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006360:	4b34      	ldr	r3, [pc, #208]	@ (8006434 <HAL_RCC_OscConfig+0x244>)
 8006362:	2201      	movs	r2, #1
 8006364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006366:	f7ff fbb7 	bl	8005ad8 <HAL_GetTick>
 800636a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800636c:	e008      	b.n	8006380 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800636e:	f7ff fbb3 	bl	8005ad8 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	2b02      	cmp	r3, #2
 800637a:	d901      	bls.n	8006380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e1a8      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006380:	4b2b      	ldr	r3, [pc, #172]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0f0      	beq.n	800636e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800638c:	4b28      	ldr	r3, [pc, #160]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	4925      	ldr	r1, [pc, #148]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 800639c:	4313      	orrs	r3, r2
 800639e:	600b      	str	r3, [r1, #0]
 80063a0:	e015      	b.n	80063ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063a2:	4b24      	ldr	r3, [pc, #144]	@ (8006434 <HAL_RCC_OscConfig+0x244>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a8:	f7ff fb96 	bl	8005ad8 <HAL_GetTick>
 80063ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063b0:	f7ff fb92 	bl	8005ad8 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e187      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1f0      	bne.n	80063b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d036      	beq.n	8006448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d016      	beq.n	8006410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063e2:	4b15      	ldr	r3, [pc, #84]	@ (8006438 <HAL_RCC_OscConfig+0x248>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e8:	f7ff fb76 	bl	8005ad8 <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063f0:	f7ff fb72 	bl	8005ad8 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e167      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006402:	4b0b      	ldr	r3, [pc, #44]	@ (8006430 <HAL_RCC_OscConfig+0x240>)
 8006404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0f0      	beq.n	80063f0 <HAL_RCC_OscConfig+0x200>
 800640e:	e01b      	b.n	8006448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006410:	4b09      	ldr	r3, [pc, #36]	@ (8006438 <HAL_RCC_OscConfig+0x248>)
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006416:	f7ff fb5f 	bl	8005ad8 <HAL_GetTick>
 800641a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800641c:	e00e      	b.n	800643c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800641e:	f7ff fb5b 	bl	8005ad8 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d907      	bls.n	800643c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e150      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
 8006430:	40023800 	.word	0x40023800
 8006434:	42470000 	.word	0x42470000
 8006438:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800643c:	4b88      	ldr	r3, [pc, #544]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800643e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1ea      	bne.n	800641e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8097 	beq.w	8006584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006456:	2300      	movs	r3, #0
 8006458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800645a:	4b81      	ldr	r3, [pc, #516]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800645c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10f      	bne.n	8006486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006466:	2300      	movs	r3, #0
 8006468:	60bb      	str	r3, [r7, #8]
 800646a:	4b7d      	ldr	r3, [pc, #500]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800646c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646e:	4a7c      	ldr	r2, [pc, #496]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 8006470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006474:	6413      	str	r3, [r2, #64]	@ 0x40
 8006476:	4b7a      	ldr	r3, [pc, #488]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800647e:	60bb      	str	r3, [r7, #8]
 8006480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006482:	2301      	movs	r3, #1
 8006484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006486:	4b77      	ldr	r3, [pc, #476]	@ (8006664 <HAL_RCC_OscConfig+0x474>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800648e:	2b00      	cmp	r3, #0
 8006490:	d118      	bne.n	80064c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006492:	4b74      	ldr	r3, [pc, #464]	@ (8006664 <HAL_RCC_OscConfig+0x474>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a73      	ldr	r2, [pc, #460]	@ (8006664 <HAL_RCC_OscConfig+0x474>)
 8006498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800649c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800649e:	f7ff fb1b 	bl	8005ad8 <HAL_GetTick>
 80064a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064a4:	e008      	b.n	80064b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064a6:	f7ff fb17 	bl	8005ad8 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d901      	bls.n	80064b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e10c      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b8:	4b6a      	ldr	r3, [pc, #424]	@ (8006664 <HAL_RCC_OscConfig+0x474>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0f0      	beq.n	80064a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d106      	bne.n	80064da <HAL_RCC_OscConfig+0x2ea>
 80064cc:	4b64      	ldr	r3, [pc, #400]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80064ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d0:	4a63      	ldr	r2, [pc, #396]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80064d8:	e01c      	b.n	8006514 <HAL_RCC_OscConfig+0x324>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	2b05      	cmp	r3, #5
 80064e0:	d10c      	bne.n	80064fc <HAL_RCC_OscConfig+0x30c>
 80064e2:	4b5f      	ldr	r3, [pc, #380]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80064e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e6:	4a5e      	ldr	r2, [pc, #376]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80064e8:	f043 0304 	orr.w	r3, r3, #4
 80064ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80064ee:	4b5c      	ldr	r3, [pc, #368]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80064f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f2:	4a5b      	ldr	r2, [pc, #364]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80064f4:	f043 0301 	orr.w	r3, r3, #1
 80064f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80064fa:	e00b      	b.n	8006514 <HAL_RCC_OscConfig+0x324>
 80064fc:	4b58      	ldr	r3, [pc, #352]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80064fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006500:	4a57      	ldr	r2, [pc, #348]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 8006502:	f023 0301 	bic.w	r3, r3, #1
 8006506:	6713      	str	r3, [r2, #112]	@ 0x70
 8006508:	4b55      	ldr	r3, [pc, #340]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800650a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650c:	4a54      	ldr	r2, [pc, #336]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800650e:	f023 0304 	bic.w	r3, r3, #4
 8006512:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d015      	beq.n	8006548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800651c:	f7ff fadc 	bl	8005ad8 <HAL_GetTick>
 8006520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006522:	e00a      	b.n	800653a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006524:	f7ff fad8 	bl	8005ad8 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006532:	4293      	cmp	r3, r2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e0cb      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800653a:	4b49      	ldr	r3, [pc, #292]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800653c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0ee      	beq.n	8006524 <HAL_RCC_OscConfig+0x334>
 8006546:	e014      	b.n	8006572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006548:	f7ff fac6 	bl	8005ad8 <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800654e:	e00a      	b.n	8006566 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006550:	f7ff fac2 	bl	8005ad8 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800655e:	4293      	cmp	r3, r2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e0b5      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006566:	4b3e      	ldr	r3, [pc, #248]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 8006568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1ee      	bne.n	8006550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006572:	7dfb      	ldrb	r3, [r7, #23]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d105      	bne.n	8006584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006578:	4b39      	ldr	r3, [pc, #228]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800657a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657c:	4a38      	ldr	r2, [pc, #224]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800657e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006582:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 80a1 	beq.w	80066d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800658e:	4b34      	ldr	r3, [pc, #208]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f003 030c 	and.w	r3, r3, #12
 8006596:	2b08      	cmp	r3, #8
 8006598:	d05c      	beq.n	8006654 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d141      	bne.n	8006626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065a2:	4b31      	ldr	r3, [pc, #196]	@ (8006668 <HAL_RCC_OscConfig+0x478>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a8:	f7ff fa96 	bl	8005ad8 <HAL_GetTick>
 80065ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065b0:	f7ff fa92 	bl	8005ad8 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e087      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065c2:	4b27      	ldr	r3, [pc, #156]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1f0      	bne.n	80065b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69da      	ldr	r2, [r3, #28]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065dc:	019b      	lsls	r3, r3, #6
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e4:	085b      	lsrs	r3, r3, #1
 80065e6:	3b01      	subs	r3, #1
 80065e8:	041b      	lsls	r3, r3, #16
 80065ea:	431a      	orrs	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f0:	061b      	lsls	r3, r3, #24
 80065f2:	491b      	ldr	r1, [pc, #108]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006668 <HAL_RCC_OscConfig+0x478>)
 80065fa:	2201      	movs	r2, #1
 80065fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065fe:	f7ff fa6b 	bl	8005ad8 <HAL_GetTick>
 8006602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006606:	f7ff fa67 	bl	8005ad8 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e05c      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006618:	4b11      	ldr	r3, [pc, #68]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0f0      	beq.n	8006606 <HAL_RCC_OscConfig+0x416>
 8006624:	e054      	b.n	80066d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006626:	4b10      	ldr	r3, [pc, #64]	@ (8006668 <HAL_RCC_OscConfig+0x478>)
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800662c:	f7ff fa54 	bl	8005ad8 <HAL_GetTick>
 8006630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006632:	e008      	b.n	8006646 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006634:	f7ff fa50 	bl	8005ad8 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e045      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006646:	4b06      	ldr	r3, [pc, #24]	@ (8006660 <HAL_RCC_OscConfig+0x470>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1f0      	bne.n	8006634 <HAL_RCC_OscConfig+0x444>
 8006652:	e03d      	b.n	80066d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d107      	bne.n	800666c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e038      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
 8006660:	40023800 	.word	0x40023800
 8006664:	40007000 	.word	0x40007000
 8006668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800666c:	4b1b      	ldr	r3, [pc, #108]	@ (80066dc <HAL_RCC_OscConfig+0x4ec>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d028      	beq.n	80066cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006684:	429a      	cmp	r2, r3
 8006686:	d121      	bne.n	80066cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006692:	429a      	cmp	r2, r3
 8006694:	d11a      	bne.n	80066cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800669c:	4013      	ands	r3, r2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d111      	bne.n	80066cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	3b01      	subs	r3, #1
 80066b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d107      	bne.n	80066cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d001      	beq.n	80066d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e000      	b.n	80066d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3718      	adds	r7, #24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40023800 	.word	0x40023800

080066e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e0cc      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066f4:	4b68      	ldr	r3, [pc, #416]	@ (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d90c      	bls.n	800671c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006702:	4b65      	ldr	r3, [pc, #404]	@ (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800670a:	4b63      	ldr	r3, [pc, #396]	@ (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d001      	beq.n	800671c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e0b8      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d020      	beq.n	800676a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006734:	4b59      	ldr	r3, [pc, #356]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	4a58      	ldr	r2, [pc, #352]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800673e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b00      	cmp	r3, #0
 800674a:	d005      	beq.n	8006758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800674c:	4b53      	ldr	r3, [pc, #332]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	4a52      	ldr	r2, [pc, #328]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006752:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006758:	4b50      	ldr	r3, [pc, #320]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	494d      	ldr	r1, [pc, #308]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006766:	4313      	orrs	r3, r2
 8006768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d044      	beq.n	8006800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d107      	bne.n	800678e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677e:	4b47      	ldr	r3, [pc, #284]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d119      	bne.n	80067be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e07f      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d003      	beq.n	800679e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800679a:	2b03      	cmp	r3, #3
 800679c:	d107      	bne.n	80067ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800679e:	4b3f      	ldr	r3, [pc, #252]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d109      	bne.n	80067be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e06f      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ae:	4b3b      	ldr	r3, [pc, #236]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e067      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067be:	4b37      	ldr	r3, [pc, #220]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f023 0203 	bic.w	r2, r3, #3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	4934      	ldr	r1, [pc, #208]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067d0:	f7ff f982 	bl	8005ad8 <HAL_GetTick>
 80067d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067d6:	e00a      	b.n	80067ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067d8:	f7ff f97e 	bl	8005ad8 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d901      	bls.n	80067ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e04f      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ee:	4b2b      	ldr	r3, [pc, #172]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 020c 	and.w	r2, r3, #12
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d1eb      	bne.n	80067d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006800:	4b25      	ldr	r3, [pc, #148]	@ (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d20c      	bcs.n	8006828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800680e:	4b22      	ldr	r3, [pc, #136]	@ (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006816:	4b20      	ldr	r3, [pc, #128]	@ (8006898 <HAL_RCC_ClockConfig+0x1b8>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d001      	beq.n	8006828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e032      	b.n	800688e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	d008      	beq.n	8006846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006834:	4b19      	ldr	r3, [pc, #100]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	4916      	ldr	r1, [pc, #88]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006842:	4313      	orrs	r3, r2
 8006844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d009      	beq.n	8006866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006852:	4b12      	ldr	r3, [pc, #72]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	490e      	ldr	r1, [pc, #56]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 8006862:	4313      	orrs	r3, r2
 8006864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006866:	f000 f821 	bl	80068ac <HAL_RCC_GetSysClockFreq>
 800686a:	4602      	mov	r2, r0
 800686c:	4b0b      	ldr	r3, [pc, #44]	@ (800689c <HAL_RCC_ClockConfig+0x1bc>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	091b      	lsrs	r3, r3, #4
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	490a      	ldr	r1, [pc, #40]	@ (80068a0 <HAL_RCC_ClockConfig+0x1c0>)
 8006878:	5ccb      	ldrb	r3, [r1, r3]
 800687a:	fa22 f303 	lsr.w	r3, r2, r3
 800687e:	4a09      	ldr	r2, [pc, #36]	@ (80068a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006882:	4b09      	ldr	r3, [pc, #36]	@ (80068a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff f8e2 	bl	8005a50 <HAL_InitTick>

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	40023c00 	.word	0x40023c00
 800689c:	40023800 	.word	0x40023800
 80068a0:	0800d798 	.word	0x0800d798
 80068a4:	20000004 	.word	0x20000004
 80068a8:	20000008 	.word	0x20000008

080068ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068b0:	b094      	sub	sp, #80	@ 0x50
 80068b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80068b8:	2300      	movs	r3, #0
 80068ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068bc:	2300      	movs	r3, #0
 80068be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068c4:	4b79      	ldr	r3, [pc, #484]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x200>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f003 030c 	and.w	r3, r3, #12
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d00d      	beq.n	80068ec <HAL_RCC_GetSysClockFreq+0x40>
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	f200 80e1 	bhi.w	8006a98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <HAL_RCC_GetSysClockFreq+0x34>
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d003      	beq.n	80068e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80068de:	e0db      	b.n	8006a98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068e0:	4b73      	ldr	r3, [pc, #460]	@ (8006ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80068e2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80068e4:	e0db      	b.n	8006a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068e6:	4b73      	ldr	r3, [pc, #460]	@ (8006ab4 <HAL_RCC_GetSysClockFreq+0x208>)
 80068e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068ea:	e0d8      	b.n	8006a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068ec:	4b6f      	ldr	r3, [pc, #444]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x200>)
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068f6:	4b6d      	ldr	r3, [pc, #436]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x200>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d063      	beq.n	80069ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006902:	4b6a      	ldr	r3, [pc, #424]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x200>)
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	099b      	lsrs	r3, r3, #6
 8006908:	2200      	movs	r2, #0
 800690a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800690c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800690e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006914:	633b      	str	r3, [r7, #48]	@ 0x30
 8006916:	2300      	movs	r3, #0
 8006918:	637b      	str	r3, [r7, #52]	@ 0x34
 800691a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800691e:	4622      	mov	r2, r4
 8006920:	462b      	mov	r3, r5
 8006922:	f04f 0000 	mov.w	r0, #0
 8006926:	f04f 0100 	mov.w	r1, #0
 800692a:	0159      	lsls	r1, r3, #5
 800692c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006930:	0150      	lsls	r0, r2, #5
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	4621      	mov	r1, r4
 8006938:	1a51      	subs	r1, r2, r1
 800693a:	6139      	str	r1, [r7, #16]
 800693c:	4629      	mov	r1, r5
 800693e:	eb63 0301 	sbc.w	r3, r3, r1
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006950:	4659      	mov	r1, fp
 8006952:	018b      	lsls	r3, r1, #6
 8006954:	4651      	mov	r1, sl
 8006956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800695a:	4651      	mov	r1, sl
 800695c:	018a      	lsls	r2, r1, #6
 800695e:	4651      	mov	r1, sl
 8006960:	ebb2 0801 	subs.w	r8, r2, r1
 8006964:	4659      	mov	r1, fp
 8006966:	eb63 0901 	sbc.w	r9, r3, r1
 800696a:	f04f 0200 	mov.w	r2, #0
 800696e:	f04f 0300 	mov.w	r3, #0
 8006972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800697a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800697e:	4690      	mov	r8, r2
 8006980:	4699      	mov	r9, r3
 8006982:	4623      	mov	r3, r4
 8006984:	eb18 0303 	adds.w	r3, r8, r3
 8006988:	60bb      	str	r3, [r7, #8]
 800698a:	462b      	mov	r3, r5
 800698c:	eb49 0303 	adc.w	r3, r9, r3
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	f04f 0200 	mov.w	r2, #0
 8006996:	f04f 0300 	mov.w	r3, #0
 800699a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800699e:	4629      	mov	r1, r5
 80069a0:	024b      	lsls	r3, r1, #9
 80069a2:	4621      	mov	r1, r4
 80069a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069a8:	4621      	mov	r1, r4
 80069aa:	024a      	lsls	r2, r1, #9
 80069ac:	4610      	mov	r0, r2
 80069ae:	4619      	mov	r1, r3
 80069b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069b2:	2200      	movs	r2, #0
 80069b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80069bc:	f7fa f964 	bl	8000c88 <__aeabi_uldivmod>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4613      	mov	r3, r2
 80069c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069c8:	e058      	b.n	8006a7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ca:	4b38      	ldr	r3, [pc, #224]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x200>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	099b      	lsrs	r3, r3, #6
 80069d0:	2200      	movs	r2, #0
 80069d2:	4618      	mov	r0, r3
 80069d4:	4611      	mov	r1, r2
 80069d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069da:	623b      	str	r3, [r7, #32]
 80069dc:	2300      	movs	r3, #0
 80069de:	627b      	str	r3, [r7, #36]	@ 0x24
 80069e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069e4:	4642      	mov	r2, r8
 80069e6:	464b      	mov	r3, r9
 80069e8:	f04f 0000 	mov.w	r0, #0
 80069ec:	f04f 0100 	mov.w	r1, #0
 80069f0:	0159      	lsls	r1, r3, #5
 80069f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069f6:	0150      	lsls	r0, r2, #5
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4641      	mov	r1, r8
 80069fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a02:	4649      	mov	r1, r9
 8006a04:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a1c:	ebb2 040a 	subs.w	r4, r2, sl
 8006a20:	eb63 050b 	sbc.w	r5, r3, fp
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	f04f 0300 	mov.w	r3, #0
 8006a2c:	00eb      	lsls	r3, r5, #3
 8006a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a32:	00e2      	lsls	r2, r4, #3
 8006a34:	4614      	mov	r4, r2
 8006a36:	461d      	mov	r5, r3
 8006a38:	4643      	mov	r3, r8
 8006a3a:	18e3      	adds	r3, r4, r3
 8006a3c:	603b      	str	r3, [r7, #0]
 8006a3e:	464b      	mov	r3, r9
 8006a40:	eb45 0303 	adc.w	r3, r5, r3
 8006a44:	607b      	str	r3, [r7, #4]
 8006a46:	f04f 0200 	mov.w	r2, #0
 8006a4a:	f04f 0300 	mov.w	r3, #0
 8006a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a52:	4629      	mov	r1, r5
 8006a54:	028b      	lsls	r3, r1, #10
 8006a56:	4621      	mov	r1, r4
 8006a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	028a      	lsls	r2, r1, #10
 8006a60:	4610      	mov	r0, r2
 8006a62:	4619      	mov	r1, r3
 8006a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a66:	2200      	movs	r2, #0
 8006a68:	61bb      	str	r3, [r7, #24]
 8006a6a:	61fa      	str	r2, [r7, #28]
 8006a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a70:	f7fa f90a 	bl	8000c88 <__aeabi_uldivmod>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4613      	mov	r3, r2
 8006a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x200>)
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	0c1b      	lsrs	r3, r3, #16
 8006a82:	f003 0303 	and.w	r3, r3, #3
 8006a86:	3301      	adds	r3, #1
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006a8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a96:	e002      	b.n	8006a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a98:	4b05      	ldr	r3, [pc, #20]	@ (8006ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3750      	adds	r7, #80	@ 0x50
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aaa:	bf00      	nop
 8006aac:	40023800 	.word	0x40023800
 8006ab0:	00f42400 	.word	0x00f42400
 8006ab4:	007a1200 	.word	0x007a1200

08006ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006abc:	4b03      	ldr	r3, [pc, #12]	@ (8006acc <HAL_RCC_GetHCLKFreq+0x14>)
 8006abe:	681b      	ldr	r3, [r3, #0]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	20000004 	.word	0x20000004

08006ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ad4:	f7ff fff0 	bl	8006ab8 <HAL_RCC_GetHCLKFreq>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	4b05      	ldr	r3, [pc, #20]	@ (8006af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	0a9b      	lsrs	r3, r3, #10
 8006ae0:	f003 0307 	and.w	r3, r3, #7
 8006ae4:	4903      	ldr	r1, [pc, #12]	@ (8006af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ae6:	5ccb      	ldrb	r3, [r1, r3]
 8006ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	40023800 	.word	0x40023800
 8006af4:	0800d7a8 	.word	0x0800d7a8

08006af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006afc:	f7ff ffdc 	bl	8006ab8 <HAL_RCC_GetHCLKFreq>
 8006b00:	4602      	mov	r2, r0
 8006b02:	4b05      	ldr	r3, [pc, #20]	@ (8006b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	0b5b      	lsrs	r3, r3, #13
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	4903      	ldr	r1, [pc, #12]	@ (8006b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b0e:	5ccb      	ldrb	r3, [r1, r3]
 8006b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	40023800 	.word	0x40023800
 8006b1c:	0800d7a8 	.word	0x0800d7a8

08006b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e041      	b.n	8006bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7fe fc9a 	bl	8005480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	f000 fc54 	bl	800740c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d001      	beq.n	8006bd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e044      	b.n	8006c62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8006c70 <HAL_TIM_Base_Start_IT+0xb0>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d018      	beq.n	8006c2c <HAL_TIM_Base_Start_IT+0x6c>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c02:	d013      	beq.n	8006c2c <HAL_TIM_Base_Start_IT+0x6c>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a1a      	ldr	r2, [pc, #104]	@ (8006c74 <HAL_TIM_Base_Start_IT+0xb4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00e      	beq.n	8006c2c <HAL_TIM_Base_Start_IT+0x6c>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a19      	ldr	r2, [pc, #100]	@ (8006c78 <HAL_TIM_Base_Start_IT+0xb8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d009      	beq.n	8006c2c <HAL_TIM_Base_Start_IT+0x6c>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a17      	ldr	r2, [pc, #92]	@ (8006c7c <HAL_TIM_Base_Start_IT+0xbc>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d004      	beq.n	8006c2c <HAL_TIM_Base_Start_IT+0x6c>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a16      	ldr	r2, [pc, #88]	@ (8006c80 <HAL_TIM_Base_Start_IT+0xc0>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d111      	bne.n	8006c50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b06      	cmp	r3, #6
 8006c3c:	d010      	beq.n	8006c60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f042 0201 	orr.w	r2, r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c4e:	e007      	b.n	8006c60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0201 	orr.w	r2, r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40010000 	.word	0x40010000
 8006c74:	40000400 	.word	0x40000400
 8006c78:	40000800 	.word	0x40000800
 8006c7c:	40000c00 	.word	0x40000c00
 8006c80:	40014000 	.word	0x40014000

08006c84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e041      	b.n	8006d1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d106      	bne.n	8006cb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f839 	bl	8006d22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	f000 fba2 	bl	800740c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
	...

08006d38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d109      	bne.n	8006d5c <HAL_TIM_PWM_Start+0x24>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	bf14      	ite	ne
 8006d54:	2301      	movne	r3, #1
 8006d56:	2300      	moveq	r3, #0
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	e022      	b.n	8006da2 <HAL_TIM_PWM_Start+0x6a>
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d109      	bne.n	8006d76 <HAL_TIM_PWM_Start+0x3e>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	bf14      	ite	ne
 8006d6e:	2301      	movne	r3, #1
 8006d70:	2300      	moveq	r3, #0
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	e015      	b.n	8006da2 <HAL_TIM_PWM_Start+0x6a>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d109      	bne.n	8006d90 <HAL_TIM_PWM_Start+0x58>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	bf14      	ite	ne
 8006d88:	2301      	movne	r3, #1
 8006d8a:	2300      	moveq	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	e008      	b.n	8006da2 <HAL_TIM_PWM_Start+0x6a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	bf14      	ite	ne
 8006d9c:	2301      	movne	r3, #1
 8006d9e:	2300      	moveq	r3, #0
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e068      	b.n	8006e7c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <HAL_TIM_PWM_Start+0x82>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2202      	movs	r2, #2
 8006db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006db8:	e013      	b.n	8006de2 <HAL_TIM_PWM_Start+0xaa>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b04      	cmp	r3, #4
 8006dbe:	d104      	bne.n	8006dca <HAL_TIM_PWM_Start+0x92>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dc8:	e00b      	b.n	8006de2 <HAL_TIM_PWM_Start+0xaa>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d104      	bne.n	8006dda <HAL_TIM_PWM_Start+0xa2>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dd8:	e003      	b.n	8006de2 <HAL_TIM_PWM_Start+0xaa>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2202      	movs	r2, #2
 8006dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2201      	movs	r2, #1
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 fdb4 	bl	8007958 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a23      	ldr	r2, [pc, #140]	@ (8006e84 <HAL_TIM_PWM_Start+0x14c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d107      	bne.n	8006e0a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8006e84 <HAL_TIM_PWM_Start+0x14c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d018      	beq.n	8006e46 <HAL_TIM_PWM_Start+0x10e>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e1c:	d013      	beq.n	8006e46 <HAL_TIM_PWM_Start+0x10e>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a19      	ldr	r2, [pc, #100]	@ (8006e88 <HAL_TIM_PWM_Start+0x150>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00e      	beq.n	8006e46 <HAL_TIM_PWM_Start+0x10e>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a17      	ldr	r2, [pc, #92]	@ (8006e8c <HAL_TIM_PWM_Start+0x154>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d009      	beq.n	8006e46 <HAL_TIM_PWM_Start+0x10e>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a16      	ldr	r2, [pc, #88]	@ (8006e90 <HAL_TIM_PWM_Start+0x158>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d004      	beq.n	8006e46 <HAL_TIM_PWM_Start+0x10e>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a14      	ldr	r2, [pc, #80]	@ (8006e94 <HAL_TIM_PWM_Start+0x15c>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d111      	bne.n	8006e6a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2b06      	cmp	r3, #6
 8006e56:	d010      	beq.n	8006e7a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0201 	orr.w	r2, r2, #1
 8006e66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e68:	e007      	b.n	8006e7a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f042 0201 	orr.w	r2, r2, #1
 8006e78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	40010000 	.word	0x40010000
 8006e88:	40000400 	.word	0x40000400
 8006e8c:	40000800 	.word	0x40000800
 8006e90:	40000c00 	.word	0x40000c00
 8006e94:	40014000 	.word	0x40014000

08006e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d122      	bne.n	8006ef4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d11b      	bne.n	8006ef4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0202 	mvn.w	r2, #2
 8006ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fa77 	bl	80073ce <HAL_TIM_IC_CaptureCallback>
 8006ee0:	e005      	b.n	8006eee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fa69 	bl	80073ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fa7a 	bl	80073e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f003 0304 	and.w	r3, r3, #4
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d122      	bne.n	8006f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d11b      	bne.n	8006f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f06f 0204 	mvn.w	r2, #4
 8006f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fa4d 	bl	80073ce <HAL_TIM_IC_CaptureCallback>
 8006f34:	e005      	b.n	8006f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fa3f 	bl	80073ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fa50 	bl	80073e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b08      	cmp	r3, #8
 8006f54:	d122      	bne.n	8006f9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d11b      	bne.n	8006f9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f06f 0208 	mvn.w	r2, #8
 8006f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2204      	movs	r2, #4
 8006f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fa23 	bl	80073ce <HAL_TIM_IC_CaptureCallback>
 8006f88:	e005      	b.n	8006f96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fa15 	bl	80073ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fa26 	bl	80073e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	f003 0310 	and.w	r3, r3, #16
 8006fa6:	2b10      	cmp	r3, #16
 8006fa8:	d122      	bne.n	8006ff0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f003 0310 	and.w	r3, r3, #16
 8006fb4:	2b10      	cmp	r3, #16
 8006fb6:	d11b      	bne.n	8006ff0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f06f 0210 	mvn.w	r2, #16
 8006fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2208      	movs	r2, #8
 8006fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f9f9 	bl	80073ce <HAL_TIM_IC_CaptureCallback>
 8006fdc:	e005      	b.n	8006fea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f9eb 	bl	80073ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f9fc 	bl	80073e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d10e      	bne.n	800701c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b01      	cmp	r3, #1
 800700a:	d107      	bne.n	800701c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f06f 0201 	mvn.w	r2, #1
 8007014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7fc fafe 	bl	8003618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007026:	2b80      	cmp	r3, #128	@ 0x80
 8007028:	d10e      	bne.n	8007048 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007034:	2b80      	cmp	r3, #128	@ 0x80
 8007036:	d107      	bne.n	8007048 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fd26 	bl	8007a94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007052:	2b40      	cmp	r3, #64	@ 0x40
 8007054:	d10e      	bne.n	8007074 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007060:	2b40      	cmp	r3, #64	@ 0x40
 8007062:	d107      	bne.n	8007074 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800706c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f9c1 	bl	80073f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b20      	cmp	r3, #32
 8007080:	d10e      	bne.n	80070a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f003 0320 	and.w	r3, r3, #32
 800708c:	2b20      	cmp	r3, #32
 800708e:	d107      	bne.n	80070a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f06f 0220 	mvn.w	r2, #32
 8007098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fcf0 	bl	8007a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070a0:	bf00      	nop
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070c2:	2302      	movs	r3, #2
 80070c4:	e0ae      	b.n	8007224 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b0c      	cmp	r3, #12
 80070d2:	f200 809f 	bhi.w	8007214 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80070d6:	a201      	add	r2, pc, #4	@ (adr r2, 80070dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	08007111 	.word	0x08007111
 80070e0:	08007215 	.word	0x08007215
 80070e4:	08007215 	.word	0x08007215
 80070e8:	08007215 	.word	0x08007215
 80070ec:	08007151 	.word	0x08007151
 80070f0:	08007215 	.word	0x08007215
 80070f4:	08007215 	.word	0x08007215
 80070f8:	08007215 	.word	0x08007215
 80070fc:	08007193 	.word	0x08007193
 8007100:	08007215 	.word	0x08007215
 8007104:	08007215 	.word	0x08007215
 8007108:	08007215 	.word	0x08007215
 800710c:	080071d3 	.word	0x080071d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68b9      	ldr	r1, [r7, #8]
 8007116:	4618      	mov	r0, r3
 8007118:	f000 f9f8 	bl	800750c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699a      	ldr	r2, [r3, #24]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0208 	orr.w	r2, r2, #8
 800712a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699a      	ldr	r2, [r3, #24]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 0204 	bic.w	r2, r2, #4
 800713a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6999      	ldr	r1, [r3, #24]
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	691a      	ldr	r2, [r3, #16]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	619a      	str	r2, [r3, #24]
      break;
 800714e:	e064      	b.n	800721a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68b9      	ldr	r1, [r7, #8]
 8007156:	4618      	mov	r0, r3
 8007158:	f000 fa3e 	bl	80075d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699a      	ldr	r2, [r3, #24]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800716a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800717a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6999      	ldr	r1, [r3, #24]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	021a      	lsls	r2, r3, #8
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	619a      	str	r2, [r3, #24]
      break;
 8007190:	e043      	b.n	800721a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fa89 	bl	80076b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	69da      	ldr	r2, [r3, #28]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f042 0208 	orr.w	r2, r2, #8
 80071ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	69da      	ldr	r2, [r3, #28]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0204 	bic.w	r2, r2, #4
 80071bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69d9      	ldr	r1, [r3, #28]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	691a      	ldr	r2, [r3, #16]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	61da      	str	r2, [r3, #28]
      break;
 80071d0:	e023      	b.n	800721a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68b9      	ldr	r1, [r7, #8]
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 fad3 	bl	8007784 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69da      	ldr	r2, [r3, #28]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69da      	ldr	r2, [r3, #28]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69d9      	ldr	r1, [r3, #28]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	021a      	lsls	r2, r3, #8
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	61da      	str	r2, [r3, #28]
      break;
 8007212:	e002      	b.n	800721a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	75fb      	strb	r3, [r7, #23]
      break;
 8007218:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007222:	7dfb      	ldrb	r3, [r7, #23]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_TIM_ConfigClockSource+0x1c>
 8007244:	2302      	movs	r3, #2
 8007246:	e0b4      	b.n	80073b2 <HAL_TIM_ConfigClockSource+0x186>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800726e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007280:	d03e      	beq.n	8007300 <HAL_TIM_ConfigClockSource+0xd4>
 8007282:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007286:	f200 8087 	bhi.w	8007398 <HAL_TIM_ConfigClockSource+0x16c>
 800728a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800728e:	f000 8086 	beq.w	800739e <HAL_TIM_ConfigClockSource+0x172>
 8007292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007296:	d87f      	bhi.n	8007398 <HAL_TIM_ConfigClockSource+0x16c>
 8007298:	2b70      	cmp	r3, #112	@ 0x70
 800729a:	d01a      	beq.n	80072d2 <HAL_TIM_ConfigClockSource+0xa6>
 800729c:	2b70      	cmp	r3, #112	@ 0x70
 800729e:	d87b      	bhi.n	8007398 <HAL_TIM_ConfigClockSource+0x16c>
 80072a0:	2b60      	cmp	r3, #96	@ 0x60
 80072a2:	d050      	beq.n	8007346 <HAL_TIM_ConfigClockSource+0x11a>
 80072a4:	2b60      	cmp	r3, #96	@ 0x60
 80072a6:	d877      	bhi.n	8007398 <HAL_TIM_ConfigClockSource+0x16c>
 80072a8:	2b50      	cmp	r3, #80	@ 0x50
 80072aa:	d03c      	beq.n	8007326 <HAL_TIM_ConfigClockSource+0xfa>
 80072ac:	2b50      	cmp	r3, #80	@ 0x50
 80072ae:	d873      	bhi.n	8007398 <HAL_TIM_ConfigClockSource+0x16c>
 80072b0:	2b40      	cmp	r3, #64	@ 0x40
 80072b2:	d058      	beq.n	8007366 <HAL_TIM_ConfigClockSource+0x13a>
 80072b4:	2b40      	cmp	r3, #64	@ 0x40
 80072b6:	d86f      	bhi.n	8007398 <HAL_TIM_ConfigClockSource+0x16c>
 80072b8:	2b30      	cmp	r3, #48	@ 0x30
 80072ba:	d064      	beq.n	8007386 <HAL_TIM_ConfigClockSource+0x15a>
 80072bc:	2b30      	cmp	r3, #48	@ 0x30
 80072be:	d86b      	bhi.n	8007398 <HAL_TIM_ConfigClockSource+0x16c>
 80072c0:	2b20      	cmp	r3, #32
 80072c2:	d060      	beq.n	8007386 <HAL_TIM_ConfigClockSource+0x15a>
 80072c4:	2b20      	cmp	r3, #32
 80072c6:	d867      	bhi.n	8007398 <HAL_TIM_ConfigClockSource+0x16c>
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d05c      	beq.n	8007386 <HAL_TIM_ConfigClockSource+0x15a>
 80072cc:	2b10      	cmp	r3, #16
 80072ce:	d05a      	beq.n	8007386 <HAL_TIM_ConfigClockSource+0x15a>
 80072d0:	e062      	b.n	8007398 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6818      	ldr	r0, [r3, #0]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	6899      	ldr	r1, [r3, #8]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f000 fb19 	bl	8007918 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80072f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	609a      	str	r2, [r3, #8]
      break;
 80072fe:	e04f      	b.n	80073a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6818      	ldr	r0, [r3, #0]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	6899      	ldr	r1, [r3, #8]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f000 fb02 	bl	8007918 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007322:	609a      	str	r2, [r3, #8]
      break;
 8007324:	e03c      	b.n	80073a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	6859      	ldr	r1, [r3, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	461a      	mov	r2, r3
 8007334:	f000 fa76 	bl	8007824 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2150      	movs	r1, #80	@ 0x50
 800733e:	4618      	mov	r0, r3
 8007340:	f000 facf 	bl	80078e2 <TIM_ITRx_SetConfig>
      break;
 8007344:	e02c      	b.n	80073a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6818      	ldr	r0, [r3, #0]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	6859      	ldr	r1, [r3, #4]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	461a      	mov	r2, r3
 8007354:	f000 fa95 	bl	8007882 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2160      	movs	r1, #96	@ 0x60
 800735e:	4618      	mov	r0, r3
 8007360:	f000 fabf 	bl	80078e2 <TIM_ITRx_SetConfig>
      break;
 8007364:	e01c      	b.n	80073a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	6859      	ldr	r1, [r3, #4]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	461a      	mov	r2, r3
 8007374:	f000 fa56 	bl	8007824 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2140      	movs	r1, #64	@ 0x40
 800737e:	4618      	mov	r0, r3
 8007380:	f000 faaf 	bl	80078e2 <TIM_ITRx_SetConfig>
      break;
 8007384:	e00c      	b.n	80073a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4619      	mov	r1, r3
 8007390:	4610      	mov	r0, r2
 8007392:	f000 faa6 	bl	80078e2 <TIM_ITRx_SetConfig>
      break;
 8007396:	e003      	b.n	80073a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	73fb      	strb	r3, [r7, #15]
      break;
 800739c:	e000      	b.n	80073a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800739e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073c2:	bf00      	nop
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073d6:	bf00      	nop
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b083      	sub	sp, #12
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073ea:	bf00      	nop
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b083      	sub	sp, #12
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
	...

0800740c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a34      	ldr	r2, [pc, #208]	@ (80074f0 <TIM_Base_SetConfig+0xe4>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d00f      	beq.n	8007444 <TIM_Base_SetConfig+0x38>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800742a:	d00b      	beq.n	8007444 <TIM_Base_SetConfig+0x38>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a31      	ldr	r2, [pc, #196]	@ (80074f4 <TIM_Base_SetConfig+0xe8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d007      	beq.n	8007444 <TIM_Base_SetConfig+0x38>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a30      	ldr	r2, [pc, #192]	@ (80074f8 <TIM_Base_SetConfig+0xec>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d003      	beq.n	8007444 <TIM_Base_SetConfig+0x38>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a2f      	ldr	r2, [pc, #188]	@ (80074fc <TIM_Base_SetConfig+0xf0>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d108      	bne.n	8007456 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800744a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a25      	ldr	r2, [pc, #148]	@ (80074f0 <TIM_Base_SetConfig+0xe4>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d01b      	beq.n	8007496 <TIM_Base_SetConfig+0x8a>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007464:	d017      	beq.n	8007496 <TIM_Base_SetConfig+0x8a>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a22      	ldr	r2, [pc, #136]	@ (80074f4 <TIM_Base_SetConfig+0xe8>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d013      	beq.n	8007496 <TIM_Base_SetConfig+0x8a>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a21      	ldr	r2, [pc, #132]	@ (80074f8 <TIM_Base_SetConfig+0xec>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d00f      	beq.n	8007496 <TIM_Base_SetConfig+0x8a>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a20      	ldr	r2, [pc, #128]	@ (80074fc <TIM_Base_SetConfig+0xf0>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d00b      	beq.n	8007496 <TIM_Base_SetConfig+0x8a>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a1f      	ldr	r2, [pc, #124]	@ (8007500 <TIM_Base_SetConfig+0xf4>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d007      	beq.n	8007496 <TIM_Base_SetConfig+0x8a>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a1e      	ldr	r2, [pc, #120]	@ (8007504 <TIM_Base_SetConfig+0xf8>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d003      	beq.n	8007496 <TIM_Base_SetConfig+0x8a>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a1d      	ldr	r2, [pc, #116]	@ (8007508 <TIM_Base_SetConfig+0xfc>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d108      	bne.n	80074a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800749c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a08      	ldr	r2, [pc, #32]	@ (80074f0 <TIM_Base_SetConfig+0xe4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d103      	bne.n	80074dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	691a      	ldr	r2, [r3, #16]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	615a      	str	r2, [r3, #20]
}
 80074e2:	bf00      	nop
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	40010000 	.word	0x40010000
 80074f4:	40000400 	.word	0x40000400
 80074f8:	40000800 	.word	0x40000800
 80074fc:	40000c00 	.word	0x40000c00
 8007500:	40014000 	.word	0x40014000
 8007504:	40014400 	.word	0x40014400
 8007508:	40014800 	.word	0x40014800

0800750c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	f023 0201 	bic.w	r2, r3, #1
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800753a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0303 	bic.w	r3, r3, #3
 8007542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f023 0302 	bic.w	r3, r3, #2
 8007554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	4313      	orrs	r3, r2
 800755e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a1c      	ldr	r2, [pc, #112]	@ (80075d4 <TIM_OC1_SetConfig+0xc8>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d10c      	bne.n	8007582 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f023 0308 	bic.w	r3, r3, #8
 800756e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f023 0304 	bic.w	r3, r3, #4
 8007580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a13      	ldr	r2, [pc, #76]	@ (80075d4 <TIM_OC1_SetConfig+0xc8>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d111      	bne.n	80075ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	621a      	str	r2, [r3, #32]
}
 80075c8:	bf00      	nop
 80075ca:	371c      	adds	r7, #28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	40010000 	.word	0x40010000

080075d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	f023 0210 	bic.w	r2, r3, #16
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800760e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	021b      	lsls	r3, r3, #8
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	4313      	orrs	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f023 0320 	bic.w	r3, r3, #32
 8007622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	4313      	orrs	r3, r2
 800762e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a1e      	ldr	r2, [pc, #120]	@ (80076ac <TIM_OC2_SetConfig+0xd4>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d10d      	bne.n	8007654 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800763e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	011b      	lsls	r3, r3, #4
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	4313      	orrs	r3, r2
 800764a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007652:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a15      	ldr	r2, [pc, #84]	@ (80076ac <TIM_OC2_SetConfig+0xd4>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d113      	bne.n	8007684 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007662:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800766a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	695b      	ldr	r3, [r3, #20]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	4313      	orrs	r3, r2
 8007676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	621a      	str	r2, [r3, #32]
}
 800769e:	bf00      	nop
 80076a0:	371c      	adds	r7, #28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	40010000 	.word	0x40010000

080076b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 0303 	bic.w	r3, r3, #3
 80076e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	021b      	lsls	r3, r3, #8
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	4313      	orrs	r3, r2
 8007704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a1d      	ldr	r2, [pc, #116]	@ (8007780 <TIM_OC3_SetConfig+0xd0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d10d      	bne.n	800772a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	021b      	lsls	r3, r3, #8
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	4313      	orrs	r3, r2
 8007720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a14      	ldr	r2, [pc, #80]	@ (8007780 <TIM_OC3_SetConfig+0xd0>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d113      	bne.n	800775a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	011b      	lsls	r3, r3, #4
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	4313      	orrs	r3, r2
 800774c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	011b      	lsls	r3, r3, #4
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	4313      	orrs	r3, r2
 8007758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	621a      	str	r2, [r3, #32]
}
 8007774:	bf00      	nop
 8007776:	371c      	adds	r7, #28
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	40010000 	.word	0x40010000

08007784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	021b      	lsls	r3, r3, #8
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	031b      	lsls	r3, r3, #12
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	4313      	orrs	r3, r2
 80077da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a10      	ldr	r2, [pc, #64]	@ (8007820 <TIM_OC4_SetConfig+0x9c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d109      	bne.n	80077f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	019b      	lsls	r3, r3, #6
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	621a      	str	r2, [r3, #32]
}
 8007812:	bf00      	nop
 8007814:	371c      	adds	r7, #28
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	40010000 	.word	0x40010000

08007824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6a1b      	ldr	r3, [r3, #32]
 8007834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	f023 0201 	bic.w	r2, r3, #1
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800784e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	011b      	lsls	r3, r3, #4
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	4313      	orrs	r3, r2
 8007858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f023 030a 	bic.w	r3, r3, #10
 8007860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	4313      	orrs	r3, r2
 8007868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	621a      	str	r2, [r3, #32]
}
 8007876:	bf00      	nop
 8007878:	371c      	adds	r7, #28
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007882:	b480      	push	{r7}
 8007884:	b087      	sub	sp, #28
 8007886:	af00      	add	r7, sp, #0
 8007888:	60f8      	str	r0, [r7, #12]
 800788a:	60b9      	str	r1, [r7, #8]
 800788c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	f023 0210 	bic.w	r2, r3, #16
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	031b      	lsls	r3, r3, #12
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80078be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	011b      	lsls	r3, r3, #4
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	621a      	str	r2, [r3, #32]
}
 80078d6:	bf00      	nop
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b085      	sub	sp, #20
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	f043 0307 	orr.w	r3, r3, #7
 8007904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	609a      	str	r2, [r3, #8]
}
 800790c:	bf00      	nop
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007918:	b480      	push	{r7}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	021a      	lsls	r2, r3, #8
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	431a      	orrs	r2, r3
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4313      	orrs	r3, r2
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	4313      	orrs	r3, r2
 8007944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	609a      	str	r2, [r3, #8]
}
 800794c:	bf00      	nop
 800794e:	371c      	adds	r7, #28
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	f003 031f 	and.w	r3, r3, #31
 800796a:	2201      	movs	r2, #1
 800796c:	fa02 f303 	lsl.w	r3, r2, r3
 8007970:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a1a      	ldr	r2, [r3, #32]
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	43db      	mvns	r3, r3
 800797a:	401a      	ands	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6a1a      	ldr	r2, [r3, #32]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	f003 031f 	and.w	r3, r3, #31
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	fa01 f303 	lsl.w	r3, r1, r3
 8007990:	431a      	orrs	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	621a      	str	r2, [r3, #32]
}
 8007996:	bf00      	nop
 8007998:	371c      	adds	r7, #28
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
	...

080079a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d101      	bne.n	80079bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079b8:	2302      	movs	r3, #2
 80079ba:	e050      	b.n	8007a5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2202      	movs	r2, #2
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1c      	ldr	r2, [pc, #112]	@ (8007a6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d018      	beq.n	8007a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a08:	d013      	beq.n	8007a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a18      	ldr	r2, [pc, #96]	@ (8007a70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d00e      	beq.n	8007a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a16      	ldr	r2, [pc, #88]	@ (8007a74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d009      	beq.n	8007a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a15      	ldr	r2, [pc, #84]	@ (8007a78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d004      	beq.n	8007a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a13      	ldr	r2, [pc, #76]	@ (8007a7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d10c      	bne.n	8007a4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	40010000 	.word	0x40010000
 8007a70:	40000400 	.word	0x40000400
 8007a74:	40000800 	.word	0x40000800
 8007a78:	40000c00 	.word	0x40000c00
 8007a7c:	40014000 	.word	0x40014000

08007a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e03f      	b.n	8007b3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d106      	bne.n	8007ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7fd fd6a 	bl	80055a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2224      	movs	r2, #36	@ 0x24
 8007ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fd19 	bl	8008524 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	691a      	ldr	r2, [r3, #16]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	695a      	ldr	r2, [r3, #20]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2220      	movs	r2, #32
 8007b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	60f8      	str	r0, [r7, #12]
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b20      	cmp	r3, #32
 8007b5a:	d130      	bne.n	8007bbe <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <HAL_UART_Transmit_IT+0x26>
 8007b62:	88fb      	ldrh	r3, [r7, #6]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e029      	b.n	8007bc0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d101      	bne.n	8007b7a <HAL_UART_Transmit_IT+0x38>
 8007b76:	2302      	movs	r3, #2
 8007b78:	e022      	b.n	8007bc0 <HAL_UART_Transmit_IT+0x7e>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	88fa      	ldrh	r2, [r7, #6]
 8007b8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	88fa      	ldrh	r2, [r7, #6]
 8007b92:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2221      	movs	r2, #33	@ 0x21
 8007b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68da      	ldr	r2, [r3, #12]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007bb8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	e000      	b.n	8007bc0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007bbe:	2302      	movs	r3, #2
  }
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b20      	cmp	r3, #32
 8007be4:	d11d      	bne.n	8007c22 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <HAL_UART_Receive_IT+0x26>
 8007bec:	88fb      	ldrh	r3, [r7, #6]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e016      	b.n	8007c24 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d101      	bne.n	8007c04 <HAL_UART_Receive_IT+0x38>
 8007c00:	2302      	movs	r3, #2
 8007c02:	e00f      	b.n	8007c24 <HAL_UART_Receive_IT+0x58>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007c12:	88fb      	ldrh	r3, [r7, #6]
 8007c14:	461a      	mov	r2, r3
 8007c16:	68b9      	ldr	r1, [r7, #8]
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 faab 	bl	8008174 <UART_Start_Receive_IT>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	e000      	b.n	8007c24 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007c22:	2302      	movs	r3, #2
  }
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b0ba      	sub	sp, #232	@ 0xe8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c62:	f003 030f 	and.w	r3, r3, #15
 8007c66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10f      	bne.n	8007c92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d009      	beq.n	8007c92 <HAL_UART_IRQHandler+0x66>
 8007c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c82:	f003 0320 	and.w	r3, r3, #32
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fb8f 	bl	80083ae <UART_Receive_IT>
      return;
 8007c90:	e256      	b.n	8008140 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007c92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f000 80de 	beq.w	8007e58 <HAL_UART_IRQHandler+0x22c>
 8007c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d106      	bne.n	8007cb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f000 80d1 	beq.w	8007e58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00b      	beq.n	8007cda <HAL_UART_IRQHandler+0xae>
 8007cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d005      	beq.n	8007cda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd2:	f043 0201 	orr.w	r2, r3, #1
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cde:	f003 0304 	and.w	r3, r3, #4
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00b      	beq.n	8007cfe <HAL_UART_IRQHandler+0xd2>
 8007ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d005      	beq.n	8007cfe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf6:	f043 0202 	orr.w	r2, r3, #2
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00b      	beq.n	8007d22 <HAL_UART_IRQHandler+0xf6>
 8007d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d005      	beq.n	8007d22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d1a:	f043 0204 	orr.w	r2, r3, #4
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d26:	f003 0308 	and.w	r3, r3, #8
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d011      	beq.n	8007d52 <HAL_UART_IRQHandler+0x126>
 8007d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d32:	f003 0320 	and.w	r3, r3, #32
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d105      	bne.n	8007d46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d005      	beq.n	8007d52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d4a:	f043 0208 	orr.w	r2, r3, #8
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 81ed 	beq.w	8008136 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d60:	f003 0320 	and.w	r3, r3, #32
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d008      	beq.n	8007d7a <HAL_UART_IRQHandler+0x14e>
 8007d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d6c:	f003 0320 	and.w	r3, r3, #32
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fb1a 	bl	80083ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d84:	2b40      	cmp	r3, #64	@ 0x40
 8007d86:	bf0c      	ite	eq
 8007d88:	2301      	moveq	r3, #1
 8007d8a:	2300      	movne	r3, #0
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d96:	f003 0308 	and.w	r3, r3, #8
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d103      	bne.n	8007da6 <HAL_UART_IRQHandler+0x17a>
 8007d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d04f      	beq.n	8007e46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fa22 	bl	80081f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db6:	2b40      	cmp	r3, #64	@ 0x40
 8007db8:	d141      	bne.n	8007e3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3314      	adds	r3, #20
 8007dc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dc8:	e853 3f00 	ldrex	r3, [r3]
 8007dcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	3314      	adds	r3, #20
 8007de2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007de6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007dea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007df2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007dfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1d9      	bne.n	8007dba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d013      	beq.n	8007e36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e12:	4a7d      	ldr	r2, [pc, #500]	@ (8008008 <HAL_UART_IRQHandler+0x3dc>)
 8007e14:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe f80d 	bl	8005e3a <HAL_DMA_Abort_IT>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d016      	beq.n	8007e54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007e30:	4610      	mov	r0, r2
 8007e32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e34:	e00e      	b.n	8007e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f986 	bl	8008148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e3c:	e00a      	b.n	8007e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f982 	bl	8008148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e44:	e006      	b.n	8007e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f97e 	bl	8008148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007e52:	e170      	b.n	8008136 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e54:	bf00      	nop
    return;
 8007e56:	e16e      	b.n	8008136 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	f040 814a 	bne.w	80080f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e66:	f003 0310 	and.w	r3, r3, #16
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 8143 	beq.w	80080f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e74:	f003 0310 	and.w	r3, r3, #16
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 813c 	beq.w	80080f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60bb      	str	r3, [r7, #8]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	60bb      	str	r3, [r7, #8]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	60bb      	str	r3, [r7, #8]
 8007e92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e9e:	2b40      	cmp	r3, #64	@ 0x40
 8007ea0:	f040 80b4 	bne.w	800800c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007eb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 8140 	beq.w	800813a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	f080 8139 	bcs.w	800813a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ece:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eda:	f000 8088 	beq.w	8007fee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	330c      	adds	r3, #12
 8007ee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007efc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	330c      	adds	r3, #12
 8007f06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007f0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f1a:	e841 2300 	strex	r3, r2, [r1]
 8007f1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1d9      	bne.n	8007ede <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3314      	adds	r3, #20
 8007f30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f34:	e853 3f00 	ldrex	r3, [r3]
 8007f38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f3c:	f023 0301 	bic.w	r3, r3, #1
 8007f40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3314      	adds	r3, #20
 8007f4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007f52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007f56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007f60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e1      	bne.n	8007f2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3314      	adds	r3, #20
 8007f6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007f76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3314      	adds	r3, #20
 8007f86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007f8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007f90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e3      	bne.n	8007f66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	330c      	adds	r3, #12
 8007fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fb6:	e853 3f00 	ldrex	r3, [r3]
 8007fba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fbe:	f023 0310 	bic.w	r3, r3, #16
 8007fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	330c      	adds	r3, #12
 8007fcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007fd0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007fd2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007fd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007fde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e3      	bne.n	8007fac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fd feb6 	bl	8005d5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f8ac 	bl	800815c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008004:	e099      	b.n	800813a <HAL_UART_IRQHandler+0x50e>
 8008006:	bf00      	nop
 8008008:	080082b7 	.word	0x080082b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008014:	b29b      	uxth	r3, r3
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008020:	b29b      	uxth	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 808b 	beq.w	800813e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008028:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 8086 	beq.w	800813e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	330c      	adds	r3, #12
 8008038:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008044:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008048:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	330c      	adds	r3, #12
 8008052:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008056:	647a      	str	r2, [r7, #68]	@ 0x44
 8008058:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800805c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800805e:	e841 2300 	strex	r3, r2, [r1]
 8008062:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1e3      	bne.n	8008032 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	3314      	adds	r3, #20
 8008070:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	623b      	str	r3, [r7, #32]
   return(result);
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	f023 0301 	bic.w	r3, r3, #1
 8008080:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3314      	adds	r3, #20
 800808a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800808e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008090:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008092:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008096:	e841 2300 	strex	r3, r2, [r1]
 800809a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800809c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1e3      	bne.n	800806a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2220      	movs	r2, #32
 80080a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	330c      	adds	r3, #12
 80080b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	e853 3f00 	ldrex	r3, [r3]
 80080be:	60fb      	str	r3, [r7, #12]
   return(result);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f023 0310 	bic.w	r3, r3, #16
 80080c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	330c      	adds	r3, #12
 80080d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80080d4:	61fa      	str	r2, [r7, #28]
 80080d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d8:	69b9      	ldr	r1, [r7, #24]
 80080da:	69fa      	ldr	r2, [r7, #28]
 80080dc:	e841 2300 	strex	r3, r2, [r1]
 80080e0:	617b      	str	r3, [r7, #20]
   return(result);
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1e3      	bne.n	80080b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f834 	bl	800815c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80080f4:	e023      	b.n	800813e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80080f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d009      	beq.n	8008116 <HAL_UART_IRQHandler+0x4ea>
 8008102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f8e5 	bl	80082de <UART_Transmit_IT>
    return;
 8008114:	e014      	b.n	8008140 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800811a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00e      	beq.n	8008140 <HAL_UART_IRQHandler+0x514>
 8008122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800812a:	2b00      	cmp	r3, #0
 800812c:	d008      	beq.n	8008140 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f925 	bl	800837e <UART_EndTransmit_IT>
    return;
 8008134:	e004      	b.n	8008140 <HAL_UART_IRQHandler+0x514>
    return;
 8008136:	bf00      	nop
 8008138:	e002      	b.n	8008140 <HAL_UART_IRQHandler+0x514>
      return;
 800813a:	bf00      	nop
 800813c:	e000      	b.n	8008140 <HAL_UART_IRQHandler+0x514>
      return;
 800813e:	bf00      	nop
  }
}
 8008140:	37e8      	adds	r7, #232	@ 0xe8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop

08008148 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	4613      	mov	r3, r2
 8008180:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	88fa      	ldrh	r2, [r7, #6]
 800818c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	88fa      	ldrh	r2, [r7, #6]
 8008192:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2222      	movs	r2, #34	@ 0x22
 800819e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d007      	beq.n	80081c2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68da      	ldr	r2, [r3, #12]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	695a      	ldr	r2, [r3, #20]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f042 0201 	orr.w	r2, r2, #1
 80081d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68da      	ldr	r2, [r3, #12]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f042 0220 	orr.w	r2, r2, #32
 80081e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b095      	sub	sp, #84	@ 0x54
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	330c      	adds	r3, #12
 80081fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008202:	e853 3f00 	ldrex	r3, [r3]
 8008206:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800820e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	330c      	adds	r3, #12
 8008216:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008218:	643a      	str	r2, [r7, #64]	@ 0x40
 800821a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800821e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008220:	e841 2300 	strex	r3, r2, [r1]
 8008224:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1e5      	bne.n	80081f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3314      	adds	r3, #20
 8008232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	e853 3f00 	ldrex	r3, [r3]
 800823a:	61fb      	str	r3, [r7, #28]
   return(result);
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	f023 0301 	bic.w	r3, r3, #1
 8008242:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3314      	adds	r3, #20
 800824a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800824c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800824e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008250:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008254:	e841 2300 	strex	r3, r2, [r1]
 8008258:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800825a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e5      	bne.n	800822c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008264:	2b01      	cmp	r3, #1
 8008266:	d119      	bne.n	800829c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	330c      	adds	r3, #12
 800826e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	e853 3f00 	ldrex	r3, [r3]
 8008276:	60bb      	str	r3, [r7, #8]
   return(result);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f023 0310 	bic.w	r3, r3, #16
 800827e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	330c      	adds	r3, #12
 8008286:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008288:	61ba      	str	r2, [r7, #24]
 800828a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828c:	6979      	ldr	r1, [r7, #20]
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	e841 2300 	strex	r3, r2, [r1]
 8008294:	613b      	str	r3, [r7, #16]
   return(result);
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1e5      	bne.n	8008268 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2220      	movs	r2, #32
 80082a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80082aa:	bf00      	nop
 80082ac:	3754      	adds	r7, #84	@ 0x54
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f7ff ff39 	bl	8008148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082d6:	bf00      	nop
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082de:	b480      	push	{r7}
 80082e0:	b085      	sub	sp, #20
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b21      	cmp	r3, #33	@ 0x21
 80082f0:	d13e      	bne.n	8008370 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082fa:	d114      	bne.n	8008326 <UART_Transmit_IT+0x48>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d110      	bne.n	8008326 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a1b      	ldr	r3, [r3, #32]
 8008308:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	461a      	mov	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008318:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	1c9a      	adds	r2, r3, #2
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	621a      	str	r2, [r3, #32]
 8008324:	e008      	b.n	8008338 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	1c59      	adds	r1, r3, #1
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6211      	str	r1, [r2, #32]
 8008330:	781a      	ldrb	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800833c:	b29b      	uxth	r3, r3
 800833e:	3b01      	subs	r3, #1
 8008340:	b29b      	uxth	r3, r3
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	4619      	mov	r1, r3
 8008346:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10f      	bne.n	800836c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68da      	ldr	r2, [r3, #12]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800835a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68da      	ldr	r2, [r3, #12]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800836a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	e000      	b.n	8008372 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008370:	2302      	movs	r3, #2
  }
}
 8008372:	4618      	mov	r0, r3
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr

0800837e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68da      	ldr	r2, [r3, #12]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008394:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2220      	movs	r2, #32
 800839a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f7fb fa6c 	bl	800387c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b08c      	sub	sp, #48	@ 0x30
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b22      	cmp	r3, #34	@ 0x22
 80083c0:	f040 80ab 	bne.w	800851a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083cc:	d117      	bne.n	80083fe <UART_Receive_IT+0x50>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d113      	bne.n	80083fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80083d6:	2300      	movs	r3, #0
 80083d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083de:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f6:	1c9a      	adds	r2, r3, #2
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80083fc:	e026      	b.n	800844c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008402:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008404:	2300      	movs	r3, #0
 8008406:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008410:	d007      	beq.n	8008422 <UART_Receive_IT+0x74>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10a      	bne.n	8008430 <UART_Receive_IT+0x82>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d106      	bne.n	8008430 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	b2da      	uxtb	r2, r3
 800842a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800842c:	701a      	strb	r2, [r3, #0]
 800842e:	e008      	b.n	8008442 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	b2db      	uxtb	r3, r3
 8008438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800843c:	b2da      	uxtb	r2, r3
 800843e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008440:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008446:	1c5a      	adds	r2, r3, #1
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008450:	b29b      	uxth	r3, r3
 8008452:	3b01      	subs	r3, #1
 8008454:	b29b      	uxth	r3, r3
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	4619      	mov	r1, r3
 800845a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800845c:	2b00      	cmp	r3, #0
 800845e:	d15a      	bne.n	8008516 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68da      	ldr	r2, [r3, #12]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f022 0220 	bic.w	r2, r2, #32
 800846e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68da      	ldr	r2, [r3, #12]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800847e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	695a      	ldr	r2, [r3, #20]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 0201 	bic.w	r2, r2, #1
 800848e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2220      	movs	r2, #32
 8008494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800849c:	2b01      	cmp	r3, #1
 800849e:	d135      	bne.n	800850c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	330c      	adds	r3, #12
 80084ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	613b      	str	r3, [r7, #16]
   return(result);
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	f023 0310 	bic.w	r3, r3, #16
 80084bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	330c      	adds	r3, #12
 80084c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084c6:	623a      	str	r2, [r7, #32]
 80084c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ca:	69f9      	ldr	r1, [r7, #28]
 80084cc:	6a3a      	ldr	r2, [r7, #32]
 80084ce:	e841 2300 	strex	r3, r2, [r1]
 80084d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1e5      	bne.n	80084a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0310 	and.w	r3, r3, #16
 80084e4:	2b10      	cmp	r3, #16
 80084e6:	d10a      	bne.n	80084fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084e8:	2300      	movs	r3, #0
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7ff fe29 	bl	800815c <HAL_UARTEx_RxEventCallback>
 800850a:	e002      	b.n	8008512 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7fb f8db 	bl	80036c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	e002      	b.n	800851c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	e000      	b.n	800851c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800851a:	2302      	movs	r3, #2
  }
}
 800851c:	4618      	mov	r0, r3
 800851e:	3730      	adds	r7, #48	@ 0x30
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008528:	b0c0      	sub	sp, #256	@ 0x100
 800852a:	af00      	add	r7, sp, #0
 800852c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800853c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008540:	68d9      	ldr	r1, [r3, #12]
 8008542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	ea40 0301 	orr.w	r3, r0, r1
 800854c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800854e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	431a      	orrs	r2, r3
 800855c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	431a      	orrs	r2, r3
 8008564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	4313      	orrs	r3, r2
 800856c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800857c:	f021 010c 	bic.w	r1, r1, #12
 8008580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800858a:	430b      	orrs	r3, r1
 800858c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800858e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800859a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800859e:	6999      	ldr	r1, [r3, #24]
 80085a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	ea40 0301 	orr.w	r3, r0, r1
 80085aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	4b8f      	ldr	r3, [pc, #572]	@ (80087f0 <UART_SetConfig+0x2cc>)
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d005      	beq.n	80085c4 <UART_SetConfig+0xa0>
 80085b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	4b8d      	ldr	r3, [pc, #564]	@ (80087f4 <UART_SetConfig+0x2d0>)
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d104      	bne.n	80085ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085c4:	f7fe fa98 	bl	8006af8 <HAL_RCC_GetPCLK2Freq>
 80085c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80085cc:	e003      	b.n	80085d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085ce:	f7fe fa7f 	bl	8006ad0 <HAL_RCC_GetPCLK1Freq>
 80085d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085e0:	f040 810c 	bne.w	80087fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80085ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80085f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80085f6:	4622      	mov	r2, r4
 80085f8:	462b      	mov	r3, r5
 80085fa:	1891      	adds	r1, r2, r2
 80085fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80085fe:	415b      	adcs	r3, r3
 8008600:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008602:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008606:	4621      	mov	r1, r4
 8008608:	eb12 0801 	adds.w	r8, r2, r1
 800860c:	4629      	mov	r1, r5
 800860e:	eb43 0901 	adc.w	r9, r3, r1
 8008612:	f04f 0200 	mov.w	r2, #0
 8008616:	f04f 0300 	mov.w	r3, #0
 800861a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800861e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008626:	4690      	mov	r8, r2
 8008628:	4699      	mov	r9, r3
 800862a:	4623      	mov	r3, r4
 800862c:	eb18 0303 	adds.w	r3, r8, r3
 8008630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008634:	462b      	mov	r3, r5
 8008636:	eb49 0303 	adc.w	r3, r9, r3
 800863a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800863e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800864a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800864e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008652:	460b      	mov	r3, r1
 8008654:	18db      	adds	r3, r3, r3
 8008656:	653b      	str	r3, [r7, #80]	@ 0x50
 8008658:	4613      	mov	r3, r2
 800865a:	eb42 0303 	adc.w	r3, r2, r3
 800865e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008660:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008664:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008668:	f7f8 fb0e 	bl	8000c88 <__aeabi_uldivmod>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4b61      	ldr	r3, [pc, #388]	@ (80087f8 <UART_SetConfig+0x2d4>)
 8008672:	fba3 2302 	umull	r2, r3, r3, r2
 8008676:	095b      	lsrs	r3, r3, #5
 8008678:	011c      	lsls	r4, r3, #4
 800867a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800867e:	2200      	movs	r2, #0
 8008680:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008684:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008688:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800868c:	4642      	mov	r2, r8
 800868e:	464b      	mov	r3, r9
 8008690:	1891      	adds	r1, r2, r2
 8008692:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008694:	415b      	adcs	r3, r3
 8008696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008698:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800869c:	4641      	mov	r1, r8
 800869e:	eb12 0a01 	adds.w	sl, r2, r1
 80086a2:	4649      	mov	r1, r9
 80086a4:	eb43 0b01 	adc.w	fp, r3, r1
 80086a8:	f04f 0200 	mov.w	r2, #0
 80086ac:	f04f 0300 	mov.w	r3, #0
 80086b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80086b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80086b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086bc:	4692      	mov	sl, r2
 80086be:	469b      	mov	fp, r3
 80086c0:	4643      	mov	r3, r8
 80086c2:	eb1a 0303 	adds.w	r3, sl, r3
 80086c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086ca:	464b      	mov	r3, r9
 80086cc:	eb4b 0303 	adc.w	r3, fp, r3
 80086d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80086d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80086e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80086e8:	460b      	mov	r3, r1
 80086ea:	18db      	adds	r3, r3, r3
 80086ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80086ee:	4613      	mov	r3, r2
 80086f0:	eb42 0303 	adc.w	r3, r2, r3
 80086f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80086f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80086fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80086fe:	f7f8 fac3 	bl	8000c88 <__aeabi_uldivmod>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4611      	mov	r1, r2
 8008708:	4b3b      	ldr	r3, [pc, #236]	@ (80087f8 <UART_SetConfig+0x2d4>)
 800870a:	fba3 2301 	umull	r2, r3, r3, r1
 800870e:	095b      	lsrs	r3, r3, #5
 8008710:	2264      	movs	r2, #100	@ 0x64
 8008712:	fb02 f303 	mul.w	r3, r2, r3
 8008716:	1acb      	subs	r3, r1, r3
 8008718:	00db      	lsls	r3, r3, #3
 800871a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800871e:	4b36      	ldr	r3, [pc, #216]	@ (80087f8 <UART_SetConfig+0x2d4>)
 8008720:	fba3 2302 	umull	r2, r3, r3, r2
 8008724:	095b      	lsrs	r3, r3, #5
 8008726:	005b      	lsls	r3, r3, #1
 8008728:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800872c:	441c      	add	r4, r3
 800872e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008732:	2200      	movs	r2, #0
 8008734:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008738:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800873c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008740:	4642      	mov	r2, r8
 8008742:	464b      	mov	r3, r9
 8008744:	1891      	adds	r1, r2, r2
 8008746:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008748:	415b      	adcs	r3, r3
 800874a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800874c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008750:	4641      	mov	r1, r8
 8008752:	1851      	adds	r1, r2, r1
 8008754:	6339      	str	r1, [r7, #48]	@ 0x30
 8008756:	4649      	mov	r1, r9
 8008758:	414b      	adcs	r3, r1
 800875a:	637b      	str	r3, [r7, #52]	@ 0x34
 800875c:	f04f 0200 	mov.w	r2, #0
 8008760:	f04f 0300 	mov.w	r3, #0
 8008764:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008768:	4659      	mov	r1, fp
 800876a:	00cb      	lsls	r3, r1, #3
 800876c:	4651      	mov	r1, sl
 800876e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008772:	4651      	mov	r1, sl
 8008774:	00ca      	lsls	r2, r1, #3
 8008776:	4610      	mov	r0, r2
 8008778:	4619      	mov	r1, r3
 800877a:	4603      	mov	r3, r0
 800877c:	4642      	mov	r2, r8
 800877e:	189b      	adds	r3, r3, r2
 8008780:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008784:	464b      	mov	r3, r9
 8008786:	460a      	mov	r2, r1
 8008788:	eb42 0303 	adc.w	r3, r2, r3
 800878c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800879c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80087a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80087a4:	460b      	mov	r3, r1
 80087a6:	18db      	adds	r3, r3, r3
 80087a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087aa:	4613      	mov	r3, r2
 80087ac:	eb42 0303 	adc.w	r3, r2, r3
 80087b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80087b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80087ba:	f7f8 fa65 	bl	8000c88 <__aeabi_uldivmod>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4b0d      	ldr	r3, [pc, #52]	@ (80087f8 <UART_SetConfig+0x2d4>)
 80087c4:	fba3 1302 	umull	r1, r3, r3, r2
 80087c8:	095b      	lsrs	r3, r3, #5
 80087ca:	2164      	movs	r1, #100	@ 0x64
 80087cc:	fb01 f303 	mul.w	r3, r1, r3
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	00db      	lsls	r3, r3, #3
 80087d4:	3332      	adds	r3, #50	@ 0x32
 80087d6:	4a08      	ldr	r2, [pc, #32]	@ (80087f8 <UART_SetConfig+0x2d4>)
 80087d8:	fba2 2303 	umull	r2, r3, r2, r3
 80087dc:	095b      	lsrs	r3, r3, #5
 80087de:	f003 0207 	and.w	r2, r3, #7
 80087e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4422      	add	r2, r4
 80087ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087ec:	e106      	b.n	80089fc <UART_SetConfig+0x4d8>
 80087ee:	bf00      	nop
 80087f0:	40011000 	.word	0x40011000
 80087f4:	40011400 	.word	0x40011400
 80087f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008800:	2200      	movs	r2, #0
 8008802:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008806:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800880a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800880e:	4642      	mov	r2, r8
 8008810:	464b      	mov	r3, r9
 8008812:	1891      	adds	r1, r2, r2
 8008814:	6239      	str	r1, [r7, #32]
 8008816:	415b      	adcs	r3, r3
 8008818:	627b      	str	r3, [r7, #36]	@ 0x24
 800881a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800881e:	4641      	mov	r1, r8
 8008820:	1854      	adds	r4, r2, r1
 8008822:	4649      	mov	r1, r9
 8008824:	eb43 0501 	adc.w	r5, r3, r1
 8008828:	f04f 0200 	mov.w	r2, #0
 800882c:	f04f 0300 	mov.w	r3, #0
 8008830:	00eb      	lsls	r3, r5, #3
 8008832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008836:	00e2      	lsls	r2, r4, #3
 8008838:	4614      	mov	r4, r2
 800883a:	461d      	mov	r5, r3
 800883c:	4643      	mov	r3, r8
 800883e:	18e3      	adds	r3, r4, r3
 8008840:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008844:	464b      	mov	r3, r9
 8008846:	eb45 0303 	adc.w	r3, r5, r3
 800884a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800884e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800885a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800885e:	f04f 0200 	mov.w	r2, #0
 8008862:	f04f 0300 	mov.w	r3, #0
 8008866:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800886a:	4629      	mov	r1, r5
 800886c:	008b      	lsls	r3, r1, #2
 800886e:	4621      	mov	r1, r4
 8008870:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008874:	4621      	mov	r1, r4
 8008876:	008a      	lsls	r2, r1, #2
 8008878:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800887c:	f7f8 fa04 	bl	8000c88 <__aeabi_uldivmod>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4b60      	ldr	r3, [pc, #384]	@ (8008a08 <UART_SetConfig+0x4e4>)
 8008886:	fba3 2302 	umull	r2, r3, r3, r2
 800888a:	095b      	lsrs	r3, r3, #5
 800888c:	011c      	lsls	r4, r3, #4
 800888e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008892:	2200      	movs	r2, #0
 8008894:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008898:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800889c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80088a0:	4642      	mov	r2, r8
 80088a2:	464b      	mov	r3, r9
 80088a4:	1891      	adds	r1, r2, r2
 80088a6:	61b9      	str	r1, [r7, #24]
 80088a8:	415b      	adcs	r3, r3
 80088aa:	61fb      	str	r3, [r7, #28]
 80088ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088b0:	4641      	mov	r1, r8
 80088b2:	1851      	adds	r1, r2, r1
 80088b4:	6139      	str	r1, [r7, #16]
 80088b6:	4649      	mov	r1, r9
 80088b8:	414b      	adcs	r3, r1
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	f04f 0200 	mov.w	r2, #0
 80088c0:	f04f 0300 	mov.w	r3, #0
 80088c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088c8:	4659      	mov	r1, fp
 80088ca:	00cb      	lsls	r3, r1, #3
 80088cc:	4651      	mov	r1, sl
 80088ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088d2:	4651      	mov	r1, sl
 80088d4:	00ca      	lsls	r2, r1, #3
 80088d6:	4610      	mov	r0, r2
 80088d8:	4619      	mov	r1, r3
 80088da:	4603      	mov	r3, r0
 80088dc:	4642      	mov	r2, r8
 80088de:	189b      	adds	r3, r3, r2
 80088e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088e4:	464b      	mov	r3, r9
 80088e6:	460a      	mov	r2, r1
 80088e8:	eb42 0303 	adc.w	r3, r2, r3
 80088ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80088fc:	f04f 0200 	mov.w	r2, #0
 8008900:	f04f 0300 	mov.w	r3, #0
 8008904:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008908:	4649      	mov	r1, r9
 800890a:	008b      	lsls	r3, r1, #2
 800890c:	4641      	mov	r1, r8
 800890e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008912:	4641      	mov	r1, r8
 8008914:	008a      	lsls	r2, r1, #2
 8008916:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800891a:	f7f8 f9b5 	bl	8000c88 <__aeabi_uldivmod>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	4611      	mov	r1, r2
 8008924:	4b38      	ldr	r3, [pc, #224]	@ (8008a08 <UART_SetConfig+0x4e4>)
 8008926:	fba3 2301 	umull	r2, r3, r3, r1
 800892a:	095b      	lsrs	r3, r3, #5
 800892c:	2264      	movs	r2, #100	@ 0x64
 800892e:	fb02 f303 	mul.w	r3, r2, r3
 8008932:	1acb      	subs	r3, r1, r3
 8008934:	011b      	lsls	r3, r3, #4
 8008936:	3332      	adds	r3, #50	@ 0x32
 8008938:	4a33      	ldr	r2, [pc, #204]	@ (8008a08 <UART_SetConfig+0x4e4>)
 800893a:	fba2 2303 	umull	r2, r3, r2, r3
 800893e:	095b      	lsrs	r3, r3, #5
 8008940:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008944:	441c      	add	r4, r3
 8008946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800894a:	2200      	movs	r2, #0
 800894c:	673b      	str	r3, [r7, #112]	@ 0x70
 800894e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008950:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008954:	4642      	mov	r2, r8
 8008956:	464b      	mov	r3, r9
 8008958:	1891      	adds	r1, r2, r2
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	415b      	adcs	r3, r3
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008964:	4641      	mov	r1, r8
 8008966:	1851      	adds	r1, r2, r1
 8008968:	6039      	str	r1, [r7, #0]
 800896a:	4649      	mov	r1, r9
 800896c:	414b      	adcs	r3, r1
 800896e:	607b      	str	r3, [r7, #4]
 8008970:	f04f 0200 	mov.w	r2, #0
 8008974:	f04f 0300 	mov.w	r3, #0
 8008978:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800897c:	4659      	mov	r1, fp
 800897e:	00cb      	lsls	r3, r1, #3
 8008980:	4651      	mov	r1, sl
 8008982:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008986:	4651      	mov	r1, sl
 8008988:	00ca      	lsls	r2, r1, #3
 800898a:	4610      	mov	r0, r2
 800898c:	4619      	mov	r1, r3
 800898e:	4603      	mov	r3, r0
 8008990:	4642      	mov	r2, r8
 8008992:	189b      	adds	r3, r3, r2
 8008994:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008996:	464b      	mov	r3, r9
 8008998:	460a      	mov	r2, r1
 800899a:	eb42 0303 	adc.w	r3, r2, r3
 800899e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80089a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80089aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80089ac:	f04f 0200 	mov.w	r2, #0
 80089b0:	f04f 0300 	mov.w	r3, #0
 80089b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80089b8:	4649      	mov	r1, r9
 80089ba:	008b      	lsls	r3, r1, #2
 80089bc:	4641      	mov	r1, r8
 80089be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089c2:	4641      	mov	r1, r8
 80089c4:	008a      	lsls	r2, r1, #2
 80089c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80089ca:	f7f8 f95d 	bl	8000c88 <__aeabi_uldivmod>
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008a08 <UART_SetConfig+0x4e4>)
 80089d4:	fba3 1302 	umull	r1, r3, r3, r2
 80089d8:	095b      	lsrs	r3, r3, #5
 80089da:	2164      	movs	r1, #100	@ 0x64
 80089dc:	fb01 f303 	mul.w	r3, r1, r3
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	011b      	lsls	r3, r3, #4
 80089e4:	3332      	adds	r3, #50	@ 0x32
 80089e6:	4a08      	ldr	r2, [pc, #32]	@ (8008a08 <UART_SetConfig+0x4e4>)
 80089e8:	fba2 2303 	umull	r2, r3, r2, r3
 80089ec:	095b      	lsrs	r3, r3, #5
 80089ee:	f003 020f 	and.w	r2, r3, #15
 80089f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4422      	add	r2, r4
 80089fa:	609a      	str	r2, [r3, #8]
}
 80089fc:	bf00      	nop
 80089fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008a02:	46bd      	mov	sp, r7
 8008a04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a08:	51eb851f 	.word	0x51eb851f

08008a0c <LL_GPIO_SetPinMode>:
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b089      	sub	sp, #36	@ 0x24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	fa93 f3a3 	rbit	r3, r3
 8008a26:	613b      	str	r3, [r7, #16]
  return result;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	fab3 f383 	clz	r3, r3
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	005b      	lsls	r3, r3, #1
 8008a32:	2103      	movs	r1, #3
 8008a34:	fa01 f303 	lsl.w	r3, r1, r3
 8008a38:	43db      	mvns	r3, r3
 8008a3a:	401a      	ands	r2, r3
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	fa93 f3a3 	rbit	r3, r3
 8008a46:	61bb      	str	r3, [r7, #24]
  return result;
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	fab3 f383 	clz	r3, r3
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	005b      	lsls	r3, r3, #1
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	fa01 f303 	lsl.w	r3, r1, r3
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	601a      	str	r2, [r3, #0]
}
 8008a5e:	bf00      	nop
 8008a60:	3724      	adds	r7, #36	@ 0x24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <LL_GPIO_SetPinOutputType>:
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b085      	sub	sp, #20
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	60f8      	str	r0, [r7, #12]
 8008a72:	60b9      	str	r1, [r7, #8]
 8008a74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	685a      	ldr	r2, [r3, #4]
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	43db      	mvns	r3, r3
 8008a7e:	401a      	ands	r2, r3
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	6879      	ldr	r1, [r7, #4]
 8008a84:	fb01 f303 	mul.w	r3, r1, r3
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	605a      	str	r2, [r3, #4]
}
 8008a8e:	bf00      	nop
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <LL_GPIO_SetPinSpeed>:
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b089      	sub	sp, #36	@ 0x24
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	60f8      	str	r0, [r7, #12]
 8008aa2:	60b9      	str	r1, [r7, #8]
 8008aa4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	689a      	ldr	r2, [r3, #8]
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	fa93 f3a3 	rbit	r3, r3
 8008ab4:	613b      	str	r3, [r7, #16]
  return result;
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	fab3 f383 	clz	r3, r3
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	005b      	lsls	r3, r3, #1
 8008ac0:	2103      	movs	r1, #3
 8008ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ac6:	43db      	mvns	r3, r3
 8008ac8:	401a      	ands	r2, r3
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	fa93 f3a3 	rbit	r3, r3
 8008ad4:	61bb      	str	r3, [r7, #24]
  return result;
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	fab3 f383 	clz	r3, r3
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	005b      	lsls	r3, r3, #1
 8008ae0:	6879      	ldr	r1, [r7, #4]
 8008ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	609a      	str	r2, [r3, #8]
}
 8008aec:	bf00      	nop
 8008aee:	3724      	adds	r7, #36	@ 0x24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <LL_GPIO_SetPinPull>:
{
 8008af8:	b480      	push	{r7}
 8008afa:	b089      	sub	sp, #36	@ 0x24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	68da      	ldr	r2, [r3, #12]
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	fa93 f3a3 	rbit	r3, r3
 8008b12:	613b      	str	r3, [r7, #16]
  return result;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	fab3 f383 	clz	r3, r3
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	2103      	movs	r1, #3
 8008b20:	fa01 f303 	lsl.w	r3, r1, r3
 8008b24:	43db      	mvns	r3, r3
 8008b26:	401a      	ands	r2, r3
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	fa93 f3a3 	rbit	r3, r3
 8008b32:	61bb      	str	r3, [r7, #24]
  return result;
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	fab3 f383 	clz	r3, r3
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	005b      	lsls	r3, r3, #1
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	fa01 f303 	lsl.w	r3, r1, r3
 8008b44:	431a      	orrs	r2, r3
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	60da      	str	r2, [r3, #12]
}
 8008b4a:	bf00      	nop
 8008b4c:	3724      	adds	r7, #36	@ 0x24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <LL_GPIO_SetAFPin_0_7>:
{
 8008b56:	b480      	push	{r7}
 8008b58:	b089      	sub	sp, #36	@ 0x24
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	60f8      	str	r0, [r7, #12]
 8008b5e:	60b9      	str	r1, [r7, #8]
 8008b60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6a1a      	ldr	r2, [r3, #32]
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	fa93 f3a3 	rbit	r3, r3
 8008b70:	613b      	str	r3, [r7, #16]
  return result;
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	fab3 f383 	clz	r3, r3
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	210f      	movs	r1, #15
 8008b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b82:	43db      	mvns	r3, r3
 8008b84:	401a      	ands	r2, r3
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	fa93 f3a3 	rbit	r3, r3
 8008b90:	61bb      	str	r3, [r7, #24]
  return result;
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	fab3 f383 	clz	r3, r3
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	6879      	ldr	r1, [r7, #4]
 8008b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	621a      	str	r2, [r3, #32]
}
 8008ba8:	bf00      	nop
 8008baa:	3724      	adds	r7, #36	@ 0x24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <LL_GPIO_SetAFPin_8_15>:
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b089      	sub	sp, #36	@ 0x24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	0a1b      	lsrs	r3, r3, #8
 8008bc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	fa93 f3a3 	rbit	r3, r3
 8008bd0:	613b      	str	r3, [r7, #16]
  return result;
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	fab3 f383 	clz	r3, r3
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	210f      	movs	r1, #15
 8008bde:	fa01 f303 	lsl.w	r3, r1, r3
 8008be2:	43db      	mvns	r3, r3
 8008be4:	401a      	ands	r2, r3
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	0a1b      	lsrs	r3, r3, #8
 8008bea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	fa93 f3a3 	rbit	r3, r3
 8008bf2:	61bb      	str	r3, [r7, #24]
  return result;
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	fab3 f383 	clz	r3, r3
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	6879      	ldr	r1, [r7, #4]
 8008c00:	fa01 f303 	lsl.w	r3, r1, r3
 8008c04:	431a      	orrs	r2, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008c0a:	bf00      	nop
 8008c0c:	3724      	adds	r7, #36	@ 0x24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b088      	sub	sp, #32
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8008c20:	2300      	movs	r3, #0
 8008c22:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	fa93 f3a3 	rbit	r3, r3
 8008c34:	613b      	str	r3, [r7, #16]
  return result;
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	fab3 f383 	clz	r3, r3
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008c40:	e050      	b.n	8008ce4 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	2101      	movs	r1, #1
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c4e:	4013      	ands	r3, r2
 8008c50:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d042      	beq.n	8008cde <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d003      	beq.n	8008c68 <LL_GPIO_Init+0x52>
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d10d      	bne.n	8008c84 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	69b9      	ldr	r1, [r7, #24]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7ff ff12 	bl	8008a9a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	69b9      	ldr	r1, [r7, #24]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7ff fef3 	bl	8008a6a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	69b9      	ldr	r1, [r7, #24]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7ff ff33 	bl	8008af8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d11a      	bne.n	8008cd0 <LL_GPIO_Init+0xba>
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	fa93 f3a3 	rbit	r3, r3
 8008ca4:	60bb      	str	r3, [r7, #8]
  return result;
 8008ca6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8008ca8:	fab3 f383 	clz	r3, r3
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b07      	cmp	r3, #7
 8008cb0:	d807      	bhi.n	8008cc2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	69b9      	ldr	r1, [r7, #24]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7ff ff4b 	bl	8008b56 <LL_GPIO_SetAFPin_0_7>
 8008cc0:	e006      	b.n	8008cd0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	69b9      	ldr	r1, [r7, #24]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff ff72 	bl	8008bb4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	69b9      	ldr	r1, [r7, #24]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff fe97 	bl	8008a0c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	fa22 f303 	lsr.w	r3, r2, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1a7      	bne.n	8008c42 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3720      	adds	r7, #32
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <LL_SPI_IsEnabled>:
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d0c:	2b40      	cmp	r3, #64	@ 0x40
 8008d0e:	d101      	bne.n	8008d14 <LL_SPI_IsEnabled+0x18>
 8008d10:	2301      	movs	r3, #1
 8008d12:	e000      	b.n	8008d16 <LL_SPI_IsEnabled+0x1a>
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <LL_SPI_SetCRCPolynomial>:
{
 8008d22:	b480      	push	{r7}
 8008d24:	b083      	sub	sp, #12
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	461a      	mov	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	611a      	str	r2, [r3, #16]
}
 8008d36:	bf00      	nop
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b084      	sub	sp, #16
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff ffd3 	bl	8008cfc <LL_SPI_IsEnabled>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d139      	bne.n	8008dd0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d64:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8008d68:	683a      	ldr	r2, [r7, #0]
 8008d6a:	6811      	ldr	r1, [r2, #0]
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	6852      	ldr	r2, [r2, #4]
 8008d70:	4311      	orrs	r1, r2
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	6892      	ldr	r2, [r2, #8]
 8008d76:	4311      	orrs	r1, r2
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	68d2      	ldr	r2, [r2, #12]
 8008d7c:	4311      	orrs	r1, r2
 8008d7e:	683a      	ldr	r2, [r7, #0]
 8008d80:	6912      	ldr	r2, [r2, #16]
 8008d82:	4311      	orrs	r1, r2
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	6952      	ldr	r2, [r2, #20]
 8008d88:	4311      	orrs	r1, r2
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	6992      	ldr	r2, [r2, #24]
 8008d8e:	4311      	orrs	r1, r2
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	69d2      	ldr	r2, [r2, #28]
 8008d94:	4311      	orrs	r1, r2
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	6a12      	ldr	r2, [r2, #32]
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	431a      	orrs	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	f023 0204 	bic.w	r2, r3, #4
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	0c1b      	lsrs	r3, r3, #16
 8008db0:	431a      	orrs	r2, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dbe:	d105      	bne.n	8008dcc <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff ffab 	bl	8008d22 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	69db      	ldr	r3, [r3, #28]
 8008dd4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	61da      	str	r2, [r3, #28]
  return status;
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <sulp>:
 8008de6:	b570      	push	{r4, r5, r6, lr}
 8008de8:	4604      	mov	r4, r0
 8008dea:	460d      	mov	r5, r1
 8008dec:	ec45 4b10 	vmov	d0, r4, r5
 8008df0:	4616      	mov	r6, r2
 8008df2:	f002 f877 	bl	800aee4 <__ulp>
 8008df6:	ec51 0b10 	vmov	r0, r1, d0
 8008dfa:	b17e      	cbz	r6, 8008e1c <sulp+0x36>
 8008dfc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	dd09      	ble.n	8008e1c <sulp+0x36>
 8008e08:	051b      	lsls	r3, r3, #20
 8008e0a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008e0e:	2400      	movs	r4, #0
 8008e10:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008e14:	4622      	mov	r2, r4
 8008e16:	462b      	mov	r3, r5
 8008e18:	f7f7 fbee 	bl	80005f8 <__aeabi_dmul>
 8008e1c:	ec41 0b10 	vmov	d0, r0, r1
 8008e20:	bd70      	pop	{r4, r5, r6, pc}
 8008e22:	0000      	movs	r0, r0
 8008e24:	0000      	movs	r0, r0
	...

08008e28 <_strtod_l>:
 8008e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	b09f      	sub	sp, #124	@ 0x7c
 8008e2e:	460c      	mov	r4, r1
 8008e30:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008e32:	2200      	movs	r2, #0
 8008e34:	921a      	str	r2, [sp, #104]	@ 0x68
 8008e36:	9005      	str	r0, [sp, #20]
 8008e38:	f04f 0a00 	mov.w	sl, #0
 8008e3c:	f04f 0b00 	mov.w	fp, #0
 8008e40:	460a      	mov	r2, r1
 8008e42:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e44:	7811      	ldrb	r1, [r2, #0]
 8008e46:	292b      	cmp	r1, #43	@ 0x2b
 8008e48:	d04a      	beq.n	8008ee0 <_strtod_l+0xb8>
 8008e4a:	d838      	bhi.n	8008ebe <_strtod_l+0x96>
 8008e4c:	290d      	cmp	r1, #13
 8008e4e:	d832      	bhi.n	8008eb6 <_strtod_l+0x8e>
 8008e50:	2908      	cmp	r1, #8
 8008e52:	d832      	bhi.n	8008eba <_strtod_l+0x92>
 8008e54:	2900      	cmp	r1, #0
 8008e56:	d03b      	beq.n	8008ed0 <_strtod_l+0xa8>
 8008e58:	2200      	movs	r2, #0
 8008e5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008e5c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008e5e:	782a      	ldrb	r2, [r5, #0]
 8008e60:	2a30      	cmp	r2, #48	@ 0x30
 8008e62:	f040 80b3 	bne.w	8008fcc <_strtod_l+0x1a4>
 8008e66:	786a      	ldrb	r2, [r5, #1]
 8008e68:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008e6c:	2a58      	cmp	r2, #88	@ 0x58
 8008e6e:	d16e      	bne.n	8008f4e <_strtod_l+0x126>
 8008e70:	9302      	str	r3, [sp, #8]
 8008e72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e74:	9301      	str	r3, [sp, #4]
 8008e76:	ab1a      	add	r3, sp, #104	@ 0x68
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	4a8e      	ldr	r2, [pc, #568]	@ (80090b4 <_strtod_l+0x28c>)
 8008e7c:	9805      	ldr	r0, [sp, #20]
 8008e7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008e80:	a919      	add	r1, sp, #100	@ 0x64
 8008e82:	f001 f929 	bl	800a0d8 <__gethex>
 8008e86:	f010 060f 	ands.w	r6, r0, #15
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	d005      	beq.n	8008e9a <_strtod_l+0x72>
 8008e8e:	2e06      	cmp	r6, #6
 8008e90:	d128      	bne.n	8008ee4 <_strtod_l+0xbc>
 8008e92:	3501      	adds	r5, #1
 8008e94:	2300      	movs	r3, #0
 8008e96:	9519      	str	r5, [sp, #100]	@ 0x64
 8008e98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f040 858e 	bne.w	80099be <_strtod_l+0xb96>
 8008ea2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ea4:	b1cb      	cbz	r3, 8008eda <_strtod_l+0xb2>
 8008ea6:	4652      	mov	r2, sl
 8008ea8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008eac:	ec43 2b10 	vmov	d0, r2, r3
 8008eb0:	b01f      	add	sp, #124	@ 0x7c
 8008eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb6:	2920      	cmp	r1, #32
 8008eb8:	d1ce      	bne.n	8008e58 <_strtod_l+0x30>
 8008eba:	3201      	adds	r2, #1
 8008ebc:	e7c1      	b.n	8008e42 <_strtod_l+0x1a>
 8008ebe:	292d      	cmp	r1, #45	@ 0x2d
 8008ec0:	d1ca      	bne.n	8008e58 <_strtod_l+0x30>
 8008ec2:	2101      	movs	r1, #1
 8008ec4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008ec6:	1c51      	adds	r1, r2, #1
 8008ec8:	9119      	str	r1, [sp, #100]	@ 0x64
 8008eca:	7852      	ldrb	r2, [r2, #1]
 8008ecc:	2a00      	cmp	r2, #0
 8008ece:	d1c5      	bne.n	8008e5c <_strtod_l+0x34>
 8008ed0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ed2:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f040 8570 	bne.w	80099ba <_strtod_l+0xb92>
 8008eda:	4652      	mov	r2, sl
 8008edc:	465b      	mov	r3, fp
 8008ede:	e7e5      	b.n	8008eac <_strtod_l+0x84>
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	e7ef      	b.n	8008ec4 <_strtod_l+0x9c>
 8008ee4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008ee6:	b13a      	cbz	r2, 8008ef8 <_strtod_l+0xd0>
 8008ee8:	2135      	movs	r1, #53	@ 0x35
 8008eea:	a81c      	add	r0, sp, #112	@ 0x70
 8008eec:	f002 f8f4 	bl	800b0d8 <__copybits>
 8008ef0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ef2:	9805      	ldr	r0, [sp, #20]
 8008ef4:	f001 fcc2 	bl	800a87c <_Bfree>
 8008ef8:	3e01      	subs	r6, #1
 8008efa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008efc:	2e04      	cmp	r6, #4
 8008efe:	d806      	bhi.n	8008f0e <_strtod_l+0xe6>
 8008f00:	e8df f006 	tbb	[pc, r6]
 8008f04:	201d0314 	.word	0x201d0314
 8008f08:	14          	.byte	0x14
 8008f09:	00          	.byte	0x00
 8008f0a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008f0e:	05e1      	lsls	r1, r4, #23
 8008f10:	bf48      	it	mi
 8008f12:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008f16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f1a:	0d1b      	lsrs	r3, r3, #20
 8008f1c:	051b      	lsls	r3, r3, #20
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1bb      	bne.n	8008e9a <_strtod_l+0x72>
 8008f22:	f000 ffdb 	bl	8009edc <__errno>
 8008f26:	2322      	movs	r3, #34	@ 0x22
 8008f28:	6003      	str	r3, [r0, #0]
 8008f2a:	e7b6      	b.n	8008e9a <_strtod_l+0x72>
 8008f2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008f30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008f34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008f38:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008f3c:	e7e7      	b.n	8008f0e <_strtod_l+0xe6>
 8008f3e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80090bc <_strtod_l+0x294>
 8008f42:	e7e4      	b.n	8008f0e <_strtod_l+0xe6>
 8008f44:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008f48:	f04f 3aff 	mov.w	sl, #4294967295
 8008f4c:	e7df      	b.n	8008f0e <_strtod_l+0xe6>
 8008f4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f50:	1c5a      	adds	r2, r3, #1
 8008f52:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f54:	785b      	ldrb	r3, [r3, #1]
 8008f56:	2b30      	cmp	r3, #48	@ 0x30
 8008f58:	d0f9      	beq.n	8008f4e <_strtod_l+0x126>
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d09d      	beq.n	8008e9a <_strtod_l+0x72>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f64:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f66:	2300      	movs	r3, #0
 8008f68:	9308      	str	r3, [sp, #32]
 8008f6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f6c:	461f      	mov	r7, r3
 8008f6e:	220a      	movs	r2, #10
 8008f70:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008f72:	7805      	ldrb	r5, [r0, #0]
 8008f74:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008f78:	b2d9      	uxtb	r1, r3
 8008f7a:	2909      	cmp	r1, #9
 8008f7c:	d928      	bls.n	8008fd0 <_strtod_l+0x1a8>
 8008f7e:	494e      	ldr	r1, [pc, #312]	@ (80090b8 <_strtod_l+0x290>)
 8008f80:	2201      	movs	r2, #1
 8008f82:	f000 ff53 	bl	8009e2c <strncmp>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d032      	beq.n	8008ff0 <_strtod_l+0x1c8>
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	462a      	mov	r2, r5
 8008f8e:	4681      	mov	r9, r0
 8008f90:	463d      	mov	r5, r7
 8008f92:	4603      	mov	r3, r0
 8008f94:	2a65      	cmp	r2, #101	@ 0x65
 8008f96:	d001      	beq.n	8008f9c <_strtod_l+0x174>
 8008f98:	2a45      	cmp	r2, #69	@ 0x45
 8008f9a:	d114      	bne.n	8008fc6 <_strtod_l+0x19e>
 8008f9c:	b91d      	cbnz	r5, 8008fa6 <_strtod_l+0x17e>
 8008f9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fa0:	4302      	orrs	r2, r0
 8008fa2:	d095      	beq.n	8008ed0 <_strtod_l+0xa8>
 8008fa4:	2500      	movs	r5, #0
 8008fa6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008fa8:	1c62      	adds	r2, r4, #1
 8008faa:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fac:	7862      	ldrb	r2, [r4, #1]
 8008fae:	2a2b      	cmp	r2, #43	@ 0x2b
 8008fb0:	d077      	beq.n	80090a2 <_strtod_l+0x27a>
 8008fb2:	2a2d      	cmp	r2, #45	@ 0x2d
 8008fb4:	d07b      	beq.n	80090ae <_strtod_l+0x286>
 8008fb6:	f04f 0c00 	mov.w	ip, #0
 8008fba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008fbe:	2909      	cmp	r1, #9
 8008fc0:	f240 8082 	bls.w	80090c8 <_strtod_l+0x2a0>
 8008fc4:	9419      	str	r4, [sp, #100]	@ 0x64
 8008fc6:	f04f 0800 	mov.w	r8, #0
 8008fca:	e0a2      	b.n	8009112 <_strtod_l+0x2ea>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	e7c7      	b.n	8008f60 <_strtod_l+0x138>
 8008fd0:	2f08      	cmp	r7, #8
 8008fd2:	bfd5      	itete	le
 8008fd4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008fd6:	9908      	ldrgt	r1, [sp, #32]
 8008fd8:	fb02 3301 	mlale	r3, r2, r1, r3
 8008fdc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008fe0:	f100 0001 	add.w	r0, r0, #1
 8008fe4:	bfd4      	ite	le
 8008fe6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008fe8:	9308      	strgt	r3, [sp, #32]
 8008fea:	3701      	adds	r7, #1
 8008fec:	9019      	str	r0, [sp, #100]	@ 0x64
 8008fee:	e7bf      	b.n	8008f70 <_strtod_l+0x148>
 8008ff0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ff2:	1c5a      	adds	r2, r3, #1
 8008ff4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ff6:	785a      	ldrb	r2, [r3, #1]
 8008ff8:	b37f      	cbz	r7, 800905a <_strtod_l+0x232>
 8008ffa:	4681      	mov	r9, r0
 8008ffc:	463d      	mov	r5, r7
 8008ffe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009002:	2b09      	cmp	r3, #9
 8009004:	d912      	bls.n	800902c <_strtod_l+0x204>
 8009006:	2301      	movs	r3, #1
 8009008:	e7c4      	b.n	8008f94 <_strtod_l+0x16c>
 800900a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800900c:	1c5a      	adds	r2, r3, #1
 800900e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009010:	785a      	ldrb	r2, [r3, #1]
 8009012:	3001      	adds	r0, #1
 8009014:	2a30      	cmp	r2, #48	@ 0x30
 8009016:	d0f8      	beq.n	800900a <_strtod_l+0x1e2>
 8009018:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800901c:	2b08      	cmp	r3, #8
 800901e:	f200 84d3 	bhi.w	80099c8 <_strtod_l+0xba0>
 8009022:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009024:	930c      	str	r3, [sp, #48]	@ 0x30
 8009026:	4681      	mov	r9, r0
 8009028:	2000      	movs	r0, #0
 800902a:	4605      	mov	r5, r0
 800902c:	3a30      	subs	r2, #48	@ 0x30
 800902e:	f100 0301 	add.w	r3, r0, #1
 8009032:	d02a      	beq.n	800908a <_strtod_l+0x262>
 8009034:	4499      	add	r9, r3
 8009036:	eb00 0c05 	add.w	ip, r0, r5
 800903a:	462b      	mov	r3, r5
 800903c:	210a      	movs	r1, #10
 800903e:	4563      	cmp	r3, ip
 8009040:	d10d      	bne.n	800905e <_strtod_l+0x236>
 8009042:	1c69      	adds	r1, r5, #1
 8009044:	4401      	add	r1, r0
 8009046:	4428      	add	r0, r5
 8009048:	2808      	cmp	r0, #8
 800904a:	dc16      	bgt.n	800907a <_strtod_l+0x252>
 800904c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800904e:	230a      	movs	r3, #10
 8009050:	fb03 2300 	mla	r3, r3, r0, r2
 8009054:	930a      	str	r3, [sp, #40]	@ 0x28
 8009056:	2300      	movs	r3, #0
 8009058:	e018      	b.n	800908c <_strtod_l+0x264>
 800905a:	4638      	mov	r0, r7
 800905c:	e7da      	b.n	8009014 <_strtod_l+0x1ec>
 800905e:	2b08      	cmp	r3, #8
 8009060:	f103 0301 	add.w	r3, r3, #1
 8009064:	dc03      	bgt.n	800906e <_strtod_l+0x246>
 8009066:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009068:	434e      	muls	r6, r1
 800906a:	960a      	str	r6, [sp, #40]	@ 0x28
 800906c:	e7e7      	b.n	800903e <_strtod_l+0x216>
 800906e:	2b10      	cmp	r3, #16
 8009070:	bfde      	ittt	le
 8009072:	9e08      	ldrle	r6, [sp, #32]
 8009074:	434e      	mulle	r6, r1
 8009076:	9608      	strle	r6, [sp, #32]
 8009078:	e7e1      	b.n	800903e <_strtod_l+0x216>
 800907a:	280f      	cmp	r0, #15
 800907c:	dceb      	bgt.n	8009056 <_strtod_l+0x22e>
 800907e:	9808      	ldr	r0, [sp, #32]
 8009080:	230a      	movs	r3, #10
 8009082:	fb03 2300 	mla	r3, r3, r0, r2
 8009086:	9308      	str	r3, [sp, #32]
 8009088:	e7e5      	b.n	8009056 <_strtod_l+0x22e>
 800908a:	4629      	mov	r1, r5
 800908c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800908e:	1c50      	adds	r0, r2, #1
 8009090:	9019      	str	r0, [sp, #100]	@ 0x64
 8009092:	7852      	ldrb	r2, [r2, #1]
 8009094:	4618      	mov	r0, r3
 8009096:	460d      	mov	r5, r1
 8009098:	e7b1      	b.n	8008ffe <_strtod_l+0x1d6>
 800909a:	f04f 0900 	mov.w	r9, #0
 800909e:	2301      	movs	r3, #1
 80090a0:	e77d      	b.n	8008f9e <_strtod_l+0x176>
 80090a2:	f04f 0c00 	mov.w	ip, #0
 80090a6:	1ca2      	adds	r2, r4, #2
 80090a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80090aa:	78a2      	ldrb	r2, [r4, #2]
 80090ac:	e785      	b.n	8008fba <_strtod_l+0x192>
 80090ae:	f04f 0c01 	mov.w	ip, #1
 80090b2:	e7f8      	b.n	80090a6 <_strtod_l+0x27e>
 80090b4:	0800d7d4 	.word	0x0800d7d4
 80090b8:	0800d7b0 	.word	0x0800d7b0
 80090bc:	7ff00000 	.word	0x7ff00000
 80090c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090c2:	1c51      	adds	r1, r2, #1
 80090c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80090c6:	7852      	ldrb	r2, [r2, #1]
 80090c8:	2a30      	cmp	r2, #48	@ 0x30
 80090ca:	d0f9      	beq.n	80090c0 <_strtod_l+0x298>
 80090cc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80090d0:	2908      	cmp	r1, #8
 80090d2:	f63f af78 	bhi.w	8008fc6 <_strtod_l+0x19e>
 80090d6:	3a30      	subs	r2, #48	@ 0x30
 80090d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80090da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80090de:	f04f 080a 	mov.w	r8, #10
 80090e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090e4:	1c56      	adds	r6, r2, #1
 80090e6:	9619      	str	r6, [sp, #100]	@ 0x64
 80090e8:	7852      	ldrb	r2, [r2, #1]
 80090ea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80090ee:	f1be 0f09 	cmp.w	lr, #9
 80090f2:	d939      	bls.n	8009168 <_strtod_l+0x340>
 80090f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80090f6:	1a76      	subs	r6, r6, r1
 80090f8:	2e08      	cmp	r6, #8
 80090fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80090fe:	dc03      	bgt.n	8009108 <_strtod_l+0x2e0>
 8009100:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009102:	4588      	cmp	r8, r1
 8009104:	bfa8      	it	ge
 8009106:	4688      	movge	r8, r1
 8009108:	f1bc 0f00 	cmp.w	ip, #0
 800910c:	d001      	beq.n	8009112 <_strtod_l+0x2ea>
 800910e:	f1c8 0800 	rsb	r8, r8, #0
 8009112:	2d00      	cmp	r5, #0
 8009114:	d14e      	bne.n	80091b4 <_strtod_l+0x38c>
 8009116:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009118:	4308      	orrs	r0, r1
 800911a:	f47f aebe 	bne.w	8008e9a <_strtod_l+0x72>
 800911e:	2b00      	cmp	r3, #0
 8009120:	f47f aed6 	bne.w	8008ed0 <_strtod_l+0xa8>
 8009124:	2a69      	cmp	r2, #105	@ 0x69
 8009126:	d028      	beq.n	800917a <_strtod_l+0x352>
 8009128:	dc25      	bgt.n	8009176 <_strtod_l+0x34e>
 800912a:	2a49      	cmp	r2, #73	@ 0x49
 800912c:	d025      	beq.n	800917a <_strtod_l+0x352>
 800912e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009130:	f47f aece 	bne.w	8008ed0 <_strtod_l+0xa8>
 8009134:	499b      	ldr	r1, [pc, #620]	@ (80093a4 <_strtod_l+0x57c>)
 8009136:	a819      	add	r0, sp, #100	@ 0x64
 8009138:	f001 f9f0 	bl	800a51c <__match>
 800913c:	2800      	cmp	r0, #0
 800913e:	f43f aec7 	beq.w	8008ed0 <_strtod_l+0xa8>
 8009142:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2b28      	cmp	r3, #40	@ 0x28
 8009148:	d12e      	bne.n	80091a8 <_strtod_l+0x380>
 800914a:	4997      	ldr	r1, [pc, #604]	@ (80093a8 <_strtod_l+0x580>)
 800914c:	aa1c      	add	r2, sp, #112	@ 0x70
 800914e:	a819      	add	r0, sp, #100	@ 0x64
 8009150:	f001 f9f8 	bl	800a544 <__hexnan>
 8009154:	2805      	cmp	r0, #5
 8009156:	d127      	bne.n	80091a8 <_strtod_l+0x380>
 8009158:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800915a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800915e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009162:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009166:	e698      	b.n	8008e9a <_strtod_l+0x72>
 8009168:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800916a:	fb08 2101 	mla	r1, r8, r1, r2
 800916e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009172:	920e      	str	r2, [sp, #56]	@ 0x38
 8009174:	e7b5      	b.n	80090e2 <_strtod_l+0x2ba>
 8009176:	2a6e      	cmp	r2, #110	@ 0x6e
 8009178:	e7da      	b.n	8009130 <_strtod_l+0x308>
 800917a:	498c      	ldr	r1, [pc, #560]	@ (80093ac <_strtod_l+0x584>)
 800917c:	a819      	add	r0, sp, #100	@ 0x64
 800917e:	f001 f9cd 	bl	800a51c <__match>
 8009182:	2800      	cmp	r0, #0
 8009184:	f43f aea4 	beq.w	8008ed0 <_strtod_l+0xa8>
 8009188:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800918a:	4989      	ldr	r1, [pc, #548]	@ (80093b0 <_strtod_l+0x588>)
 800918c:	3b01      	subs	r3, #1
 800918e:	a819      	add	r0, sp, #100	@ 0x64
 8009190:	9319      	str	r3, [sp, #100]	@ 0x64
 8009192:	f001 f9c3 	bl	800a51c <__match>
 8009196:	b910      	cbnz	r0, 800919e <_strtod_l+0x376>
 8009198:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800919a:	3301      	adds	r3, #1
 800919c:	9319      	str	r3, [sp, #100]	@ 0x64
 800919e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80093c0 <_strtod_l+0x598>
 80091a2:	f04f 0a00 	mov.w	sl, #0
 80091a6:	e678      	b.n	8008e9a <_strtod_l+0x72>
 80091a8:	4882      	ldr	r0, [pc, #520]	@ (80093b4 <_strtod_l+0x58c>)
 80091aa:	f000 fed5 	bl	8009f58 <nan>
 80091ae:	ec5b ab10 	vmov	sl, fp, d0
 80091b2:	e672      	b.n	8008e9a <_strtod_l+0x72>
 80091b4:	eba8 0309 	sub.w	r3, r8, r9
 80091b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80091ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80091bc:	2f00      	cmp	r7, #0
 80091be:	bf08      	it	eq
 80091c0:	462f      	moveq	r7, r5
 80091c2:	2d10      	cmp	r5, #16
 80091c4:	462c      	mov	r4, r5
 80091c6:	bfa8      	it	ge
 80091c8:	2410      	movge	r4, #16
 80091ca:	f7f7 f99b 	bl	8000504 <__aeabi_ui2d>
 80091ce:	2d09      	cmp	r5, #9
 80091d0:	4682      	mov	sl, r0
 80091d2:	468b      	mov	fp, r1
 80091d4:	dc13      	bgt.n	80091fe <_strtod_l+0x3d6>
 80091d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f43f ae5e 	beq.w	8008e9a <_strtod_l+0x72>
 80091de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091e0:	dd78      	ble.n	80092d4 <_strtod_l+0x4ac>
 80091e2:	2b16      	cmp	r3, #22
 80091e4:	dc5f      	bgt.n	80092a6 <_strtod_l+0x47e>
 80091e6:	4974      	ldr	r1, [pc, #464]	@ (80093b8 <_strtod_l+0x590>)
 80091e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80091ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091f0:	4652      	mov	r2, sl
 80091f2:	465b      	mov	r3, fp
 80091f4:	f7f7 fa00 	bl	80005f8 <__aeabi_dmul>
 80091f8:	4682      	mov	sl, r0
 80091fa:	468b      	mov	fp, r1
 80091fc:	e64d      	b.n	8008e9a <_strtod_l+0x72>
 80091fe:	4b6e      	ldr	r3, [pc, #440]	@ (80093b8 <_strtod_l+0x590>)
 8009200:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009204:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009208:	f7f7 f9f6 	bl	80005f8 <__aeabi_dmul>
 800920c:	4682      	mov	sl, r0
 800920e:	9808      	ldr	r0, [sp, #32]
 8009210:	468b      	mov	fp, r1
 8009212:	f7f7 f977 	bl	8000504 <__aeabi_ui2d>
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	4650      	mov	r0, sl
 800921c:	4659      	mov	r1, fp
 800921e:	f7f7 f835 	bl	800028c <__adddf3>
 8009222:	2d0f      	cmp	r5, #15
 8009224:	4682      	mov	sl, r0
 8009226:	468b      	mov	fp, r1
 8009228:	ddd5      	ble.n	80091d6 <_strtod_l+0x3ae>
 800922a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800922c:	1b2c      	subs	r4, r5, r4
 800922e:	441c      	add	r4, r3
 8009230:	2c00      	cmp	r4, #0
 8009232:	f340 8096 	ble.w	8009362 <_strtod_l+0x53a>
 8009236:	f014 030f 	ands.w	r3, r4, #15
 800923a:	d00a      	beq.n	8009252 <_strtod_l+0x42a>
 800923c:	495e      	ldr	r1, [pc, #376]	@ (80093b8 <_strtod_l+0x590>)
 800923e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009242:	4652      	mov	r2, sl
 8009244:	465b      	mov	r3, fp
 8009246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800924a:	f7f7 f9d5 	bl	80005f8 <__aeabi_dmul>
 800924e:	4682      	mov	sl, r0
 8009250:	468b      	mov	fp, r1
 8009252:	f034 040f 	bics.w	r4, r4, #15
 8009256:	d073      	beq.n	8009340 <_strtod_l+0x518>
 8009258:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800925c:	dd48      	ble.n	80092f0 <_strtod_l+0x4c8>
 800925e:	2400      	movs	r4, #0
 8009260:	46a0      	mov	r8, r4
 8009262:	940a      	str	r4, [sp, #40]	@ 0x28
 8009264:	46a1      	mov	r9, r4
 8009266:	9a05      	ldr	r2, [sp, #20]
 8009268:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80093c0 <_strtod_l+0x598>
 800926c:	2322      	movs	r3, #34	@ 0x22
 800926e:	6013      	str	r3, [r2, #0]
 8009270:	f04f 0a00 	mov.w	sl, #0
 8009274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009276:	2b00      	cmp	r3, #0
 8009278:	f43f ae0f 	beq.w	8008e9a <_strtod_l+0x72>
 800927c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800927e:	9805      	ldr	r0, [sp, #20]
 8009280:	f001 fafc 	bl	800a87c <_Bfree>
 8009284:	9805      	ldr	r0, [sp, #20]
 8009286:	4649      	mov	r1, r9
 8009288:	f001 faf8 	bl	800a87c <_Bfree>
 800928c:	9805      	ldr	r0, [sp, #20]
 800928e:	4641      	mov	r1, r8
 8009290:	f001 faf4 	bl	800a87c <_Bfree>
 8009294:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009296:	9805      	ldr	r0, [sp, #20]
 8009298:	f001 faf0 	bl	800a87c <_Bfree>
 800929c:	9805      	ldr	r0, [sp, #20]
 800929e:	4621      	mov	r1, r4
 80092a0:	f001 faec 	bl	800a87c <_Bfree>
 80092a4:	e5f9      	b.n	8008e9a <_strtod_l+0x72>
 80092a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80092ac:	4293      	cmp	r3, r2
 80092ae:	dbbc      	blt.n	800922a <_strtod_l+0x402>
 80092b0:	4c41      	ldr	r4, [pc, #260]	@ (80093b8 <_strtod_l+0x590>)
 80092b2:	f1c5 050f 	rsb	r5, r5, #15
 80092b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80092ba:	4652      	mov	r2, sl
 80092bc:	465b      	mov	r3, fp
 80092be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092c2:	f7f7 f999 	bl	80005f8 <__aeabi_dmul>
 80092c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092c8:	1b5d      	subs	r5, r3, r5
 80092ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80092ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80092d2:	e78f      	b.n	80091f4 <_strtod_l+0x3cc>
 80092d4:	3316      	adds	r3, #22
 80092d6:	dba8      	blt.n	800922a <_strtod_l+0x402>
 80092d8:	4b37      	ldr	r3, [pc, #220]	@ (80093b8 <_strtod_l+0x590>)
 80092da:	eba9 0808 	sub.w	r8, r9, r8
 80092de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80092e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80092e6:	4650      	mov	r0, sl
 80092e8:	4659      	mov	r1, fp
 80092ea:	f7f7 faaf 	bl	800084c <__aeabi_ddiv>
 80092ee:	e783      	b.n	80091f8 <_strtod_l+0x3d0>
 80092f0:	4b32      	ldr	r3, [pc, #200]	@ (80093bc <_strtod_l+0x594>)
 80092f2:	9308      	str	r3, [sp, #32]
 80092f4:	2300      	movs	r3, #0
 80092f6:	1124      	asrs	r4, r4, #4
 80092f8:	4650      	mov	r0, sl
 80092fa:	4659      	mov	r1, fp
 80092fc:	461e      	mov	r6, r3
 80092fe:	2c01      	cmp	r4, #1
 8009300:	dc21      	bgt.n	8009346 <_strtod_l+0x51e>
 8009302:	b10b      	cbz	r3, 8009308 <_strtod_l+0x4e0>
 8009304:	4682      	mov	sl, r0
 8009306:	468b      	mov	fp, r1
 8009308:	492c      	ldr	r1, [pc, #176]	@ (80093bc <_strtod_l+0x594>)
 800930a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800930e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009312:	4652      	mov	r2, sl
 8009314:	465b      	mov	r3, fp
 8009316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800931a:	f7f7 f96d 	bl	80005f8 <__aeabi_dmul>
 800931e:	4b28      	ldr	r3, [pc, #160]	@ (80093c0 <_strtod_l+0x598>)
 8009320:	460a      	mov	r2, r1
 8009322:	400b      	ands	r3, r1
 8009324:	4927      	ldr	r1, [pc, #156]	@ (80093c4 <_strtod_l+0x59c>)
 8009326:	428b      	cmp	r3, r1
 8009328:	4682      	mov	sl, r0
 800932a:	d898      	bhi.n	800925e <_strtod_l+0x436>
 800932c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009330:	428b      	cmp	r3, r1
 8009332:	bf86      	itte	hi
 8009334:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80093c8 <_strtod_l+0x5a0>
 8009338:	f04f 3aff 	movhi.w	sl, #4294967295
 800933c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009340:	2300      	movs	r3, #0
 8009342:	9308      	str	r3, [sp, #32]
 8009344:	e07a      	b.n	800943c <_strtod_l+0x614>
 8009346:	07e2      	lsls	r2, r4, #31
 8009348:	d505      	bpl.n	8009356 <_strtod_l+0x52e>
 800934a:	9b08      	ldr	r3, [sp, #32]
 800934c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009350:	f7f7 f952 	bl	80005f8 <__aeabi_dmul>
 8009354:	2301      	movs	r3, #1
 8009356:	9a08      	ldr	r2, [sp, #32]
 8009358:	3208      	adds	r2, #8
 800935a:	3601      	adds	r6, #1
 800935c:	1064      	asrs	r4, r4, #1
 800935e:	9208      	str	r2, [sp, #32]
 8009360:	e7cd      	b.n	80092fe <_strtod_l+0x4d6>
 8009362:	d0ed      	beq.n	8009340 <_strtod_l+0x518>
 8009364:	4264      	negs	r4, r4
 8009366:	f014 020f 	ands.w	r2, r4, #15
 800936a:	d00a      	beq.n	8009382 <_strtod_l+0x55a>
 800936c:	4b12      	ldr	r3, [pc, #72]	@ (80093b8 <_strtod_l+0x590>)
 800936e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009372:	4650      	mov	r0, sl
 8009374:	4659      	mov	r1, fp
 8009376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937a:	f7f7 fa67 	bl	800084c <__aeabi_ddiv>
 800937e:	4682      	mov	sl, r0
 8009380:	468b      	mov	fp, r1
 8009382:	1124      	asrs	r4, r4, #4
 8009384:	d0dc      	beq.n	8009340 <_strtod_l+0x518>
 8009386:	2c1f      	cmp	r4, #31
 8009388:	dd20      	ble.n	80093cc <_strtod_l+0x5a4>
 800938a:	2400      	movs	r4, #0
 800938c:	46a0      	mov	r8, r4
 800938e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009390:	46a1      	mov	r9, r4
 8009392:	9a05      	ldr	r2, [sp, #20]
 8009394:	2322      	movs	r3, #34	@ 0x22
 8009396:	f04f 0a00 	mov.w	sl, #0
 800939a:	f04f 0b00 	mov.w	fp, #0
 800939e:	6013      	str	r3, [r2, #0]
 80093a0:	e768      	b.n	8009274 <_strtod_l+0x44c>
 80093a2:	bf00      	nop
 80093a4:	0800d7bb 	.word	0x0800d7bb
 80093a8:	0800d7c0 	.word	0x0800d7c0
 80093ac:	0800d7b2 	.word	0x0800d7b2
 80093b0:	0800d7b5 	.word	0x0800d7b5
 80093b4:	0800db67 	.word	0x0800db67
 80093b8:	0800d930 	.word	0x0800d930
 80093bc:	0800d908 	.word	0x0800d908
 80093c0:	7ff00000 	.word	0x7ff00000
 80093c4:	7ca00000 	.word	0x7ca00000
 80093c8:	7fefffff 	.word	0x7fefffff
 80093cc:	f014 0310 	ands.w	r3, r4, #16
 80093d0:	bf18      	it	ne
 80093d2:	236a      	movne	r3, #106	@ 0x6a
 80093d4:	4ea9      	ldr	r6, [pc, #676]	@ (800967c <_strtod_l+0x854>)
 80093d6:	9308      	str	r3, [sp, #32]
 80093d8:	4650      	mov	r0, sl
 80093da:	4659      	mov	r1, fp
 80093dc:	2300      	movs	r3, #0
 80093de:	07e2      	lsls	r2, r4, #31
 80093e0:	d504      	bpl.n	80093ec <_strtod_l+0x5c4>
 80093e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093e6:	f7f7 f907 	bl	80005f8 <__aeabi_dmul>
 80093ea:	2301      	movs	r3, #1
 80093ec:	1064      	asrs	r4, r4, #1
 80093ee:	f106 0608 	add.w	r6, r6, #8
 80093f2:	d1f4      	bne.n	80093de <_strtod_l+0x5b6>
 80093f4:	b10b      	cbz	r3, 80093fa <_strtod_l+0x5d2>
 80093f6:	4682      	mov	sl, r0
 80093f8:	468b      	mov	fp, r1
 80093fa:	9b08      	ldr	r3, [sp, #32]
 80093fc:	b1b3      	cbz	r3, 800942c <_strtod_l+0x604>
 80093fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009402:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009406:	2b00      	cmp	r3, #0
 8009408:	4659      	mov	r1, fp
 800940a:	dd0f      	ble.n	800942c <_strtod_l+0x604>
 800940c:	2b1f      	cmp	r3, #31
 800940e:	dd55      	ble.n	80094bc <_strtod_l+0x694>
 8009410:	2b34      	cmp	r3, #52	@ 0x34
 8009412:	bfde      	ittt	le
 8009414:	f04f 33ff 	movle.w	r3, #4294967295
 8009418:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800941c:	4093      	lslle	r3, r2
 800941e:	f04f 0a00 	mov.w	sl, #0
 8009422:	bfcc      	ite	gt
 8009424:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009428:	ea03 0b01 	andle.w	fp, r3, r1
 800942c:	2200      	movs	r2, #0
 800942e:	2300      	movs	r3, #0
 8009430:	4650      	mov	r0, sl
 8009432:	4659      	mov	r1, fp
 8009434:	f7f7 fb48 	bl	8000ac8 <__aeabi_dcmpeq>
 8009438:	2800      	cmp	r0, #0
 800943a:	d1a6      	bne.n	800938a <_strtod_l+0x562>
 800943c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009442:	9805      	ldr	r0, [sp, #20]
 8009444:	462b      	mov	r3, r5
 8009446:	463a      	mov	r2, r7
 8009448:	f001 fa80 	bl	800a94c <__s2b>
 800944c:	900a      	str	r0, [sp, #40]	@ 0x28
 800944e:	2800      	cmp	r0, #0
 8009450:	f43f af05 	beq.w	800925e <_strtod_l+0x436>
 8009454:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009456:	2a00      	cmp	r2, #0
 8009458:	eba9 0308 	sub.w	r3, r9, r8
 800945c:	bfa8      	it	ge
 800945e:	2300      	movge	r3, #0
 8009460:	9312      	str	r3, [sp, #72]	@ 0x48
 8009462:	2400      	movs	r4, #0
 8009464:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009468:	9316      	str	r3, [sp, #88]	@ 0x58
 800946a:	46a0      	mov	r8, r4
 800946c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800946e:	9805      	ldr	r0, [sp, #20]
 8009470:	6859      	ldr	r1, [r3, #4]
 8009472:	f001 f9c3 	bl	800a7fc <_Balloc>
 8009476:	4681      	mov	r9, r0
 8009478:	2800      	cmp	r0, #0
 800947a:	f43f aef4 	beq.w	8009266 <_strtod_l+0x43e>
 800947e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009480:	691a      	ldr	r2, [r3, #16]
 8009482:	3202      	adds	r2, #2
 8009484:	f103 010c 	add.w	r1, r3, #12
 8009488:	0092      	lsls	r2, r2, #2
 800948a:	300c      	adds	r0, #12
 800948c:	f000 fd53 	bl	8009f36 <memcpy>
 8009490:	ec4b ab10 	vmov	d0, sl, fp
 8009494:	9805      	ldr	r0, [sp, #20]
 8009496:	aa1c      	add	r2, sp, #112	@ 0x70
 8009498:	a91b      	add	r1, sp, #108	@ 0x6c
 800949a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800949e:	f001 fd91 	bl	800afc4 <__d2b>
 80094a2:	901a      	str	r0, [sp, #104]	@ 0x68
 80094a4:	2800      	cmp	r0, #0
 80094a6:	f43f aede 	beq.w	8009266 <_strtod_l+0x43e>
 80094aa:	9805      	ldr	r0, [sp, #20]
 80094ac:	2101      	movs	r1, #1
 80094ae:	f001 fae3 	bl	800aa78 <__i2b>
 80094b2:	4680      	mov	r8, r0
 80094b4:	b948      	cbnz	r0, 80094ca <_strtod_l+0x6a2>
 80094b6:	f04f 0800 	mov.w	r8, #0
 80094ba:	e6d4      	b.n	8009266 <_strtod_l+0x43e>
 80094bc:	f04f 32ff 	mov.w	r2, #4294967295
 80094c0:	fa02 f303 	lsl.w	r3, r2, r3
 80094c4:	ea03 0a0a 	and.w	sl, r3, sl
 80094c8:	e7b0      	b.n	800942c <_strtod_l+0x604>
 80094ca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80094cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80094ce:	2d00      	cmp	r5, #0
 80094d0:	bfab      	itete	ge
 80094d2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80094d4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80094d6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80094d8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80094da:	bfac      	ite	ge
 80094dc:	18ef      	addge	r7, r5, r3
 80094de:	1b5e      	sublt	r6, r3, r5
 80094e0:	9b08      	ldr	r3, [sp, #32]
 80094e2:	1aed      	subs	r5, r5, r3
 80094e4:	4415      	add	r5, r2
 80094e6:	4b66      	ldr	r3, [pc, #408]	@ (8009680 <_strtod_l+0x858>)
 80094e8:	3d01      	subs	r5, #1
 80094ea:	429d      	cmp	r5, r3
 80094ec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80094f0:	da50      	bge.n	8009594 <_strtod_l+0x76c>
 80094f2:	1b5b      	subs	r3, r3, r5
 80094f4:	2b1f      	cmp	r3, #31
 80094f6:	eba2 0203 	sub.w	r2, r2, r3
 80094fa:	f04f 0101 	mov.w	r1, #1
 80094fe:	dc3d      	bgt.n	800957c <_strtod_l+0x754>
 8009500:	fa01 f303 	lsl.w	r3, r1, r3
 8009504:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009506:	2300      	movs	r3, #0
 8009508:	9310      	str	r3, [sp, #64]	@ 0x40
 800950a:	18bd      	adds	r5, r7, r2
 800950c:	9b08      	ldr	r3, [sp, #32]
 800950e:	42af      	cmp	r7, r5
 8009510:	4416      	add	r6, r2
 8009512:	441e      	add	r6, r3
 8009514:	463b      	mov	r3, r7
 8009516:	bfa8      	it	ge
 8009518:	462b      	movge	r3, r5
 800951a:	42b3      	cmp	r3, r6
 800951c:	bfa8      	it	ge
 800951e:	4633      	movge	r3, r6
 8009520:	2b00      	cmp	r3, #0
 8009522:	bfc2      	ittt	gt
 8009524:	1aed      	subgt	r5, r5, r3
 8009526:	1af6      	subgt	r6, r6, r3
 8009528:	1aff      	subgt	r7, r7, r3
 800952a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800952c:	2b00      	cmp	r3, #0
 800952e:	dd16      	ble.n	800955e <_strtod_l+0x736>
 8009530:	4641      	mov	r1, r8
 8009532:	9805      	ldr	r0, [sp, #20]
 8009534:	461a      	mov	r2, r3
 8009536:	f001 fb5f 	bl	800abf8 <__pow5mult>
 800953a:	4680      	mov	r8, r0
 800953c:	2800      	cmp	r0, #0
 800953e:	d0ba      	beq.n	80094b6 <_strtod_l+0x68e>
 8009540:	4601      	mov	r1, r0
 8009542:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009544:	9805      	ldr	r0, [sp, #20]
 8009546:	f001 faad 	bl	800aaa4 <__multiply>
 800954a:	900e      	str	r0, [sp, #56]	@ 0x38
 800954c:	2800      	cmp	r0, #0
 800954e:	f43f ae8a 	beq.w	8009266 <_strtod_l+0x43e>
 8009552:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009554:	9805      	ldr	r0, [sp, #20]
 8009556:	f001 f991 	bl	800a87c <_Bfree>
 800955a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800955c:	931a      	str	r3, [sp, #104]	@ 0x68
 800955e:	2d00      	cmp	r5, #0
 8009560:	dc1d      	bgt.n	800959e <_strtod_l+0x776>
 8009562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009564:	2b00      	cmp	r3, #0
 8009566:	dd23      	ble.n	80095b0 <_strtod_l+0x788>
 8009568:	4649      	mov	r1, r9
 800956a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800956c:	9805      	ldr	r0, [sp, #20]
 800956e:	f001 fb43 	bl	800abf8 <__pow5mult>
 8009572:	4681      	mov	r9, r0
 8009574:	b9e0      	cbnz	r0, 80095b0 <_strtod_l+0x788>
 8009576:	f04f 0900 	mov.w	r9, #0
 800957a:	e674      	b.n	8009266 <_strtod_l+0x43e>
 800957c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009580:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009584:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009588:	35e2      	adds	r5, #226	@ 0xe2
 800958a:	fa01 f305 	lsl.w	r3, r1, r5
 800958e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009590:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009592:	e7ba      	b.n	800950a <_strtod_l+0x6e2>
 8009594:	2300      	movs	r3, #0
 8009596:	9310      	str	r3, [sp, #64]	@ 0x40
 8009598:	2301      	movs	r3, #1
 800959a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800959c:	e7b5      	b.n	800950a <_strtod_l+0x6e2>
 800959e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095a0:	9805      	ldr	r0, [sp, #20]
 80095a2:	462a      	mov	r2, r5
 80095a4:	f001 fb82 	bl	800acac <__lshift>
 80095a8:	901a      	str	r0, [sp, #104]	@ 0x68
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d1d9      	bne.n	8009562 <_strtod_l+0x73a>
 80095ae:	e65a      	b.n	8009266 <_strtod_l+0x43e>
 80095b0:	2e00      	cmp	r6, #0
 80095b2:	dd07      	ble.n	80095c4 <_strtod_l+0x79c>
 80095b4:	4649      	mov	r1, r9
 80095b6:	9805      	ldr	r0, [sp, #20]
 80095b8:	4632      	mov	r2, r6
 80095ba:	f001 fb77 	bl	800acac <__lshift>
 80095be:	4681      	mov	r9, r0
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d0d8      	beq.n	8009576 <_strtod_l+0x74e>
 80095c4:	2f00      	cmp	r7, #0
 80095c6:	dd08      	ble.n	80095da <_strtod_l+0x7b2>
 80095c8:	4641      	mov	r1, r8
 80095ca:	9805      	ldr	r0, [sp, #20]
 80095cc:	463a      	mov	r2, r7
 80095ce:	f001 fb6d 	bl	800acac <__lshift>
 80095d2:	4680      	mov	r8, r0
 80095d4:	2800      	cmp	r0, #0
 80095d6:	f43f ae46 	beq.w	8009266 <_strtod_l+0x43e>
 80095da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095dc:	9805      	ldr	r0, [sp, #20]
 80095de:	464a      	mov	r2, r9
 80095e0:	f001 fbec 	bl	800adbc <__mdiff>
 80095e4:	4604      	mov	r4, r0
 80095e6:	2800      	cmp	r0, #0
 80095e8:	f43f ae3d 	beq.w	8009266 <_strtod_l+0x43e>
 80095ec:	68c3      	ldr	r3, [r0, #12]
 80095ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095f0:	2300      	movs	r3, #0
 80095f2:	60c3      	str	r3, [r0, #12]
 80095f4:	4641      	mov	r1, r8
 80095f6:	f001 fbc5 	bl	800ad84 <__mcmp>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	da46      	bge.n	800968c <_strtod_l+0x864>
 80095fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009600:	ea53 030a 	orrs.w	r3, r3, sl
 8009604:	d16c      	bne.n	80096e0 <_strtod_l+0x8b8>
 8009606:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800960a:	2b00      	cmp	r3, #0
 800960c:	d168      	bne.n	80096e0 <_strtod_l+0x8b8>
 800960e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009612:	0d1b      	lsrs	r3, r3, #20
 8009614:	051b      	lsls	r3, r3, #20
 8009616:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800961a:	d961      	bls.n	80096e0 <_strtod_l+0x8b8>
 800961c:	6963      	ldr	r3, [r4, #20]
 800961e:	b913      	cbnz	r3, 8009626 <_strtod_l+0x7fe>
 8009620:	6923      	ldr	r3, [r4, #16]
 8009622:	2b01      	cmp	r3, #1
 8009624:	dd5c      	ble.n	80096e0 <_strtod_l+0x8b8>
 8009626:	4621      	mov	r1, r4
 8009628:	2201      	movs	r2, #1
 800962a:	9805      	ldr	r0, [sp, #20]
 800962c:	f001 fb3e 	bl	800acac <__lshift>
 8009630:	4641      	mov	r1, r8
 8009632:	4604      	mov	r4, r0
 8009634:	f001 fba6 	bl	800ad84 <__mcmp>
 8009638:	2800      	cmp	r0, #0
 800963a:	dd51      	ble.n	80096e0 <_strtod_l+0x8b8>
 800963c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009640:	9a08      	ldr	r2, [sp, #32]
 8009642:	0d1b      	lsrs	r3, r3, #20
 8009644:	051b      	lsls	r3, r3, #20
 8009646:	2a00      	cmp	r2, #0
 8009648:	d06b      	beq.n	8009722 <_strtod_l+0x8fa>
 800964a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800964e:	d868      	bhi.n	8009722 <_strtod_l+0x8fa>
 8009650:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009654:	f67f ae9d 	bls.w	8009392 <_strtod_l+0x56a>
 8009658:	4b0a      	ldr	r3, [pc, #40]	@ (8009684 <_strtod_l+0x85c>)
 800965a:	4650      	mov	r0, sl
 800965c:	4659      	mov	r1, fp
 800965e:	2200      	movs	r2, #0
 8009660:	f7f6 ffca 	bl	80005f8 <__aeabi_dmul>
 8009664:	4b08      	ldr	r3, [pc, #32]	@ (8009688 <_strtod_l+0x860>)
 8009666:	400b      	ands	r3, r1
 8009668:	4682      	mov	sl, r0
 800966a:	468b      	mov	fp, r1
 800966c:	2b00      	cmp	r3, #0
 800966e:	f47f ae05 	bne.w	800927c <_strtod_l+0x454>
 8009672:	9a05      	ldr	r2, [sp, #20]
 8009674:	2322      	movs	r3, #34	@ 0x22
 8009676:	6013      	str	r3, [r2, #0]
 8009678:	e600      	b.n	800927c <_strtod_l+0x454>
 800967a:	bf00      	nop
 800967c:	0800d7e8 	.word	0x0800d7e8
 8009680:	fffffc02 	.word	0xfffffc02
 8009684:	39500000 	.word	0x39500000
 8009688:	7ff00000 	.word	0x7ff00000
 800968c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009690:	d165      	bne.n	800975e <_strtod_l+0x936>
 8009692:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009694:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009698:	b35a      	cbz	r2, 80096f2 <_strtod_l+0x8ca>
 800969a:	4a9f      	ldr	r2, [pc, #636]	@ (8009918 <_strtod_l+0xaf0>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d12b      	bne.n	80096f8 <_strtod_l+0x8d0>
 80096a0:	9b08      	ldr	r3, [sp, #32]
 80096a2:	4651      	mov	r1, sl
 80096a4:	b303      	cbz	r3, 80096e8 <_strtod_l+0x8c0>
 80096a6:	4b9d      	ldr	r3, [pc, #628]	@ (800991c <_strtod_l+0xaf4>)
 80096a8:	465a      	mov	r2, fp
 80096aa:	4013      	ands	r3, r2
 80096ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80096b0:	f04f 32ff 	mov.w	r2, #4294967295
 80096b4:	d81b      	bhi.n	80096ee <_strtod_l+0x8c6>
 80096b6:	0d1b      	lsrs	r3, r3, #20
 80096b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80096bc:	fa02 f303 	lsl.w	r3, r2, r3
 80096c0:	4299      	cmp	r1, r3
 80096c2:	d119      	bne.n	80096f8 <_strtod_l+0x8d0>
 80096c4:	4b96      	ldr	r3, [pc, #600]	@ (8009920 <_strtod_l+0xaf8>)
 80096c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d102      	bne.n	80096d2 <_strtod_l+0x8aa>
 80096cc:	3101      	adds	r1, #1
 80096ce:	f43f adca 	beq.w	8009266 <_strtod_l+0x43e>
 80096d2:	4b92      	ldr	r3, [pc, #584]	@ (800991c <_strtod_l+0xaf4>)
 80096d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096d6:	401a      	ands	r2, r3
 80096d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80096dc:	f04f 0a00 	mov.w	sl, #0
 80096e0:	9b08      	ldr	r3, [sp, #32]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1b8      	bne.n	8009658 <_strtod_l+0x830>
 80096e6:	e5c9      	b.n	800927c <_strtod_l+0x454>
 80096e8:	f04f 33ff 	mov.w	r3, #4294967295
 80096ec:	e7e8      	b.n	80096c0 <_strtod_l+0x898>
 80096ee:	4613      	mov	r3, r2
 80096f0:	e7e6      	b.n	80096c0 <_strtod_l+0x898>
 80096f2:	ea53 030a 	orrs.w	r3, r3, sl
 80096f6:	d0a1      	beq.n	800963c <_strtod_l+0x814>
 80096f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80096fa:	b1db      	cbz	r3, 8009734 <_strtod_l+0x90c>
 80096fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096fe:	4213      	tst	r3, r2
 8009700:	d0ee      	beq.n	80096e0 <_strtod_l+0x8b8>
 8009702:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009704:	9a08      	ldr	r2, [sp, #32]
 8009706:	4650      	mov	r0, sl
 8009708:	4659      	mov	r1, fp
 800970a:	b1bb      	cbz	r3, 800973c <_strtod_l+0x914>
 800970c:	f7ff fb6b 	bl	8008de6 <sulp>
 8009710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009714:	ec53 2b10 	vmov	r2, r3, d0
 8009718:	f7f6 fdb8 	bl	800028c <__adddf3>
 800971c:	4682      	mov	sl, r0
 800971e:	468b      	mov	fp, r1
 8009720:	e7de      	b.n	80096e0 <_strtod_l+0x8b8>
 8009722:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009726:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800972a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800972e:	f04f 3aff 	mov.w	sl, #4294967295
 8009732:	e7d5      	b.n	80096e0 <_strtod_l+0x8b8>
 8009734:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009736:	ea13 0f0a 	tst.w	r3, sl
 800973a:	e7e1      	b.n	8009700 <_strtod_l+0x8d8>
 800973c:	f7ff fb53 	bl	8008de6 <sulp>
 8009740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009744:	ec53 2b10 	vmov	r2, r3, d0
 8009748:	f7f6 fd9e 	bl	8000288 <__aeabi_dsub>
 800974c:	2200      	movs	r2, #0
 800974e:	2300      	movs	r3, #0
 8009750:	4682      	mov	sl, r0
 8009752:	468b      	mov	fp, r1
 8009754:	f7f7 f9b8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009758:	2800      	cmp	r0, #0
 800975a:	d0c1      	beq.n	80096e0 <_strtod_l+0x8b8>
 800975c:	e619      	b.n	8009392 <_strtod_l+0x56a>
 800975e:	4641      	mov	r1, r8
 8009760:	4620      	mov	r0, r4
 8009762:	f001 fc87 	bl	800b074 <__ratio>
 8009766:	ec57 6b10 	vmov	r6, r7, d0
 800976a:	2200      	movs	r2, #0
 800976c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009770:	4630      	mov	r0, r6
 8009772:	4639      	mov	r1, r7
 8009774:	f7f7 f9bc 	bl	8000af0 <__aeabi_dcmple>
 8009778:	2800      	cmp	r0, #0
 800977a:	d06f      	beq.n	800985c <_strtod_l+0xa34>
 800977c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800977e:	2b00      	cmp	r3, #0
 8009780:	d17a      	bne.n	8009878 <_strtod_l+0xa50>
 8009782:	f1ba 0f00 	cmp.w	sl, #0
 8009786:	d158      	bne.n	800983a <_strtod_l+0xa12>
 8009788:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800978a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800978e:	2b00      	cmp	r3, #0
 8009790:	d15a      	bne.n	8009848 <_strtod_l+0xa20>
 8009792:	4b64      	ldr	r3, [pc, #400]	@ (8009924 <_strtod_l+0xafc>)
 8009794:	2200      	movs	r2, #0
 8009796:	4630      	mov	r0, r6
 8009798:	4639      	mov	r1, r7
 800979a:	f7f7 f99f 	bl	8000adc <__aeabi_dcmplt>
 800979e:	2800      	cmp	r0, #0
 80097a0:	d159      	bne.n	8009856 <_strtod_l+0xa2e>
 80097a2:	4630      	mov	r0, r6
 80097a4:	4639      	mov	r1, r7
 80097a6:	4b60      	ldr	r3, [pc, #384]	@ (8009928 <_strtod_l+0xb00>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	f7f6 ff25 	bl	80005f8 <__aeabi_dmul>
 80097ae:	4606      	mov	r6, r0
 80097b0:	460f      	mov	r7, r1
 80097b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80097b6:	9606      	str	r6, [sp, #24]
 80097b8:	9307      	str	r3, [sp, #28]
 80097ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097be:	4d57      	ldr	r5, [pc, #348]	@ (800991c <_strtod_l+0xaf4>)
 80097c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80097c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097c6:	401d      	ands	r5, r3
 80097c8:	4b58      	ldr	r3, [pc, #352]	@ (800992c <_strtod_l+0xb04>)
 80097ca:	429d      	cmp	r5, r3
 80097cc:	f040 80b2 	bne.w	8009934 <_strtod_l+0xb0c>
 80097d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80097d6:	ec4b ab10 	vmov	d0, sl, fp
 80097da:	f001 fb83 	bl	800aee4 <__ulp>
 80097de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097e2:	ec51 0b10 	vmov	r0, r1, d0
 80097e6:	f7f6 ff07 	bl	80005f8 <__aeabi_dmul>
 80097ea:	4652      	mov	r2, sl
 80097ec:	465b      	mov	r3, fp
 80097ee:	f7f6 fd4d 	bl	800028c <__adddf3>
 80097f2:	460b      	mov	r3, r1
 80097f4:	4949      	ldr	r1, [pc, #292]	@ (800991c <_strtod_l+0xaf4>)
 80097f6:	4a4e      	ldr	r2, [pc, #312]	@ (8009930 <_strtod_l+0xb08>)
 80097f8:	4019      	ands	r1, r3
 80097fa:	4291      	cmp	r1, r2
 80097fc:	4682      	mov	sl, r0
 80097fe:	d942      	bls.n	8009886 <_strtod_l+0xa5e>
 8009800:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009802:	4b47      	ldr	r3, [pc, #284]	@ (8009920 <_strtod_l+0xaf8>)
 8009804:	429a      	cmp	r2, r3
 8009806:	d103      	bne.n	8009810 <_strtod_l+0x9e8>
 8009808:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800980a:	3301      	adds	r3, #1
 800980c:	f43f ad2b 	beq.w	8009266 <_strtod_l+0x43e>
 8009810:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009920 <_strtod_l+0xaf8>
 8009814:	f04f 3aff 	mov.w	sl, #4294967295
 8009818:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800981a:	9805      	ldr	r0, [sp, #20]
 800981c:	f001 f82e 	bl	800a87c <_Bfree>
 8009820:	9805      	ldr	r0, [sp, #20]
 8009822:	4649      	mov	r1, r9
 8009824:	f001 f82a 	bl	800a87c <_Bfree>
 8009828:	9805      	ldr	r0, [sp, #20]
 800982a:	4641      	mov	r1, r8
 800982c:	f001 f826 	bl	800a87c <_Bfree>
 8009830:	9805      	ldr	r0, [sp, #20]
 8009832:	4621      	mov	r1, r4
 8009834:	f001 f822 	bl	800a87c <_Bfree>
 8009838:	e618      	b.n	800946c <_strtod_l+0x644>
 800983a:	f1ba 0f01 	cmp.w	sl, #1
 800983e:	d103      	bne.n	8009848 <_strtod_l+0xa20>
 8009840:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009842:	2b00      	cmp	r3, #0
 8009844:	f43f ada5 	beq.w	8009392 <_strtod_l+0x56a>
 8009848:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80098f8 <_strtod_l+0xad0>
 800984c:	4f35      	ldr	r7, [pc, #212]	@ (8009924 <_strtod_l+0xafc>)
 800984e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009852:	2600      	movs	r6, #0
 8009854:	e7b1      	b.n	80097ba <_strtod_l+0x992>
 8009856:	4f34      	ldr	r7, [pc, #208]	@ (8009928 <_strtod_l+0xb00>)
 8009858:	2600      	movs	r6, #0
 800985a:	e7aa      	b.n	80097b2 <_strtod_l+0x98a>
 800985c:	4b32      	ldr	r3, [pc, #200]	@ (8009928 <_strtod_l+0xb00>)
 800985e:	4630      	mov	r0, r6
 8009860:	4639      	mov	r1, r7
 8009862:	2200      	movs	r2, #0
 8009864:	f7f6 fec8 	bl	80005f8 <__aeabi_dmul>
 8009868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800986a:	4606      	mov	r6, r0
 800986c:	460f      	mov	r7, r1
 800986e:	2b00      	cmp	r3, #0
 8009870:	d09f      	beq.n	80097b2 <_strtod_l+0x98a>
 8009872:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009876:	e7a0      	b.n	80097ba <_strtod_l+0x992>
 8009878:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009900 <_strtod_l+0xad8>
 800987c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009880:	ec57 6b17 	vmov	r6, r7, d7
 8009884:	e799      	b.n	80097ba <_strtod_l+0x992>
 8009886:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800988a:	9b08      	ldr	r3, [sp, #32]
 800988c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1c1      	bne.n	8009818 <_strtod_l+0x9f0>
 8009894:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009898:	0d1b      	lsrs	r3, r3, #20
 800989a:	051b      	lsls	r3, r3, #20
 800989c:	429d      	cmp	r5, r3
 800989e:	d1bb      	bne.n	8009818 <_strtod_l+0x9f0>
 80098a0:	4630      	mov	r0, r6
 80098a2:	4639      	mov	r1, r7
 80098a4:	f7f7 fa08 	bl	8000cb8 <__aeabi_d2lz>
 80098a8:	f7f6 fe78 	bl	800059c <__aeabi_l2d>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	4630      	mov	r0, r6
 80098b2:	4639      	mov	r1, r7
 80098b4:	f7f6 fce8 	bl	8000288 <__aeabi_dsub>
 80098b8:	460b      	mov	r3, r1
 80098ba:	4602      	mov	r2, r0
 80098bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80098c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80098c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098c6:	ea46 060a 	orr.w	r6, r6, sl
 80098ca:	431e      	orrs	r6, r3
 80098cc:	d06f      	beq.n	80099ae <_strtod_l+0xb86>
 80098ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8009908 <_strtod_l+0xae0>)
 80098d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d4:	f7f7 f902 	bl	8000adc <__aeabi_dcmplt>
 80098d8:	2800      	cmp	r0, #0
 80098da:	f47f accf 	bne.w	800927c <_strtod_l+0x454>
 80098de:	a30c      	add	r3, pc, #48	@ (adr r3, 8009910 <_strtod_l+0xae8>)
 80098e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098e8:	f7f7 f916 	bl	8000b18 <__aeabi_dcmpgt>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	d093      	beq.n	8009818 <_strtod_l+0x9f0>
 80098f0:	e4c4      	b.n	800927c <_strtod_l+0x454>
 80098f2:	bf00      	nop
 80098f4:	f3af 8000 	nop.w
 80098f8:	00000000 	.word	0x00000000
 80098fc:	bff00000 	.word	0xbff00000
 8009900:	00000000 	.word	0x00000000
 8009904:	3ff00000 	.word	0x3ff00000
 8009908:	94a03595 	.word	0x94a03595
 800990c:	3fdfffff 	.word	0x3fdfffff
 8009910:	35afe535 	.word	0x35afe535
 8009914:	3fe00000 	.word	0x3fe00000
 8009918:	000fffff 	.word	0x000fffff
 800991c:	7ff00000 	.word	0x7ff00000
 8009920:	7fefffff 	.word	0x7fefffff
 8009924:	3ff00000 	.word	0x3ff00000
 8009928:	3fe00000 	.word	0x3fe00000
 800992c:	7fe00000 	.word	0x7fe00000
 8009930:	7c9fffff 	.word	0x7c9fffff
 8009934:	9b08      	ldr	r3, [sp, #32]
 8009936:	b323      	cbz	r3, 8009982 <_strtod_l+0xb5a>
 8009938:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800993c:	d821      	bhi.n	8009982 <_strtod_l+0xb5a>
 800993e:	a328      	add	r3, pc, #160	@ (adr r3, 80099e0 <_strtod_l+0xbb8>)
 8009940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009944:	4630      	mov	r0, r6
 8009946:	4639      	mov	r1, r7
 8009948:	f7f7 f8d2 	bl	8000af0 <__aeabi_dcmple>
 800994c:	b1a0      	cbz	r0, 8009978 <_strtod_l+0xb50>
 800994e:	4639      	mov	r1, r7
 8009950:	4630      	mov	r0, r6
 8009952:	f7f7 f929 	bl	8000ba8 <__aeabi_d2uiz>
 8009956:	2801      	cmp	r0, #1
 8009958:	bf38      	it	cc
 800995a:	2001      	movcc	r0, #1
 800995c:	f7f6 fdd2 	bl	8000504 <__aeabi_ui2d>
 8009960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009962:	4606      	mov	r6, r0
 8009964:	460f      	mov	r7, r1
 8009966:	b9fb      	cbnz	r3, 80099a8 <_strtod_l+0xb80>
 8009968:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800996c:	9014      	str	r0, [sp, #80]	@ 0x50
 800996e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009970:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009974:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009978:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800997a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800997e:	1b5b      	subs	r3, r3, r5
 8009980:	9311      	str	r3, [sp, #68]	@ 0x44
 8009982:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009986:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800998a:	f001 faab 	bl	800aee4 <__ulp>
 800998e:	4650      	mov	r0, sl
 8009990:	ec53 2b10 	vmov	r2, r3, d0
 8009994:	4659      	mov	r1, fp
 8009996:	f7f6 fe2f 	bl	80005f8 <__aeabi_dmul>
 800999a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800999e:	f7f6 fc75 	bl	800028c <__adddf3>
 80099a2:	4682      	mov	sl, r0
 80099a4:	468b      	mov	fp, r1
 80099a6:	e770      	b.n	800988a <_strtod_l+0xa62>
 80099a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80099ac:	e7e0      	b.n	8009970 <_strtod_l+0xb48>
 80099ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80099e8 <_strtod_l+0xbc0>)
 80099b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b4:	f7f7 f892 	bl	8000adc <__aeabi_dcmplt>
 80099b8:	e798      	b.n	80098ec <_strtod_l+0xac4>
 80099ba:	2300      	movs	r3, #0
 80099bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80099c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099c2:	6013      	str	r3, [r2, #0]
 80099c4:	f7ff ba6d 	b.w	8008ea2 <_strtod_l+0x7a>
 80099c8:	2a65      	cmp	r2, #101	@ 0x65
 80099ca:	f43f ab66 	beq.w	800909a <_strtod_l+0x272>
 80099ce:	2a45      	cmp	r2, #69	@ 0x45
 80099d0:	f43f ab63 	beq.w	800909a <_strtod_l+0x272>
 80099d4:	2301      	movs	r3, #1
 80099d6:	f7ff bb9e 	b.w	8009116 <_strtod_l+0x2ee>
 80099da:	bf00      	nop
 80099dc:	f3af 8000 	nop.w
 80099e0:	ffc00000 	.word	0xffc00000
 80099e4:	41dfffff 	.word	0x41dfffff
 80099e8:	94a03595 	.word	0x94a03595
 80099ec:	3fcfffff 	.word	0x3fcfffff

080099f0 <strtod>:
 80099f0:	460a      	mov	r2, r1
 80099f2:	4601      	mov	r1, r0
 80099f4:	4802      	ldr	r0, [pc, #8]	@ (8009a00 <strtod+0x10>)
 80099f6:	4b03      	ldr	r3, [pc, #12]	@ (8009a04 <strtod+0x14>)
 80099f8:	6800      	ldr	r0, [r0, #0]
 80099fa:	f7ff ba15 	b.w	8008e28 <_strtod_l>
 80099fe:	bf00      	nop
 8009a00:	20000188 	.word	0x20000188
 8009a04:	2000001c 	.word	0x2000001c

08009a08 <std>:
 8009a08:	2300      	movs	r3, #0
 8009a0a:	b510      	push	{r4, lr}
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a16:	6083      	str	r3, [r0, #8]
 8009a18:	8181      	strh	r1, [r0, #12]
 8009a1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009a1c:	81c2      	strh	r2, [r0, #14]
 8009a1e:	6183      	str	r3, [r0, #24]
 8009a20:	4619      	mov	r1, r3
 8009a22:	2208      	movs	r2, #8
 8009a24:	305c      	adds	r0, #92	@ 0x5c
 8009a26:	f000 f9f9 	bl	8009e1c <memset>
 8009a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a60 <std+0x58>)
 8009a2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a64 <std+0x5c>)
 8009a30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009a32:	4b0d      	ldr	r3, [pc, #52]	@ (8009a68 <std+0x60>)
 8009a34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a36:	4b0d      	ldr	r3, [pc, #52]	@ (8009a6c <std+0x64>)
 8009a38:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a70 <std+0x68>)
 8009a3c:	6224      	str	r4, [r4, #32]
 8009a3e:	429c      	cmp	r4, r3
 8009a40:	d006      	beq.n	8009a50 <std+0x48>
 8009a42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a46:	4294      	cmp	r4, r2
 8009a48:	d002      	beq.n	8009a50 <std+0x48>
 8009a4a:	33d0      	adds	r3, #208	@ 0xd0
 8009a4c:	429c      	cmp	r4, r3
 8009a4e:	d105      	bne.n	8009a5c <std+0x54>
 8009a50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a58:	f000 ba6a 	b.w	8009f30 <__retarget_lock_init_recursive>
 8009a5c:	bd10      	pop	{r4, pc}
 8009a5e:	bf00      	nop
 8009a60:	08009c6d 	.word	0x08009c6d
 8009a64:	08009c8f 	.word	0x08009c8f
 8009a68:	08009cc7 	.word	0x08009cc7
 8009a6c:	08009ceb 	.word	0x08009ceb
 8009a70:	20000874 	.word	0x20000874

08009a74 <stdio_exit_handler>:
 8009a74:	4a02      	ldr	r2, [pc, #8]	@ (8009a80 <stdio_exit_handler+0xc>)
 8009a76:	4903      	ldr	r1, [pc, #12]	@ (8009a84 <stdio_exit_handler+0x10>)
 8009a78:	4803      	ldr	r0, [pc, #12]	@ (8009a88 <stdio_exit_handler+0x14>)
 8009a7a:	f000 b869 	b.w	8009b50 <_fwalk_sglue>
 8009a7e:	bf00      	nop
 8009a80:	20000010 	.word	0x20000010
 8009a84:	0800b821 	.word	0x0800b821
 8009a88:	2000018c 	.word	0x2000018c

08009a8c <cleanup_stdio>:
 8009a8c:	6841      	ldr	r1, [r0, #4]
 8009a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ac0 <cleanup_stdio+0x34>)
 8009a90:	4299      	cmp	r1, r3
 8009a92:	b510      	push	{r4, lr}
 8009a94:	4604      	mov	r4, r0
 8009a96:	d001      	beq.n	8009a9c <cleanup_stdio+0x10>
 8009a98:	f001 fec2 	bl	800b820 <_fflush_r>
 8009a9c:	68a1      	ldr	r1, [r4, #8]
 8009a9e:	4b09      	ldr	r3, [pc, #36]	@ (8009ac4 <cleanup_stdio+0x38>)
 8009aa0:	4299      	cmp	r1, r3
 8009aa2:	d002      	beq.n	8009aaa <cleanup_stdio+0x1e>
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f001 febb 	bl	800b820 <_fflush_r>
 8009aaa:	68e1      	ldr	r1, [r4, #12]
 8009aac:	4b06      	ldr	r3, [pc, #24]	@ (8009ac8 <cleanup_stdio+0x3c>)
 8009aae:	4299      	cmp	r1, r3
 8009ab0:	d004      	beq.n	8009abc <cleanup_stdio+0x30>
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ab8:	f001 beb2 	b.w	800b820 <_fflush_r>
 8009abc:	bd10      	pop	{r4, pc}
 8009abe:	bf00      	nop
 8009ac0:	20000874 	.word	0x20000874
 8009ac4:	200008dc 	.word	0x200008dc
 8009ac8:	20000944 	.word	0x20000944

08009acc <global_stdio_init.part.0>:
 8009acc:	b510      	push	{r4, lr}
 8009ace:	4b0b      	ldr	r3, [pc, #44]	@ (8009afc <global_stdio_init.part.0+0x30>)
 8009ad0:	4c0b      	ldr	r4, [pc, #44]	@ (8009b00 <global_stdio_init.part.0+0x34>)
 8009ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8009b04 <global_stdio_init.part.0+0x38>)
 8009ad4:	601a      	str	r2, [r3, #0]
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	2200      	movs	r2, #0
 8009ada:	2104      	movs	r1, #4
 8009adc:	f7ff ff94 	bl	8009a08 <std>
 8009ae0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	2109      	movs	r1, #9
 8009ae8:	f7ff ff8e 	bl	8009a08 <std>
 8009aec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009af0:	2202      	movs	r2, #2
 8009af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009af6:	2112      	movs	r1, #18
 8009af8:	f7ff bf86 	b.w	8009a08 <std>
 8009afc:	200009ac 	.word	0x200009ac
 8009b00:	20000874 	.word	0x20000874
 8009b04:	08009a75 	.word	0x08009a75

08009b08 <__sfp_lock_acquire>:
 8009b08:	4801      	ldr	r0, [pc, #4]	@ (8009b10 <__sfp_lock_acquire+0x8>)
 8009b0a:	f000 ba12 	b.w	8009f32 <__retarget_lock_acquire_recursive>
 8009b0e:	bf00      	nop
 8009b10:	200009b5 	.word	0x200009b5

08009b14 <__sfp_lock_release>:
 8009b14:	4801      	ldr	r0, [pc, #4]	@ (8009b1c <__sfp_lock_release+0x8>)
 8009b16:	f000 ba0d 	b.w	8009f34 <__retarget_lock_release_recursive>
 8009b1a:	bf00      	nop
 8009b1c:	200009b5 	.word	0x200009b5

08009b20 <__sinit>:
 8009b20:	b510      	push	{r4, lr}
 8009b22:	4604      	mov	r4, r0
 8009b24:	f7ff fff0 	bl	8009b08 <__sfp_lock_acquire>
 8009b28:	6a23      	ldr	r3, [r4, #32]
 8009b2a:	b11b      	cbz	r3, 8009b34 <__sinit+0x14>
 8009b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b30:	f7ff bff0 	b.w	8009b14 <__sfp_lock_release>
 8009b34:	4b04      	ldr	r3, [pc, #16]	@ (8009b48 <__sinit+0x28>)
 8009b36:	6223      	str	r3, [r4, #32]
 8009b38:	4b04      	ldr	r3, [pc, #16]	@ (8009b4c <__sinit+0x2c>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1f5      	bne.n	8009b2c <__sinit+0xc>
 8009b40:	f7ff ffc4 	bl	8009acc <global_stdio_init.part.0>
 8009b44:	e7f2      	b.n	8009b2c <__sinit+0xc>
 8009b46:	bf00      	nop
 8009b48:	08009a8d 	.word	0x08009a8d
 8009b4c:	200009ac 	.word	0x200009ac

08009b50 <_fwalk_sglue>:
 8009b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b54:	4607      	mov	r7, r0
 8009b56:	4688      	mov	r8, r1
 8009b58:	4614      	mov	r4, r2
 8009b5a:	2600      	movs	r6, #0
 8009b5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b60:	f1b9 0901 	subs.w	r9, r9, #1
 8009b64:	d505      	bpl.n	8009b72 <_fwalk_sglue+0x22>
 8009b66:	6824      	ldr	r4, [r4, #0]
 8009b68:	2c00      	cmp	r4, #0
 8009b6a:	d1f7      	bne.n	8009b5c <_fwalk_sglue+0xc>
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b72:	89ab      	ldrh	r3, [r5, #12]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d907      	bls.n	8009b88 <_fwalk_sglue+0x38>
 8009b78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	d003      	beq.n	8009b88 <_fwalk_sglue+0x38>
 8009b80:	4629      	mov	r1, r5
 8009b82:	4638      	mov	r0, r7
 8009b84:	47c0      	blx	r8
 8009b86:	4306      	orrs	r6, r0
 8009b88:	3568      	adds	r5, #104	@ 0x68
 8009b8a:	e7e9      	b.n	8009b60 <_fwalk_sglue+0x10>

08009b8c <iprintf>:
 8009b8c:	b40f      	push	{r0, r1, r2, r3}
 8009b8e:	b507      	push	{r0, r1, r2, lr}
 8009b90:	4906      	ldr	r1, [pc, #24]	@ (8009bac <iprintf+0x20>)
 8009b92:	ab04      	add	r3, sp, #16
 8009b94:	6808      	ldr	r0, [r1, #0]
 8009b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b9a:	6881      	ldr	r1, [r0, #8]
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	f001 fb15 	bl	800b1cc <_vfiprintf_r>
 8009ba2:	b003      	add	sp, #12
 8009ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ba8:	b004      	add	sp, #16
 8009baa:	4770      	bx	lr
 8009bac:	20000188 	.word	0x20000188

08009bb0 <_puts_r>:
 8009bb0:	6a03      	ldr	r3, [r0, #32]
 8009bb2:	b570      	push	{r4, r5, r6, lr}
 8009bb4:	6884      	ldr	r4, [r0, #8]
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	460e      	mov	r6, r1
 8009bba:	b90b      	cbnz	r3, 8009bc0 <_puts_r+0x10>
 8009bbc:	f7ff ffb0 	bl	8009b20 <__sinit>
 8009bc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bc2:	07db      	lsls	r3, r3, #31
 8009bc4:	d405      	bmi.n	8009bd2 <_puts_r+0x22>
 8009bc6:	89a3      	ldrh	r3, [r4, #12]
 8009bc8:	0598      	lsls	r0, r3, #22
 8009bca:	d402      	bmi.n	8009bd2 <_puts_r+0x22>
 8009bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bce:	f000 f9b0 	bl	8009f32 <__retarget_lock_acquire_recursive>
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	0719      	lsls	r1, r3, #28
 8009bd6:	d502      	bpl.n	8009bde <_puts_r+0x2e>
 8009bd8:	6923      	ldr	r3, [r4, #16]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d135      	bne.n	8009c4a <_puts_r+0x9a>
 8009bde:	4621      	mov	r1, r4
 8009be0:	4628      	mov	r0, r5
 8009be2:	f000 f8c5 	bl	8009d70 <__swsetup_r>
 8009be6:	b380      	cbz	r0, 8009c4a <_puts_r+0x9a>
 8009be8:	f04f 35ff 	mov.w	r5, #4294967295
 8009bec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bee:	07da      	lsls	r2, r3, #31
 8009bf0:	d405      	bmi.n	8009bfe <_puts_r+0x4e>
 8009bf2:	89a3      	ldrh	r3, [r4, #12]
 8009bf4:	059b      	lsls	r3, r3, #22
 8009bf6:	d402      	bmi.n	8009bfe <_puts_r+0x4e>
 8009bf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bfa:	f000 f99b 	bl	8009f34 <__retarget_lock_release_recursive>
 8009bfe:	4628      	mov	r0, r5
 8009c00:	bd70      	pop	{r4, r5, r6, pc}
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	da04      	bge.n	8009c10 <_puts_r+0x60>
 8009c06:	69a2      	ldr	r2, [r4, #24]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	dc17      	bgt.n	8009c3c <_puts_r+0x8c>
 8009c0c:	290a      	cmp	r1, #10
 8009c0e:	d015      	beq.n	8009c3c <_puts_r+0x8c>
 8009c10:	6823      	ldr	r3, [r4, #0]
 8009c12:	1c5a      	adds	r2, r3, #1
 8009c14:	6022      	str	r2, [r4, #0]
 8009c16:	7019      	strb	r1, [r3, #0]
 8009c18:	68a3      	ldr	r3, [r4, #8]
 8009c1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	60a3      	str	r3, [r4, #8]
 8009c22:	2900      	cmp	r1, #0
 8009c24:	d1ed      	bne.n	8009c02 <_puts_r+0x52>
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	da11      	bge.n	8009c4e <_puts_r+0x9e>
 8009c2a:	4622      	mov	r2, r4
 8009c2c:	210a      	movs	r1, #10
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f000 f85f 	bl	8009cf2 <__swbuf_r>
 8009c34:	3001      	adds	r0, #1
 8009c36:	d0d7      	beq.n	8009be8 <_puts_r+0x38>
 8009c38:	250a      	movs	r5, #10
 8009c3a:	e7d7      	b.n	8009bec <_puts_r+0x3c>
 8009c3c:	4622      	mov	r2, r4
 8009c3e:	4628      	mov	r0, r5
 8009c40:	f000 f857 	bl	8009cf2 <__swbuf_r>
 8009c44:	3001      	adds	r0, #1
 8009c46:	d1e7      	bne.n	8009c18 <_puts_r+0x68>
 8009c48:	e7ce      	b.n	8009be8 <_puts_r+0x38>
 8009c4a:	3e01      	subs	r6, #1
 8009c4c:	e7e4      	b.n	8009c18 <_puts_r+0x68>
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	1c5a      	adds	r2, r3, #1
 8009c52:	6022      	str	r2, [r4, #0]
 8009c54:	220a      	movs	r2, #10
 8009c56:	701a      	strb	r2, [r3, #0]
 8009c58:	e7ee      	b.n	8009c38 <_puts_r+0x88>
	...

08009c5c <puts>:
 8009c5c:	4b02      	ldr	r3, [pc, #8]	@ (8009c68 <puts+0xc>)
 8009c5e:	4601      	mov	r1, r0
 8009c60:	6818      	ldr	r0, [r3, #0]
 8009c62:	f7ff bfa5 	b.w	8009bb0 <_puts_r>
 8009c66:	bf00      	nop
 8009c68:	20000188 	.word	0x20000188

08009c6c <__sread>:
 8009c6c:	b510      	push	{r4, lr}
 8009c6e:	460c      	mov	r4, r1
 8009c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c74:	f000 f90e 	bl	8009e94 <_read_r>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	bfab      	itete	ge
 8009c7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8009c80:	181b      	addge	r3, r3, r0
 8009c82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009c86:	bfac      	ite	ge
 8009c88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009c8a:	81a3      	strhlt	r3, [r4, #12]
 8009c8c:	bd10      	pop	{r4, pc}

08009c8e <__swrite>:
 8009c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c92:	461f      	mov	r7, r3
 8009c94:	898b      	ldrh	r3, [r1, #12]
 8009c96:	05db      	lsls	r3, r3, #23
 8009c98:	4605      	mov	r5, r0
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	4616      	mov	r6, r2
 8009c9e:	d505      	bpl.n	8009cac <__swrite+0x1e>
 8009ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f000 f8e2 	bl	8009e70 <_lseek_r>
 8009cac:	89a3      	ldrh	r3, [r4, #12]
 8009cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009cb6:	81a3      	strh	r3, [r4, #12]
 8009cb8:	4632      	mov	r2, r6
 8009cba:	463b      	mov	r3, r7
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc2:	f000 b8f9 	b.w	8009eb8 <_write_r>

08009cc6 <__sseek>:
 8009cc6:	b510      	push	{r4, lr}
 8009cc8:	460c      	mov	r4, r1
 8009cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cce:	f000 f8cf 	bl	8009e70 <_lseek_r>
 8009cd2:	1c43      	adds	r3, r0, #1
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	bf15      	itete	ne
 8009cd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009cda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009cde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009ce2:	81a3      	strheq	r3, [r4, #12]
 8009ce4:	bf18      	it	ne
 8009ce6:	81a3      	strhne	r3, [r4, #12]
 8009ce8:	bd10      	pop	{r4, pc}

08009cea <__sclose>:
 8009cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cee:	f000 b8af 	b.w	8009e50 <_close_r>

08009cf2 <__swbuf_r>:
 8009cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf4:	460e      	mov	r6, r1
 8009cf6:	4614      	mov	r4, r2
 8009cf8:	4605      	mov	r5, r0
 8009cfa:	b118      	cbz	r0, 8009d04 <__swbuf_r+0x12>
 8009cfc:	6a03      	ldr	r3, [r0, #32]
 8009cfe:	b90b      	cbnz	r3, 8009d04 <__swbuf_r+0x12>
 8009d00:	f7ff ff0e 	bl	8009b20 <__sinit>
 8009d04:	69a3      	ldr	r3, [r4, #24]
 8009d06:	60a3      	str	r3, [r4, #8]
 8009d08:	89a3      	ldrh	r3, [r4, #12]
 8009d0a:	071a      	lsls	r2, r3, #28
 8009d0c:	d501      	bpl.n	8009d12 <__swbuf_r+0x20>
 8009d0e:	6923      	ldr	r3, [r4, #16]
 8009d10:	b943      	cbnz	r3, 8009d24 <__swbuf_r+0x32>
 8009d12:	4621      	mov	r1, r4
 8009d14:	4628      	mov	r0, r5
 8009d16:	f000 f82b 	bl	8009d70 <__swsetup_r>
 8009d1a:	b118      	cbz	r0, 8009d24 <__swbuf_r+0x32>
 8009d1c:	f04f 37ff 	mov.w	r7, #4294967295
 8009d20:	4638      	mov	r0, r7
 8009d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	6922      	ldr	r2, [r4, #16]
 8009d28:	1a98      	subs	r0, r3, r2
 8009d2a:	6963      	ldr	r3, [r4, #20]
 8009d2c:	b2f6      	uxtb	r6, r6
 8009d2e:	4283      	cmp	r3, r0
 8009d30:	4637      	mov	r7, r6
 8009d32:	dc05      	bgt.n	8009d40 <__swbuf_r+0x4e>
 8009d34:	4621      	mov	r1, r4
 8009d36:	4628      	mov	r0, r5
 8009d38:	f001 fd72 	bl	800b820 <_fflush_r>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d1ed      	bne.n	8009d1c <__swbuf_r+0x2a>
 8009d40:	68a3      	ldr	r3, [r4, #8]
 8009d42:	3b01      	subs	r3, #1
 8009d44:	60a3      	str	r3, [r4, #8]
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	1c5a      	adds	r2, r3, #1
 8009d4a:	6022      	str	r2, [r4, #0]
 8009d4c:	701e      	strb	r6, [r3, #0]
 8009d4e:	6962      	ldr	r2, [r4, #20]
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d004      	beq.n	8009d60 <__swbuf_r+0x6e>
 8009d56:	89a3      	ldrh	r3, [r4, #12]
 8009d58:	07db      	lsls	r3, r3, #31
 8009d5a:	d5e1      	bpl.n	8009d20 <__swbuf_r+0x2e>
 8009d5c:	2e0a      	cmp	r6, #10
 8009d5e:	d1df      	bne.n	8009d20 <__swbuf_r+0x2e>
 8009d60:	4621      	mov	r1, r4
 8009d62:	4628      	mov	r0, r5
 8009d64:	f001 fd5c 	bl	800b820 <_fflush_r>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d0d9      	beq.n	8009d20 <__swbuf_r+0x2e>
 8009d6c:	e7d6      	b.n	8009d1c <__swbuf_r+0x2a>
	...

08009d70 <__swsetup_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	4b29      	ldr	r3, [pc, #164]	@ (8009e18 <__swsetup_r+0xa8>)
 8009d74:	4605      	mov	r5, r0
 8009d76:	6818      	ldr	r0, [r3, #0]
 8009d78:	460c      	mov	r4, r1
 8009d7a:	b118      	cbz	r0, 8009d84 <__swsetup_r+0x14>
 8009d7c:	6a03      	ldr	r3, [r0, #32]
 8009d7e:	b90b      	cbnz	r3, 8009d84 <__swsetup_r+0x14>
 8009d80:	f7ff fece 	bl	8009b20 <__sinit>
 8009d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d88:	0719      	lsls	r1, r3, #28
 8009d8a:	d422      	bmi.n	8009dd2 <__swsetup_r+0x62>
 8009d8c:	06da      	lsls	r2, r3, #27
 8009d8e:	d407      	bmi.n	8009da0 <__swsetup_r+0x30>
 8009d90:	2209      	movs	r2, #9
 8009d92:	602a      	str	r2, [r5, #0]
 8009d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d98:	81a3      	strh	r3, [r4, #12]
 8009d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9e:	e033      	b.n	8009e08 <__swsetup_r+0x98>
 8009da0:	0758      	lsls	r0, r3, #29
 8009da2:	d512      	bpl.n	8009dca <__swsetup_r+0x5a>
 8009da4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009da6:	b141      	cbz	r1, 8009dba <__swsetup_r+0x4a>
 8009da8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dac:	4299      	cmp	r1, r3
 8009dae:	d002      	beq.n	8009db6 <__swsetup_r+0x46>
 8009db0:	4628      	mov	r0, r5
 8009db2:	f000 f8df 	bl	8009f74 <_free_r>
 8009db6:	2300      	movs	r3, #0
 8009db8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009dba:	89a3      	ldrh	r3, [r4, #12]
 8009dbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009dc0:	81a3      	strh	r3, [r4, #12]
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	6063      	str	r3, [r4, #4]
 8009dc6:	6923      	ldr	r3, [r4, #16]
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	89a3      	ldrh	r3, [r4, #12]
 8009dcc:	f043 0308 	orr.w	r3, r3, #8
 8009dd0:	81a3      	strh	r3, [r4, #12]
 8009dd2:	6923      	ldr	r3, [r4, #16]
 8009dd4:	b94b      	cbnz	r3, 8009dea <__swsetup_r+0x7a>
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009de0:	d003      	beq.n	8009dea <__swsetup_r+0x7a>
 8009de2:	4621      	mov	r1, r4
 8009de4:	4628      	mov	r0, r5
 8009de6:	f001 fd69 	bl	800b8bc <__smakebuf_r>
 8009dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dee:	f013 0201 	ands.w	r2, r3, #1
 8009df2:	d00a      	beq.n	8009e0a <__swsetup_r+0x9a>
 8009df4:	2200      	movs	r2, #0
 8009df6:	60a2      	str	r2, [r4, #8]
 8009df8:	6962      	ldr	r2, [r4, #20]
 8009dfa:	4252      	negs	r2, r2
 8009dfc:	61a2      	str	r2, [r4, #24]
 8009dfe:	6922      	ldr	r2, [r4, #16]
 8009e00:	b942      	cbnz	r2, 8009e14 <__swsetup_r+0xa4>
 8009e02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e06:	d1c5      	bne.n	8009d94 <__swsetup_r+0x24>
 8009e08:	bd38      	pop	{r3, r4, r5, pc}
 8009e0a:	0799      	lsls	r1, r3, #30
 8009e0c:	bf58      	it	pl
 8009e0e:	6962      	ldrpl	r2, [r4, #20]
 8009e10:	60a2      	str	r2, [r4, #8]
 8009e12:	e7f4      	b.n	8009dfe <__swsetup_r+0x8e>
 8009e14:	2000      	movs	r0, #0
 8009e16:	e7f7      	b.n	8009e08 <__swsetup_r+0x98>
 8009e18:	20000188 	.word	0x20000188

08009e1c <memset>:
 8009e1c:	4402      	add	r2, r0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d100      	bne.n	8009e26 <memset+0xa>
 8009e24:	4770      	bx	lr
 8009e26:	f803 1b01 	strb.w	r1, [r3], #1
 8009e2a:	e7f9      	b.n	8009e20 <memset+0x4>

08009e2c <strncmp>:
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	b16a      	cbz	r2, 8009e4c <strncmp+0x20>
 8009e30:	3901      	subs	r1, #1
 8009e32:	1884      	adds	r4, r0, r2
 8009e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e38:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d103      	bne.n	8009e48 <strncmp+0x1c>
 8009e40:	42a0      	cmp	r0, r4
 8009e42:	d001      	beq.n	8009e48 <strncmp+0x1c>
 8009e44:	2a00      	cmp	r2, #0
 8009e46:	d1f5      	bne.n	8009e34 <strncmp+0x8>
 8009e48:	1ad0      	subs	r0, r2, r3
 8009e4a:	bd10      	pop	{r4, pc}
 8009e4c:	4610      	mov	r0, r2
 8009e4e:	e7fc      	b.n	8009e4a <strncmp+0x1e>

08009e50 <_close_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4d06      	ldr	r5, [pc, #24]	@ (8009e6c <_close_r+0x1c>)
 8009e54:	2300      	movs	r3, #0
 8009e56:	4604      	mov	r4, r0
 8009e58:	4608      	mov	r0, r1
 8009e5a:	602b      	str	r3, [r5, #0]
 8009e5c:	f7fb fd30 	bl	80058c0 <_close>
 8009e60:	1c43      	adds	r3, r0, #1
 8009e62:	d102      	bne.n	8009e6a <_close_r+0x1a>
 8009e64:	682b      	ldr	r3, [r5, #0]
 8009e66:	b103      	cbz	r3, 8009e6a <_close_r+0x1a>
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}
 8009e6c:	200009b0 	.word	0x200009b0

08009e70 <_lseek_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	4d07      	ldr	r5, [pc, #28]	@ (8009e90 <_lseek_r+0x20>)
 8009e74:	4604      	mov	r4, r0
 8009e76:	4608      	mov	r0, r1
 8009e78:	4611      	mov	r1, r2
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	602a      	str	r2, [r5, #0]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	f7fb fd45 	bl	800590e <_lseek>
 8009e84:	1c43      	adds	r3, r0, #1
 8009e86:	d102      	bne.n	8009e8e <_lseek_r+0x1e>
 8009e88:	682b      	ldr	r3, [r5, #0]
 8009e8a:	b103      	cbz	r3, 8009e8e <_lseek_r+0x1e>
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	bd38      	pop	{r3, r4, r5, pc}
 8009e90:	200009b0 	.word	0x200009b0

08009e94 <_read_r>:
 8009e94:	b538      	push	{r3, r4, r5, lr}
 8009e96:	4d07      	ldr	r5, [pc, #28]	@ (8009eb4 <_read_r+0x20>)
 8009e98:	4604      	mov	r4, r0
 8009e9a:	4608      	mov	r0, r1
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	602a      	str	r2, [r5, #0]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	f7fb fcef 	bl	8005886 <_read>
 8009ea8:	1c43      	adds	r3, r0, #1
 8009eaa:	d102      	bne.n	8009eb2 <_read_r+0x1e>
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	b103      	cbz	r3, 8009eb2 <_read_r+0x1e>
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	bd38      	pop	{r3, r4, r5, pc}
 8009eb4:	200009b0 	.word	0x200009b0

08009eb8 <_write_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4d07      	ldr	r5, [pc, #28]	@ (8009ed8 <_write_r+0x20>)
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	4608      	mov	r0, r1
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	602a      	str	r2, [r5, #0]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	f7fa ffd0 	bl	8004e6c <_write>
 8009ecc:	1c43      	adds	r3, r0, #1
 8009ece:	d102      	bne.n	8009ed6 <_write_r+0x1e>
 8009ed0:	682b      	ldr	r3, [r5, #0]
 8009ed2:	b103      	cbz	r3, 8009ed6 <_write_r+0x1e>
 8009ed4:	6023      	str	r3, [r4, #0]
 8009ed6:	bd38      	pop	{r3, r4, r5, pc}
 8009ed8:	200009b0 	.word	0x200009b0

08009edc <__errno>:
 8009edc:	4b01      	ldr	r3, [pc, #4]	@ (8009ee4 <__errno+0x8>)
 8009ede:	6818      	ldr	r0, [r3, #0]
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	20000188 	.word	0x20000188

08009ee8 <__libc_init_array>:
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	4d0d      	ldr	r5, [pc, #52]	@ (8009f20 <__libc_init_array+0x38>)
 8009eec:	4c0d      	ldr	r4, [pc, #52]	@ (8009f24 <__libc_init_array+0x3c>)
 8009eee:	1b64      	subs	r4, r4, r5
 8009ef0:	10a4      	asrs	r4, r4, #2
 8009ef2:	2600      	movs	r6, #0
 8009ef4:	42a6      	cmp	r6, r4
 8009ef6:	d109      	bne.n	8009f0c <__libc_init_array+0x24>
 8009ef8:	4d0b      	ldr	r5, [pc, #44]	@ (8009f28 <__libc_init_array+0x40>)
 8009efa:	4c0c      	ldr	r4, [pc, #48]	@ (8009f2c <__libc_init_array+0x44>)
 8009efc:	f003 fb94 	bl	800d628 <_init>
 8009f00:	1b64      	subs	r4, r4, r5
 8009f02:	10a4      	asrs	r4, r4, #2
 8009f04:	2600      	movs	r6, #0
 8009f06:	42a6      	cmp	r6, r4
 8009f08:	d105      	bne.n	8009f16 <__libc_init_array+0x2e>
 8009f0a:	bd70      	pop	{r4, r5, r6, pc}
 8009f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f10:	4798      	blx	r3
 8009f12:	3601      	adds	r6, #1
 8009f14:	e7ee      	b.n	8009ef4 <__libc_init_array+0xc>
 8009f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f1a:	4798      	blx	r3
 8009f1c:	3601      	adds	r6, #1
 8009f1e:	e7f2      	b.n	8009f06 <__libc_init_array+0x1e>
 8009f20:	0800dbf0 	.word	0x0800dbf0
 8009f24:	0800dbf0 	.word	0x0800dbf0
 8009f28:	0800dbf0 	.word	0x0800dbf0
 8009f2c:	0800dbf4 	.word	0x0800dbf4

08009f30 <__retarget_lock_init_recursive>:
 8009f30:	4770      	bx	lr

08009f32 <__retarget_lock_acquire_recursive>:
 8009f32:	4770      	bx	lr

08009f34 <__retarget_lock_release_recursive>:
 8009f34:	4770      	bx	lr

08009f36 <memcpy>:
 8009f36:	440a      	add	r2, r1
 8009f38:	4291      	cmp	r1, r2
 8009f3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f3e:	d100      	bne.n	8009f42 <memcpy+0xc>
 8009f40:	4770      	bx	lr
 8009f42:	b510      	push	{r4, lr}
 8009f44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f4c:	4291      	cmp	r1, r2
 8009f4e:	d1f9      	bne.n	8009f44 <memcpy+0xe>
 8009f50:	bd10      	pop	{r4, pc}
 8009f52:	0000      	movs	r0, r0
 8009f54:	0000      	movs	r0, r0
	...

08009f58 <nan>:
 8009f58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009f60 <nan+0x8>
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	00000000 	.word	0x00000000
 8009f64:	7ff80000 	.word	0x7ff80000

08009f68 <nanf>:
 8009f68:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009f70 <nanf+0x8>
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	7fc00000 	.word	0x7fc00000

08009f74 <_free_r>:
 8009f74:	b538      	push	{r3, r4, r5, lr}
 8009f76:	4605      	mov	r5, r0
 8009f78:	2900      	cmp	r1, #0
 8009f7a:	d041      	beq.n	800a000 <_free_r+0x8c>
 8009f7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f80:	1f0c      	subs	r4, r1, #4
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	bfb8      	it	lt
 8009f86:	18e4      	addlt	r4, r4, r3
 8009f88:	f000 fc2c 	bl	800a7e4 <__malloc_lock>
 8009f8c:	4a1d      	ldr	r2, [pc, #116]	@ (800a004 <_free_r+0x90>)
 8009f8e:	6813      	ldr	r3, [r2, #0]
 8009f90:	b933      	cbnz	r3, 8009fa0 <_free_r+0x2c>
 8009f92:	6063      	str	r3, [r4, #4]
 8009f94:	6014      	str	r4, [r2, #0]
 8009f96:	4628      	mov	r0, r5
 8009f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f9c:	f000 bc28 	b.w	800a7f0 <__malloc_unlock>
 8009fa0:	42a3      	cmp	r3, r4
 8009fa2:	d908      	bls.n	8009fb6 <_free_r+0x42>
 8009fa4:	6820      	ldr	r0, [r4, #0]
 8009fa6:	1821      	adds	r1, r4, r0
 8009fa8:	428b      	cmp	r3, r1
 8009faa:	bf01      	itttt	eq
 8009fac:	6819      	ldreq	r1, [r3, #0]
 8009fae:	685b      	ldreq	r3, [r3, #4]
 8009fb0:	1809      	addeq	r1, r1, r0
 8009fb2:	6021      	streq	r1, [r4, #0]
 8009fb4:	e7ed      	b.n	8009f92 <_free_r+0x1e>
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	b10b      	cbz	r3, 8009fc0 <_free_r+0x4c>
 8009fbc:	42a3      	cmp	r3, r4
 8009fbe:	d9fa      	bls.n	8009fb6 <_free_r+0x42>
 8009fc0:	6811      	ldr	r1, [r2, #0]
 8009fc2:	1850      	adds	r0, r2, r1
 8009fc4:	42a0      	cmp	r0, r4
 8009fc6:	d10b      	bne.n	8009fe0 <_free_r+0x6c>
 8009fc8:	6820      	ldr	r0, [r4, #0]
 8009fca:	4401      	add	r1, r0
 8009fcc:	1850      	adds	r0, r2, r1
 8009fce:	4283      	cmp	r3, r0
 8009fd0:	6011      	str	r1, [r2, #0]
 8009fd2:	d1e0      	bne.n	8009f96 <_free_r+0x22>
 8009fd4:	6818      	ldr	r0, [r3, #0]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	6053      	str	r3, [r2, #4]
 8009fda:	4408      	add	r0, r1
 8009fdc:	6010      	str	r0, [r2, #0]
 8009fde:	e7da      	b.n	8009f96 <_free_r+0x22>
 8009fe0:	d902      	bls.n	8009fe8 <_free_r+0x74>
 8009fe2:	230c      	movs	r3, #12
 8009fe4:	602b      	str	r3, [r5, #0]
 8009fe6:	e7d6      	b.n	8009f96 <_free_r+0x22>
 8009fe8:	6820      	ldr	r0, [r4, #0]
 8009fea:	1821      	adds	r1, r4, r0
 8009fec:	428b      	cmp	r3, r1
 8009fee:	bf04      	itt	eq
 8009ff0:	6819      	ldreq	r1, [r3, #0]
 8009ff2:	685b      	ldreq	r3, [r3, #4]
 8009ff4:	6063      	str	r3, [r4, #4]
 8009ff6:	bf04      	itt	eq
 8009ff8:	1809      	addeq	r1, r1, r0
 8009ffa:	6021      	streq	r1, [r4, #0]
 8009ffc:	6054      	str	r4, [r2, #4]
 8009ffe:	e7ca      	b.n	8009f96 <_free_r+0x22>
 800a000:	bd38      	pop	{r3, r4, r5, pc}
 800a002:	bf00      	nop
 800a004:	200009bc 	.word	0x200009bc

0800a008 <rshift>:
 800a008:	6903      	ldr	r3, [r0, #16]
 800a00a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a00e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a012:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a016:	f100 0414 	add.w	r4, r0, #20
 800a01a:	dd45      	ble.n	800a0a8 <rshift+0xa0>
 800a01c:	f011 011f 	ands.w	r1, r1, #31
 800a020:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a024:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a028:	d10c      	bne.n	800a044 <rshift+0x3c>
 800a02a:	f100 0710 	add.w	r7, r0, #16
 800a02e:	4629      	mov	r1, r5
 800a030:	42b1      	cmp	r1, r6
 800a032:	d334      	bcc.n	800a09e <rshift+0x96>
 800a034:	1a9b      	subs	r3, r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	1eea      	subs	r2, r5, #3
 800a03a:	4296      	cmp	r6, r2
 800a03c:	bf38      	it	cc
 800a03e:	2300      	movcc	r3, #0
 800a040:	4423      	add	r3, r4
 800a042:	e015      	b.n	800a070 <rshift+0x68>
 800a044:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a048:	f1c1 0820 	rsb	r8, r1, #32
 800a04c:	40cf      	lsrs	r7, r1
 800a04e:	f105 0e04 	add.w	lr, r5, #4
 800a052:	46a1      	mov	r9, r4
 800a054:	4576      	cmp	r6, lr
 800a056:	46f4      	mov	ip, lr
 800a058:	d815      	bhi.n	800a086 <rshift+0x7e>
 800a05a:	1a9a      	subs	r2, r3, r2
 800a05c:	0092      	lsls	r2, r2, #2
 800a05e:	3a04      	subs	r2, #4
 800a060:	3501      	adds	r5, #1
 800a062:	42ae      	cmp	r6, r5
 800a064:	bf38      	it	cc
 800a066:	2200      	movcc	r2, #0
 800a068:	18a3      	adds	r3, r4, r2
 800a06a:	50a7      	str	r7, [r4, r2]
 800a06c:	b107      	cbz	r7, 800a070 <rshift+0x68>
 800a06e:	3304      	adds	r3, #4
 800a070:	1b1a      	subs	r2, r3, r4
 800a072:	42a3      	cmp	r3, r4
 800a074:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a078:	bf08      	it	eq
 800a07a:	2300      	moveq	r3, #0
 800a07c:	6102      	str	r2, [r0, #16]
 800a07e:	bf08      	it	eq
 800a080:	6143      	streq	r3, [r0, #20]
 800a082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a086:	f8dc c000 	ldr.w	ip, [ip]
 800a08a:	fa0c fc08 	lsl.w	ip, ip, r8
 800a08e:	ea4c 0707 	orr.w	r7, ip, r7
 800a092:	f849 7b04 	str.w	r7, [r9], #4
 800a096:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a09a:	40cf      	lsrs	r7, r1
 800a09c:	e7da      	b.n	800a054 <rshift+0x4c>
 800a09e:	f851 cb04 	ldr.w	ip, [r1], #4
 800a0a2:	f847 cf04 	str.w	ip, [r7, #4]!
 800a0a6:	e7c3      	b.n	800a030 <rshift+0x28>
 800a0a8:	4623      	mov	r3, r4
 800a0aa:	e7e1      	b.n	800a070 <rshift+0x68>

0800a0ac <__hexdig_fun>:
 800a0ac:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a0b0:	2b09      	cmp	r3, #9
 800a0b2:	d802      	bhi.n	800a0ba <__hexdig_fun+0xe>
 800a0b4:	3820      	subs	r0, #32
 800a0b6:	b2c0      	uxtb	r0, r0
 800a0b8:	4770      	bx	lr
 800a0ba:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a0be:	2b05      	cmp	r3, #5
 800a0c0:	d801      	bhi.n	800a0c6 <__hexdig_fun+0x1a>
 800a0c2:	3847      	subs	r0, #71	@ 0x47
 800a0c4:	e7f7      	b.n	800a0b6 <__hexdig_fun+0xa>
 800a0c6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a0ca:	2b05      	cmp	r3, #5
 800a0cc:	d801      	bhi.n	800a0d2 <__hexdig_fun+0x26>
 800a0ce:	3827      	subs	r0, #39	@ 0x27
 800a0d0:	e7f1      	b.n	800a0b6 <__hexdig_fun+0xa>
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	4770      	bx	lr
	...

0800a0d8 <__gethex>:
 800a0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0dc:	b085      	sub	sp, #20
 800a0de:	468a      	mov	sl, r1
 800a0e0:	9302      	str	r3, [sp, #8]
 800a0e2:	680b      	ldr	r3, [r1, #0]
 800a0e4:	9001      	str	r0, [sp, #4]
 800a0e6:	4690      	mov	r8, r2
 800a0e8:	1c9c      	adds	r4, r3, #2
 800a0ea:	46a1      	mov	r9, r4
 800a0ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a0f0:	2830      	cmp	r0, #48	@ 0x30
 800a0f2:	d0fa      	beq.n	800a0ea <__gethex+0x12>
 800a0f4:	eba9 0303 	sub.w	r3, r9, r3
 800a0f8:	f1a3 0b02 	sub.w	fp, r3, #2
 800a0fc:	f7ff ffd6 	bl	800a0ac <__hexdig_fun>
 800a100:	4605      	mov	r5, r0
 800a102:	2800      	cmp	r0, #0
 800a104:	d168      	bne.n	800a1d8 <__gethex+0x100>
 800a106:	49a0      	ldr	r1, [pc, #640]	@ (800a388 <__gethex+0x2b0>)
 800a108:	2201      	movs	r2, #1
 800a10a:	4648      	mov	r0, r9
 800a10c:	f7ff fe8e 	bl	8009e2c <strncmp>
 800a110:	4607      	mov	r7, r0
 800a112:	2800      	cmp	r0, #0
 800a114:	d167      	bne.n	800a1e6 <__gethex+0x10e>
 800a116:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a11a:	4626      	mov	r6, r4
 800a11c:	f7ff ffc6 	bl	800a0ac <__hexdig_fun>
 800a120:	2800      	cmp	r0, #0
 800a122:	d062      	beq.n	800a1ea <__gethex+0x112>
 800a124:	4623      	mov	r3, r4
 800a126:	7818      	ldrb	r0, [r3, #0]
 800a128:	2830      	cmp	r0, #48	@ 0x30
 800a12a:	4699      	mov	r9, r3
 800a12c:	f103 0301 	add.w	r3, r3, #1
 800a130:	d0f9      	beq.n	800a126 <__gethex+0x4e>
 800a132:	f7ff ffbb 	bl	800a0ac <__hexdig_fun>
 800a136:	fab0 f580 	clz	r5, r0
 800a13a:	096d      	lsrs	r5, r5, #5
 800a13c:	f04f 0b01 	mov.w	fp, #1
 800a140:	464a      	mov	r2, r9
 800a142:	4616      	mov	r6, r2
 800a144:	3201      	adds	r2, #1
 800a146:	7830      	ldrb	r0, [r6, #0]
 800a148:	f7ff ffb0 	bl	800a0ac <__hexdig_fun>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	d1f8      	bne.n	800a142 <__gethex+0x6a>
 800a150:	498d      	ldr	r1, [pc, #564]	@ (800a388 <__gethex+0x2b0>)
 800a152:	2201      	movs	r2, #1
 800a154:	4630      	mov	r0, r6
 800a156:	f7ff fe69 	bl	8009e2c <strncmp>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d13f      	bne.n	800a1de <__gethex+0x106>
 800a15e:	b944      	cbnz	r4, 800a172 <__gethex+0x9a>
 800a160:	1c74      	adds	r4, r6, #1
 800a162:	4622      	mov	r2, r4
 800a164:	4616      	mov	r6, r2
 800a166:	3201      	adds	r2, #1
 800a168:	7830      	ldrb	r0, [r6, #0]
 800a16a:	f7ff ff9f 	bl	800a0ac <__hexdig_fun>
 800a16e:	2800      	cmp	r0, #0
 800a170:	d1f8      	bne.n	800a164 <__gethex+0x8c>
 800a172:	1ba4      	subs	r4, r4, r6
 800a174:	00a7      	lsls	r7, r4, #2
 800a176:	7833      	ldrb	r3, [r6, #0]
 800a178:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a17c:	2b50      	cmp	r3, #80	@ 0x50
 800a17e:	d13e      	bne.n	800a1fe <__gethex+0x126>
 800a180:	7873      	ldrb	r3, [r6, #1]
 800a182:	2b2b      	cmp	r3, #43	@ 0x2b
 800a184:	d033      	beq.n	800a1ee <__gethex+0x116>
 800a186:	2b2d      	cmp	r3, #45	@ 0x2d
 800a188:	d034      	beq.n	800a1f4 <__gethex+0x11c>
 800a18a:	1c71      	adds	r1, r6, #1
 800a18c:	2400      	movs	r4, #0
 800a18e:	7808      	ldrb	r0, [r1, #0]
 800a190:	f7ff ff8c 	bl	800a0ac <__hexdig_fun>
 800a194:	1e43      	subs	r3, r0, #1
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b18      	cmp	r3, #24
 800a19a:	d830      	bhi.n	800a1fe <__gethex+0x126>
 800a19c:	f1a0 0210 	sub.w	r2, r0, #16
 800a1a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a1a4:	f7ff ff82 	bl	800a0ac <__hexdig_fun>
 800a1a8:	f100 3cff 	add.w	ip, r0, #4294967295
 800a1ac:	fa5f fc8c 	uxtb.w	ip, ip
 800a1b0:	f1bc 0f18 	cmp.w	ip, #24
 800a1b4:	f04f 030a 	mov.w	r3, #10
 800a1b8:	d91e      	bls.n	800a1f8 <__gethex+0x120>
 800a1ba:	b104      	cbz	r4, 800a1be <__gethex+0xe6>
 800a1bc:	4252      	negs	r2, r2
 800a1be:	4417      	add	r7, r2
 800a1c0:	f8ca 1000 	str.w	r1, [sl]
 800a1c4:	b1ed      	cbz	r5, 800a202 <__gethex+0x12a>
 800a1c6:	f1bb 0f00 	cmp.w	fp, #0
 800a1ca:	bf0c      	ite	eq
 800a1cc:	2506      	moveq	r5, #6
 800a1ce:	2500      	movne	r5, #0
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	b005      	add	sp, #20
 800a1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d8:	2500      	movs	r5, #0
 800a1da:	462c      	mov	r4, r5
 800a1dc:	e7b0      	b.n	800a140 <__gethex+0x68>
 800a1de:	2c00      	cmp	r4, #0
 800a1e0:	d1c7      	bne.n	800a172 <__gethex+0x9a>
 800a1e2:	4627      	mov	r7, r4
 800a1e4:	e7c7      	b.n	800a176 <__gethex+0x9e>
 800a1e6:	464e      	mov	r6, r9
 800a1e8:	462f      	mov	r7, r5
 800a1ea:	2501      	movs	r5, #1
 800a1ec:	e7c3      	b.n	800a176 <__gethex+0x9e>
 800a1ee:	2400      	movs	r4, #0
 800a1f0:	1cb1      	adds	r1, r6, #2
 800a1f2:	e7cc      	b.n	800a18e <__gethex+0xb6>
 800a1f4:	2401      	movs	r4, #1
 800a1f6:	e7fb      	b.n	800a1f0 <__gethex+0x118>
 800a1f8:	fb03 0002 	mla	r0, r3, r2, r0
 800a1fc:	e7ce      	b.n	800a19c <__gethex+0xc4>
 800a1fe:	4631      	mov	r1, r6
 800a200:	e7de      	b.n	800a1c0 <__gethex+0xe8>
 800a202:	eba6 0309 	sub.w	r3, r6, r9
 800a206:	3b01      	subs	r3, #1
 800a208:	4629      	mov	r1, r5
 800a20a:	2b07      	cmp	r3, #7
 800a20c:	dc0a      	bgt.n	800a224 <__gethex+0x14c>
 800a20e:	9801      	ldr	r0, [sp, #4]
 800a210:	f000 faf4 	bl	800a7fc <_Balloc>
 800a214:	4604      	mov	r4, r0
 800a216:	b940      	cbnz	r0, 800a22a <__gethex+0x152>
 800a218:	4b5c      	ldr	r3, [pc, #368]	@ (800a38c <__gethex+0x2b4>)
 800a21a:	4602      	mov	r2, r0
 800a21c:	21e4      	movs	r1, #228	@ 0xe4
 800a21e:	485c      	ldr	r0, [pc, #368]	@ (800a390 <__gethex+0x2b8>)
 800a220:	f001 fbba 	bl	800b998 <__assert_func>
 800a224:	3101      	adds	r1, #1
 800a226:	105b      	asrs	r3, r3, #1
 800a228:	e7ef      	b.n	800a20a <__gethex+0x132>
 800a22a:	f100 0a14 	add.w	sl, r0, #20
 800a22e:	2300      	movs	r3, #0
 800a230:	4655      	mov	r5, sl
 800a232:	469b      	mov	fp, r3
 800a234:	45b1      	cmp	r9, r6
 800a236:	d337      	bcc.n	800a2a8 <__gethex+0x1d0>
 800a238:	f845 bb04 	str.w	fp, [r5], #4
 800a23c:	eba5 050a 	sub.w	r5, r5, sl
 800a240:	10ad      	asrs	r5, r5, #2
 800a242:	6125      	str	r5, [r4, #16]
 800a244:	4658      	mov	r0, fp
 800a246:	f000 fbcb 	bl	800a9e0 <__hi0bits>
 800a24a:	016d      	lsls	r5, r5, #5
 800a24c:	f8d8 6000 	ldr.w	r6, [r8]
 800a250:	1a2d      	subs	r5, r5, r0
 800a252:	42b5      	cmp	r5, r6
 800a254:	dd54      	ble.n	800a300 <__gethex+0x228>
 800a256:	1bad      	subs	r5, r5, r6
 800a258:	4629      	mov	r1, r5
 800a25a:	4620      	mov	r0, r4
 800a25c:	f000 ff5f 	bl	800b11e <__any_on>
 800a260:	4681      	mov	r9, r0
 800a262:	b178      	cbz	r0, 800a284 <__gethex+0x1ac>
 800a264:	1e6b      	subs	r3, r5, #1
 800a266:	1159      	asrs	r1, r3, #5
 800a268:	f003 021f 	and.w	r2, r3, #31
 800a26c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a270:	f04f 0901 	mov.w	r9, #1
 800a274:	fa09 f202 	lsl.w	r2, r9, r2
 800a278:	420a      	tst	r2, r1
 800a27a:	d003      	beq.n	800a284 <__gethex+0x1ac>
 800a27c:	454b      	cmp	r3, r9
 800a27e:	dc36      	bgt.n	800a2ee <__gethex+0x216>
 800a280:	f04f 0902 	mov.w	r9, #2
 800a284:	4629      	mov	r1, r5
 800a286:	4620      	mov	r0, r4
 800a288:	f7ff febe 	bl	800a008 <rshift>
 800a28c:	442f      	add	r7, r5
 800a28e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a292:	42bb      	cmp	r3, r7
 800a294:	da42      	bge.n	800a31c <__gethex+0x244>
 800a296:	9801      	ldr	r0, [sp, #4]
 800a298:	4621      	mov	r1, r4
 800a29a:	f000 faef 	bl	800a87c <_Bfree>
 800a29e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	6013      	str	r3, [r2, #0]
 800a2a4:	25a3      	movs	r5, #163	@ 0xa3
 800a2a6:	e793      	b.n	800a1d0 <__gethex+0xf8>
 800a2a8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a2ac:	2a2e      	cmp	r2, #46	@ 0x2e
 800a2ae:	d012      	beq.n	800a2d6 <__gethex+0x1fe>
 800a2b0:	2b20      	cmp	r3, #32
 800a2b2:	d104      	bne.n	800a2be <__gethex+0x1e6>
 800a2b4:	f845 bb04 	str.w	fp, [r5], #4
 800a2b8:	f04f 0b00 	mov.w	fp, #0
 800a2bc:	465b      	mov	r3, fp
 800a2be:	7830      	ldrb	r0, [r6, #0]
 800a2c0:	9303      	str	r3, [sp, #12]
 800a2c2:	f7ff fef3 	bl	800a0ac <__hexdig_fun>
 800a2c6:	9b03      	ldr	r3, [sp, #12]
 800a2c8:	f000 000f 	and.w	r0, r0, #15
 800a2cc:	4098      	lsls	r0, r3
 800a2ce:	ea4b 0b00 	orr.w	fp, fp, r0
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	e7ae      	b.n	800a234 <__gethex+0x15c>
 800a2d6:	45b1      	cmp	r9, r6
 800a2d8:	d8ea      	bhi.n	800a2b0 <__gethex+0x1d8>
 800a2da:	492b      	ldr	r1, [pc, #172]	@ (800a388 <__gethex+0x2b0>)
 800a2dc:	9303      	str	r3, [sp, #12]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	f7ff fda3 	bl	8009e2c <strncmp>
 800a2e6:	9b03      	ldr	r3, [sp, #12]
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	d1e1      	bne.n	800a2b0 <__gethex+0x1d8>
 800a2ec:	e7a2      	b.n	800a234 <__gethex+0x15c>
 800a2ee:	1ea9      	subs	r1, r5, #2
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f000 ff14 	bl	800b11e <__any_on>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d0c2      	beq.n	800a280 <__gethex+0x1a8>
 800a2fa:	f04f 0903 	mov.w	r9, #3
 800a2fe:	e7c1      	b.n	800a284 <__gethex+0x1ac>
 800a300:	da09      	bge.n	800a316 <__gethex+0x23e>
 800a302:	1b75      	subs	r5, r6, r5
 800a304:	4621      	mov	r1, r4
 800a306:	9801      	ldr	r0, [sp, #4]
 800a308:	462a      	mov	r2, r5
 800a30a:	f000 fccf 	bl	800acac <__lshift>
 800a30e:	1b7f      	subs	r7, r7, r5
 800a310:	4604      	mov	r4, r0
 800a312:	f100 0a14 	add.w	sl, r0, #20
 800a316:	f04f 0900 	mov.w	r9, #0
 800a31a:	e7b8      	b.n	800a28e <__gethex+0x1b6>
 800a31c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a320:	42bd      	cmp	r5, r7
 800a322:	dd6f      	ble.n	800a404 <__gethex+0x32c>
 800a324:	1bed      	subs	r5, r5, r7
 800a326:	42ae      	cmp	r6, r5
 800a328:	dc34      	bgt.n	800a394 <__gethex+0x2bc>
 800a32a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d022      	beq.n	800a378 <__gethex+0x2a0>
 800a332:	2b03      	cmp	r3, #3
 800a334:	d024      	beq.n	800a380 <__gethex+0x2a8>
 800a336:	2b01      	cmp	r3, #1
 800a338:	d115      	bne.n	800a366 <__gethex+0x28e>
 800a33a:	42ae      	cmp	r6, r5
 800a33c:	d113      	bne.n	800a366 <__gethex+0x28e>
 800a33e:	2e01      	cmp	r6, #1
 800a340:	d10b      	bne.n	800a35a <__gethex+0x282>
 800a342:	9a02      	ldr	r2, [sp, #8]
 800a344:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	2301      	movs	r3, #1
 800a34c:	6123      	str	r3, [r4, #16]
 800a34e:	f8ca 3000 	str.w	r3, [sl]
 800a352:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a354:	2562      	movs	r5, #98	@ 0x62
 800a356:	601c      	str	r4, [r3, #0]
 800a358:	e73a      	b.n	800a1d0 <__gethex+0xf8>
 800a35a:	1e71      	subs	r1, r6, #1
 800a35c:	4620      	mov	r0, r4
 800a35e:	f000 fede 	bl	800b11e <__any_on>
 800a362:	2800      	cmp	r0, #0
 800a364:	d1ed      	bne.n	800a342 <__gethex+0x26a>
 800a366:	9801      	ldr	r0, [sp, #4]
 800a368:	4621      	mov	r1, r4
 800a36a:	f000 fa87 	bl	800a87c <_Bfree>
 800a36e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a370:	2300      	movs	r3, #0
 800a372:	6013      	str	r3, [r2, #0]
 800a374:	2550      	movs	r5, #80	@ 0x50
 800a376:	e72b      	b.n	800a1d0 <__gethex+0xf8>
 800a378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1f3      	bne.n	800a366 <__gethex+0x28e>
 800a37e:	e7e0      	b.n	800a342 <__gethex+0x26a>
 800a380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1dd      	bne.n	800a342 <__gethex+0x26a>
 800a386:	e7ee      	b.n	800a366 <__gethex+0x28e>
 800a388:	0800d7b0 	.word	0x0800d7b0
 800a38c:	0800d818 	.word	0x0800d818
 800a390:	0800d829 	.word	0x0800d829
 800a394:	1e6f      	subs	r7, r5, #1
 800a396:	f1b9 0f00 	cmp.w	r9, #0
 800a39a:	d130      	bne.n	800a3fe <__gethex+0x326>
 800a39c:	b127      	cbz	r7, 800a3a8 <__gethex+0x2d0>
 800a39e:	4639      	mov	r1, r7
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f000 febc 	bl	800b11e <__any_on>
 800a3a6:	4681      	mov	r9, r0
 800a3a8:	117a      	asrs	r2, r7, #5
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a3b0:	f007 071f 	and.w	r7, r7, #31
 800a3b4:	40bb      	lsls	r3, r7
 800a3b6:	4213      	tst	r3, r2
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	bf18      	it	ne
 800a3be:	f049 0902 	orrne.w	r9, r9, #2
 800a3c2:	f7ff fe21 	bl	800a008 <rshift>
 800a3c6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a3ca:	1b76      	subs	r6, r6, r5
 800a3cc:	2502      	movs	r5, #2
 800a3ce:	f1b9 0f00 	cmp.w	r9, #0
 800a3d2:	d047      	beq.n	800a464 <__gethex+0x38c>
 800a3d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	d015      	beq.n	800a408 <__gethex+0x330>
 800a3dc:	2b03      	cmp	r3, #3
 800a3de:	d017      	beq.n	800a410 <__gethex+0x338>
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d109      	bne.n	800a3f8 <__gethex+0x320>
 800a3e4:	f019 0f02 	tst.w	r9, #2
 800a3e8:	d006      	beq.n	800a3f8 <__gethex+0x320>
 800a3ea:	f8da 3000 	ldr.w	r3, [sl]
 800a3ee:	ea49 0903 	orr.w	r9, r9, r3
 800a3f2:	f019 0f01 	tst.w	r9, #1
 800a3f6:	d10e      	bne.n	800a416 <__gethex+0x33e>
 800a3f8:	f045 0510 	orr.w	r5, r5, #16
 800a3fc:	e032      	b.n	800a464 <__gethex+0x38c>
 800a3fe:	f04f 0901 	mov.w	r9, #1
 800a402:	e7d1      	b.n	800a3a8 <__gethex+0x2d0>
 800a404:	2501      	movs	r5, #1
 800a406:	e7e2      	b.n	800a3ce <__gethex+0x2f6>
 800a408:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a40a:	f1c3 0301 	rsb	r3, r3, #1
 800a40e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a410:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a412:	2b00      	cmp	r3, #0
 800a414:	d0f0      	beq.n	800a3f8 <__gethex+0x320>
 800a416:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a41a:	f104 0314 	add.w	r3, r4, #20
 800a41e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a422:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a426:	f04f 0c00 	mov.w	ip, #0
 800a42a:	4618      	mov	r0, r3
 800a42c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a430:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a434:	d01b      	beq.n	800a46e <__gethex+0x396>
 800a436:	3201      	adds	r2, #1
 800a438:	6002      	str	r2, [r0, #0]
 800a43a:	2d02      	cmp	r5, #2
 800a43c:	f104 0314 	add.w	r3, r4, #20
 800a440:	d13c      	bne.n	800a4bc <__gethex+0x3e4>
 800a442:	f8d8 2000 	ldr.w	r2, [r8]
 800a446:	3a01      	subs	r2, #1
 800a448:	42b2      	cmp	r2, r6
 800a44a:	d109      	bne.n	800a460 <__gethex+0x388>
 800a44c:	1171      	asrs	r1, r6, #5
 800a44e:	2201      	movs	r2, #1
 800a450:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a454:	f006 061f 	and.w	r6, r6, #31
 800a458:	fa02 f606 	lsl.w	r6, r2, r6
 800a45c:	421e      	tst	r6, r3
 800a45e:	d13a      	bne.n	800a4d6 <__gethex+0x3fe>
 800a460:	f045 0520 	orr.w	r5, r5, #32
 800a464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a466:	601c      	str	r4, [r3, #0]
 800a468:	9b02      	ldr	r3, [sp, #8]
 800a46a:	601f      	str	r7, [r3, #0]
 800a46c:	e6b0      	b.n	800a1d0 <__gethex+0xf8>
 800a46e:	4299      	cmp	r1, r3
 800a470:	f843 cc04 	str.w	ip, [r3, #-4]
 800a474:	d8d9      	bhi.n	800a42a <__gethex+0x352>
 800a476:	68a3      	ldr	r3, [r4, #8]
 800a478:	459b      	cmp	fp, r3
 800a47a:	db17      	blt.n	800a4ac <__gethex+0x3d4>
 800a47c:	6861      	ldr	r1, [r4, #4]
 800a47e:	9801      	ldr	r0, [sp, #4]
 800a480:	3101      	adds	r1, #1
 800a482:	f000 f9bb 	bl	800a7fc <_Balloc>
 800a486:	4681      	mov	r9, r0
 800a488:	b918      	cbnz	r0, 800a492 <__gethex+0x3ba>
 800a48a:	4b1a      	ldr	r3, [pc, #104]	@ (800a4f4 <__gethex+0x41c>)
 800a48c:	4602      	mov	r2, r0
 800a48e:	2184      	movs	r1, #132	@ 0x84
 800a490:	e6c5      	b.n	800a21e <__gethex+0x146>
 800a492:	6922      	ldr	r2, [r4, #16]
 800a494:	3202      	adds	r2, #2
 800a496:	f104 010c 	add.w	r1, r4, #12
 800a49a:	0092      	lsls	r2, r2, #2
 800a49c:	300c      	adds	r0, #12
 800a49e:	f7ff fd4a 	bl	8009f36 <memcpy>
 800a4a2:	4621      	mov	r1, r4
 800a4a4:	9801      	ldr	r0, [sp, #4]
 800a4a6:	f000 f9e9 	bl	800a87c <_Bfree>
 800a4aa:	464c      	mov	r4, r9
 800a4ac:	6923      	ldr	r3, [r4, #16]
 800a4ae:	1c5a      	adds	r2, r3, #1
 800a4b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a4b4:	6122      	str	r2, [r4, #16]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	615a      	str	r2, [r3, #20]
 800a4ba:	e7be      	b.n	800a43a <__gethex+0x362>
 800a4bc:	6922      	ldr	r2, [r4, #16]
 800a4be:	455a      	cmp	r2, fp
 800a4c0:	dd0b      	ble.n	800a4da <__gethex+0x402>
 800a4c2:	2101      	movs	r1, #1
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f7ff fd9f 	bl	800a008 <rshift>
 800a4ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4ce:	3701      	adds	r7, #1
 800a4d0:	42bb      	cmp	r3, r7
 800a4d2:	f6ff aee0 	blt.w	800a296 <__gethex+0x1be>
 800a4d6:	2501      	movs	r5, #1
 800a4d8:	e7c2      	b.n	800a460 <__gethex+0x388>
 800a4da:	f016 061f 	ands.w	r6, r6, #31
 800a4de:	d0fa      	beq.n	800a4d6 <__gethex+0x3fe>
 800a4e0:	4453      	add	r3, sl
 800a4e2:	f1c6 0620 	rsb	r6, r6, #32
 800a4e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a4ea:	f000 fa79 	bl	800a9e0 <__hi0bits>
 800a4ee:	42b0      	cmp	r0, r6
 800a4f0:	dbe7      	blt.n	800a4c2 <__gethex+0x3ea>
 800a4f2:	e7f0      	b.n	800a4d6 <__gethex+0x3fe>
 800a4f4:	0800d818 	.word	0x0800d818

0800a4f8 <L_shift>:
 800a4f8:	f1c2 0208 	rsb	r2, r2, #8
 800a4fc:	0092      	lsls	r2, r2, #2
 800a4fe:	b570      	push	{r4, r5, r6, lr}
 800a500:	f1c2 0620 	rsb	r6, r2, #32
 800a504:	6843      	ldr	r3, [r0, #4]
 800a506:	6804      	ldr	r4, [r0, #0]
 800a508:	fa03 f506 	lsl.w	r5, r3, r6
 800a50c:	432c      	orrs	r4, r5
 800a50e:	40d3      	lsrs	r3, r2
 800a510:	6004      	str	r4, [r0, #0]
 800a512:	f840 3f04 	str.w	r3, [r0, #4]!
 800a516:	4288      	cmp	r0, r1
 800a518:	d3f4      	bcc.n	800a504 <L_shift+0xc>
 800a51a:	bd70      	pop	{r4, r5, r6, pc}

0800a51c <__match>:
 800a51c:	b530      	push	{r4, r5, lr}
 800a51e:	6803      	ldr	r3, [r0, #0]
 800a520:	3301      	adds	r3, #1
 800a522:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a526:	b914      	cbnz	r4, 800a52e <__match+0x12>
 800a528:	6003      	str	r3, [r0, #0]
 800a52a:	2001      	movs	r0, #1
 800a52c:	bd30      	pop	{r4, r5, pc}
 800a52e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a532:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a536:	2d19      	cmp	r5, #25
 800a538:	bf98      	it	ls
 800a53a:	3220      	addls	r2, #32
 800a53c:	42a2      	cmp	r2, r4
 800a53e:	d0f0      	beq.n	800a522 <__match+0x6>
 800a540:	2000      	movs	r0, #0
 800a542:	e7f3      	b.n	800a52c <__match+0x10>

0800a544 <__hexnan>:
 800a544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a548:	680b      	ldr	r3, [r1, #0]
 800a54a:	6801      	ldr	r1, [r0, #0]
 800a54c:	115e      	asrs	r6, r3, #5
 800a54e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a552:	f013 031f 	ands.w	r3, r3, #31
 800a556:	b087      	sub	sp, #28
 800a558:	bf18      	it	ne
 800a55a:	3604      	addne	r6, #4
 800a55c:	2500      	movs	r5, #0
 800a55e:	1f37      	subs	r7, r6, #4
 800a560:	4682      	mov	sl, r0
 800a562:	4690      	mov	r8, r2
 800a564:	9301      	str	r3, [sp, #4]
 800a566:	f846 5c04 	str.w	r5, [r6, #-4]
 800a56a:	46b9      	mov	r9, r7
 800a56c:	463c      	mov	r4, r7
 800a56e:	9502      	str	r5, [sp, #8]
 800a570:	46ab      	mov	fp, r5
 800a572:	784a      	ldrb	r2, [r1, #1]
 800a574:	1c4b      	adds	r3, r1, #1
 800a576:	9303      	str	r3, [sp, #12]
 800a578:	b342      	cbz	r2, 800a5cc <__hexnan+0x88>
 800a57a:	4610      	mov	r0, r2
 800a57c:	9105      	str	r1, [sp, #20]
 800a57e:	9204      	str	r2, [sp, #16]
 800a580:	f7ff fd94 	bl	800a0ac <__hexdig_fun>
 800a584:	2800      	cmp	r0, #0
 800a586:	d151      	bne.n	800a62c <__hexnan+0xe8>
 800a588:	9a04      	ldr	r2, [sp, #16]
 800a58a:	9905      	ldr	r1, [sp, #20]
 800a58c:	2a20      	cmp	r2, #32
 800a58e:	d818      	bhi.n	800a5c2 <__hexnan+0x7e>
 800a590:	9b02      	ldr	r3, [sp, #8]
 800a592:	459b      	cmp	fp, r3
 800a594:	dd13      	ble.n	800a5be <__hexnan+0x7a>
 800a596:	454c      	cmp	r4, r9
 800a598:	d206      	bcs.n	800a5a8 <__hexnan+0x64>
 800a59a:	2d07      	cmp	r5, #7
 800a59c:	dc04      	bgt.n	800a5a8 <__hexnan+0x64>
 800a59e:	462a      	mov	r2, r5
 800a5a0:	4649      	mov	r1, r9
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f7ff ffa8 	bl	800a4f8 <L_shift>
 800a5a8:	4544      	cmp	r4, r8
 800a5aa:	d952      	bls.n	800a652 <__hexnan+0x10e>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	f1a4 0904 	sub.w	r9, r4, #4
 800a5b2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a5b6:	f8cd b008 	str.w	fp, [sp, #8]
 800a5ba:	464c      	mov	r4, r9
 800a5bc:	461d      	mov	r5, r3
 800a5be:	9903      	ldr	r1, [sp, #12]
 800a5c0:	e7d7      	b.n	800a572 <__hexnan+0x2e>
 800a5c2:	2a29      	cmp	r2, #41	@ 0x29
 800a5c4:	d157      	bne.n	800a676 <__hexnan+0x132>
 800a5c6:	3102      	adds	r1, #2
 800a5c8:	f8ca 1000 	str.w	r1, [sl]
 800a5cc:	f1bb 0f00 	cmp.w	fp, #0
 800a5d0:	d051      	beq.n	800a676 <__hexnan+0x132>
 800a5d2:	454c      	cmp	r4, r9
 800a5d4:	d206      	bcs.n	800a5e4 <__hexnan+0xa0>
 800a5d6:	2d07      	cmp	r5, #7
 800a5d8:	dc04      	bgt.n	800a5e4 <__hexnan+0xa0>
 800a5da:	462a      	mov	r2, r5
 800a5dc:	4649      	mov	r1, r9
 800a5de:	4620      	mov	r0, r4
 800a5e0:	f7ff ff8a 	bl	800a4f8 <L_shift>
 800a5e4:	4544      	cmp	r4, r8
 800a5e6:	d936      	bls.n	800a656 <__hexnan+0x112>
 800a5e8:	f1a8 0204 	sub.w	r2, r8, #4
 800a5ec:	4623      	mov	r3, r4
 800a5ee:	f853 1b04 	ldr.w	r1, [r3], #4
 800a5f2:	f842 1f04 	str.w	r1, [r2, #4]!
 800a5f6:	429f      	cmp	r7, r3
 800a5f8:	d2f9      	bcs.n	800a5ee <__hexnan+0xaa>
 800a5fa:	1b3b      	subs	r3, r7, r4
 800a5fc:	f023 0303 	bic.w	r3, r3, #3
 800a600:	3304      	adds	r3, #4
 800a602:	3401      	adds	r4, #1
 800a604:	3e03      	subs	r6, #3
 800a606:	42b4      	cmp	r4, r6
 800a608:	bf88      	it	hi
 800a60a:	2304      	movhi	r3, #4
 800a60c:	4443      	add	r3, r8
 800a60e:	2200      	movs	r2, #0
 800a610:	f843 2b04 	str.w	r2, [r3], #4
 800a614:	429f      	cmp	r7, r3
 800a616:	d2fb      	bcs.n	800a610 <__hexnan+0xcc>
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	b91b      	cbnz	r3, 800a624 <__hexnan+0xe0>
 800a61c:	4547      	cmp	r7, r8
 800a61e:	d128      	bne.n	800a672 <__hexnan+0x12e>
 800a620:	2301      	movs	r3, #1
 800a622:	603b      	str	r3, [r7, #0]
 800a624:	2005      	movs	r0, #5
 800a626:	b007      	add	sp, #28
 800a628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62c:	3501      	adds	r5, #1
 800a62e:	2d08      	cmp	r5, #8
 800a630:	f10b 0b01 	add.w	fp, fp, #1
 800a634:	dd06      	ble.n	800a644 <__hexnan+0x100>
 800a636:	4544      	cmp	r4, r8
 800a638:	d9c1      	bls.n	800a5be <__hexnan+0x7a>
 800a63a:	2300      	movs	r3, #0
 800a63c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a640:	2501      	movs	r5, #1
 800a642:	3c04      	subs	r4, #4
 800a644:	6822      	ldr	r2, [r4, #0]
 800a646:	f000 000f 	and.w	r0, r0, #15
 800a64a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a64e:	6020      	str	r0, [r4, #0]
 800a650:	e7b5      	b.n	800a5be <__hexnan+0x7a>
 800a652:	2508      	movs	r5, #8
 800a654:	e7b3      	b.n	800a5be <__hexnan+0x7a>
 800a656:	9b01      	ldr	r3, [sp, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d0dd      	beq.n	800a618 <__hexnan+0xd4>
 800a65c:	f1c3 0320 	rsb	r3, r3, #32
 800a660:	f04f 32ff 	mov.w	r2, #4294967295
 800a664:	40da      	lsrs	r2, r3
 800a666:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a66a:	4013      	ands	r3, r2
 800a66c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a670:	e7d2      	b.n	800a618 <__hexnan+0xd4>
 800a672:	3f04      	subs	r7, #4
 800a674:	e7d0      	b.n	800a618 <__hexnan+0xd4>
 800a676:	2004      	movs	r0, #4
 800a678:	e7d5      	b.n	800a626 <__hexnan+0xe2>
	...

0800a67c <sbrk_aligned>:
 800a67c:	b570      	push	{r4, r5, r6, lr}
 800a67e:	4e0f      	ldr	r6, [pc, #60]	@ (800a6bc <sbrk_aligned+0x40>)
 800a680:	460c      	mov	r4, r1
 800a682:	6831      	ldr	r1, [r6, #0]
 800a684:	4605      	mov	r5, r0
 800a686:	b911      	cbnz	r1, 800a68e <sbrk_aligned+0x12>
 800a688:	f001 f976 	bl	800b978 <_sbrk_r>
 800a68c:	6030      	str	r0, [r6, #0]
 800a68e:	4621      	mov	r1, r4
 800a690:	4628      	mov	r0, r5
 800a692:	f001 f971 	bl	800b978 <_sbrk_r>
 800a696:	1c43      	adds	r3, r0, #1
 800a698:	d103      	bne.n	800a6a2 <sbrk_aligned+0x26>
 800a69a:	f04f 34ff 	mov.w	r4, #4294967295
 800a69e:	4620      	mov	r0, r4
 800a6a0:	bd70      	pop	{r4, r5, r6, pc}
 800a6a2:	1cc4      	adds	r4, r0, #3
 800a6a4:	f024 0403 	bic.w	r4, r4, #3
 800a6a8:	42a0      	cmp	r0, r4
 800a6aa:	d0f8      	beq.n	800a69e <sbrk_aligned+0x22>
 800a6ac:	1a21      	subs	r1, r4, r0
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f001 f962 	bl	800b978 <_sbrk_r>
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d1f2      	bne.n	800a69e <sbrk_aligned+0x22>
 800a6b8:	e7ef      	b.n	800a69a <sbrk_aligned+0x1e>
 800a6ba:	bf00      	nop
 800a6bc:	200009b8 	.word	0x200009b8

0800a6c0 <_malloc_r>:
 800a6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6c4:	1ccd      	adds	r5, r1, #3
 800a6c6:	f025 0503 	bic.w	r5, r5, #3
 800a6ca:	3508      	adds	r5, #8
 800a6cc:	2d0c      	cmp	r5, #12
 800a6ce:	bf38      	it	cc
 800a6d0:	250c      	movcc	r5, #12
 800a6d2:	2d00      	cmp	r5, #0
 800a6d4:	4606      	mov	r6, r0
 800a6d6:	db01      	blt.n	800a6dc <_malloc_r+0x1c>
 800a6d8:	42a9      	cmp	r1, r5
 800a6da:	d904      	bls.n	800a6e6 <_malloc_r+0x26>
 800a6dc:	230c      	movs	r3, #12
 800a6de:	6033      	str	r3, [r6, #0]
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a7bc <_malloc_r+0xfc>
 800a6ea:	f000 f87b 	bl	800a7e4 <__malloc_lock>
 800a6ee:	f8d8 3000 	ldr.w	r3, [r8]
 800a6f2:	461c      	mov	r4, r3
 800a6f4:	bb44      	cbnz	r4, 800a748 <_malloc_r+0x88>
 800a6f6:	4629      	mov	r1, r5
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	f7ff ffbf 	bl	800a67c <sbrk_aligned>
 800a6fe:	1c43      	adds	r3, r0, #1
 800a700:	4604      	mov	r4, r0
 800a702:	d158      	bne.n	800a7b6 <_malloc_r+0xf6>
 800a704:	f8d8 4000 	ldr.w	r4, [r8]
 800a708:	4627      	mov	r7, r4
 800a70a:	2f00      	cmp	r7, #0
 800a70c:	d143      	bne.n	800a796 <_malloc_r+0xd6>
 800a70e:	2c00      	cmp	r4, #0
 800a710:	d04b      	beq.n	800a7aa <_malloc_r+0xea>
 800a712:	6823      	ldr	r3, [r4, #0]
 800a714:	4639      	mov	r1, r7
 800a716:	4630      	mov	r0, r6
 800a718:	eb04 0903 	add.w	r9, r4, r3
 800a71c:	f001 f92c 	bl	800b978 <_sbrk_r>
 800a720:	4581      	cmp	r9, r0
 800a722:	d142      	bne.n	800a7aa <_malloc_r+0xea>
 800a724:	6821      	ldr	r1, [r4, #0]
 800a726:	1a6d      	subs	r5, r5, r1
 800a728:	4629      	mov	r1, r5
 800a72a:	4630      	mov	r0, r6
 800a72c:	f7ff ffa6 	bl	800a67c <sbrk_aligned>
 800a730:	3001      	adds	r0, #1
 800a732:	d03a      	beq.n	800a7aa <_malloc_r+0xea>
 800a734:	6823      	ldr	r3, [r4, #0]
 800a736:	442b      	add	r3, r5
 800a738:	6023      	str	r3, [r4, #0]
 800a73a:	f8d8 3000 	ldr.w	r3, [r8]
 800a73e:	685a      	ldr	r2, [r3, #4]
 800a740:	bb62      	cbnz	r2, 800a79c <_malloc_r+0xdc>
 800a742:	f8c8 7000 	str.w	r7, [r8]
 800a746:	e00f      	b.n	800a768 <_malloc_r+0xa8>
 800a748:	6822      	ldr	r2, [r4, #0]
 800a74a:	1b52      	subs	r2, r2, r5
 800a74c:	d420      	bmi.n	800a790 <_malloc_r+0xd0>
 800a74e:	2a0b      	cmp	r2, #11
 800a750:	d917      	bls.n	800a782 <_malloc_r+0xc2>
 800a752:	1961      	adds	r1, r4, r5
 800a754:	42a3      	cmp	r3, r4
 800a756:	6025      	str	r5, [r4, #0]
 800a758:	bf18      	it	ne
 800a75a:	6059      	strne	r1, [r3, #4]
 800a75c:	6863      	ldr	r3, [r4, #4]
 800a75e:	bf08      	it	eq
 800a760:	f8c8 1000 	streq.w	r1, [r8]
 800a764:	5162      	str	r2, [r4, r5]
 800a766:	604b      	str	r3, [r1, #4]
 800a768:	4630      	mov	r0, r6
 800a76a:	f000 f841 	bl	800a7f0 <__malloc_unlock>
 800a76e:	f104 000b 	add.w	r0, r4, #11
 800a772:	1d23      	adds	r3, r4, #4
 800a774:	f020 0007 	bic.w	r0, r0, #7
 800a778:	1ac2      	subs	r2, r0, r3
 800a77a:	bf1c      	itt	ne
 800a77c:	1a1b      	subne	r3, r3, r0
 800a77e:	50a3      	strne	r3, [r4, r2]
 800a780:	e7af      	b.n	800a6e2 <_malloc_r+0x22>
 800a782:	6862      	ldr	r2, [r4, #4]
 800a784:	42a3      	cmp	r3, r4
 800a786:	bf0c      	ite	eq
 800a788:	f8c8 2000 	streq.w	r2, [r8]
 800a78c:	605a      	strne	r2, [r3, #4]
 800a78e:	e7eb      	b.n	800a768 <_malloc_r+0xa8>
 800a790:	4623      	mov	r3, r4
 800a792:	6864      	ldr	r4, [r4, #4]
 800a794:	e7ae      	b.n	800a6f4 <_malloc_r+0x34>
 800a796:	463c      	mov	r4, r7
 800a798:	687f      	ldr	r7, [r7, #4]
 800a79a:	e7b6      	b.n	800a70a <_malloc_r+0x4a>
 800a79c:	461a      	mov	r2, r3
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	42a3      	cmp	r3, r4
 800a7a2:	d1fb      	bne.n	800a79c <_malloc_r+0xdc>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	6053      	str	r3, [r2, #4]
 800a7a8:	e7de      	b.n	800a768 <_malloc_r+0xa8>
 800a7aa:	230c      	movs	r3, #12
 800a7ac:	6033      	str	r3, [r6, #0]
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	f000 f81e 	bl	800a7f0 <__malloc_unlock>
 800a7b4:	e794      	b.n	800a6e0 <_malloc_r+0x20>
 800a7b6:	6005      	str	r5, [r0, #0]
 800a7b8:	e7d6      	b.n	800a768 <_malloc_r+0xa8>
 800a7ba:	bf00      	nop
 800a7bc:	200009bc 	.word	0x200009bc

0800a7c0 <__ascii_mbtowc>:
 800a7c0:	b082      	sub	sp, #8
 800a7c2:	b901      	cbnz	r1, 800a7c6 <__ascii_mbtowc+0x6>
 800a7c4:	a901      	add	r1, sp, #4
 800a7c6:	b142      	cbz	r2, 800a7da <__ascii_mbtowc+0x1a>
 800a7c8:	b14b      	cbz	r3, 800a7de <__ascii_mbtowc+0x1e>
 800a7ca:	7813      	ldrb	r3, [r2, #0]
 800a7cc:	600b      	str	r3, [r1, #0]
 800a7ce:	7812      	ldrb	r2, [r2, #0]
 800a7d0:	1e10      	subs	r0, r2, #0
 800a7d2:	bf18      	it	ne
 800a7d4:	2001      	movne	r0, #1
 800a7d6:	b002      	add	sp, #8
 800a7d8:	4770      	bx	lr
 800a7da:	4610      	mov	r0, r2
 800a7dc:	e7fb      	b.n	800a7d6 <__ascii_mbtowc+0x16>
 800a7de:	f06f 0001 	mvn.w	r0, #1
 800a7e2:	e7f8      	b.n	800a7d6 <__ascii_mbtowc+0x16>

0800a7e4 <__malloc_lock>:
 800a7e4:	4801      	ldr	r0, [pc, #4]	@ (800a7ec <__malloc_lock+0x8>)
 800a7e6:	f7ff bba4 	b.w	8009f32 <__retarget_lock_acquire_recursive>
 800a7ea:	bf00      	nop
 800a7ec:	200009b4 	.word	0x200009b4

0800a7f0 <__malloc_unlock>:
 800a7f0:	4801      	ldr	r0, [pc, #4]	@ (800a7f8 <__malloc_unlock+0x8>)
 800a7f2:	f7ff bb9f 	b.w	8009f34 <__retarget_lock_release_recursive>
 800a7f6:	bf00      	nop
 800a7f8:	200009b4 	.word	0x200009b4

0800a7fc <_Balloc>:
 800a7fc:	b570      	push	{r4, r5, r6, lr}
 800a7fe:	69c6      	ldr	r6, [r0, #28]
 800a800:	4604      	mov	r4, r0
 800a802:	460d      	mov	r5, r1
 800a804:	b976      	cbnz	r6, 800a824 <_Balloc+0x28>
 800a806:	2010      	movs	r0, #16
 800a808:	f001 f8f8 	bl	800b9fc <malloc>
 800a80c:	4602      	mov	r2, r0
 800a80e:	61e0      	str	r0, [r4, #28]
 800a810:	b920      	cbnz	r0, 800a81c <_Balloc+0x20>
 800a812:	4b18      	ldr	r3, [pc, #96]	@ (800a874 <_Balloc+0x78>)
 800a814:	4818      	ldr	r0, [pc, #96]	@ (800a878 <_Balloc+0x7c>)
 800a816:	216b      	movs	r1, #107	@ 0x6b
 800a818:	f001 f8be 	bl	800b998 <__assert_func>
 800a81c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a820:	6006      	str	r6, [r0, #0]
 800a822:	60c6      	str	r6, [r0, #12]
 800a824:	69e6      	ldr	r6, [r4, #28]
 800a826:	68f3      	ldr	r3, [r6, #12]
 800a828:	b183      	cbz	r3, 800a84c <_Balloc+0x50>
 800a82a:	69e3      	ldr	r3, [r4, #28]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a832:	b9b8      	cbnz	r0, 800a864 <_Balloc+0x68>
 800a834:	2101      	movs	r1, #1
 800a836:	fa01 f605 	lsl.w	r6, r1, r5
 800a83a:	1d72      	adds	r2, r6, #5
 800a83c:	0092      	lsls	r2, r2, #2
 800a83e:	4620      	mov	r0, r4
 800a840:	f001 f8c8 	bl	800b9d4 <_calloc_r>
 800a844:	b160      	cbz	r0, 800a860 <_Balloc+0x64>
 800a846:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a84a:	e00e      	b.n	800a86a <_Balloc+0x6e>
 800a84c:	2221      	movs	r2, #33	@ 0x21
 800a84e:	2104      	movs	r1, #4
 800a850:	4620      	mov	r0, r4
 800a852:	f001 f8bf 	bl	800b9d4 <_calloc_r>
 800a856:	69e3      	ldr	r3, [r4, #28]
 800a858:	60f0      	str	r0, [r6, #12]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1e4      	bne.n	800a82a <_Balloc+0x2e>
 800a860:	2000      	movs	r0, #0
 800a862:	bd70      	pop	{r4, r5, r6, pc}
 800a864:	6802      	ldr	r2, [r0, #0]
 800a866:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a86a:	2300      	movs	r3, #0
 800a86c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a870:	e7f7      	b.n	800a862 <_Balloc+0x66>
 800a872:	bf00      	nop
 800a874:	0800d889 	.word	0x0800d889
 800a878:	0800d8a0 	.word	0x0800d8a0

0800a87c <_Bfree>:
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	69c6      	ldr	r6, [r0, #28]
 800a880:	4605      	mov	r5, r0
 800a882:	460c      	mov	r4, r1
 800a884:	b976      	cbnz	r6, 800a8a4 <_Bfree+0x28>
 800a886:	2010      	movs	r0, #16
 800a888:	f001 f8b8 	bl	800b9fc <malloc>
 800a88c:	4602      	mov	r2, r0
 800a88e:	61e8      	str	r0, [r5, #28]
 800a890:	b920      	cbnz	r0, 800a89c <_Bfree+0x20>
 800a892:	4b09      	ldr	r3, [pc, #36]	@ (800a8b8 <_Bfree+0x3c>)
 800a894:	4809      	ldr	r0, [pc, #36]	@ (800a8bc <_Bfree+0x40>)
 800a896:	218f      	movs	r1, #143	@ 0x8f
 800a898:	f001 f87e 	bl	800b998 <__assert_func>
 800a89c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8a0:	6006      	str	r6, [r0, #0]
 800a8a2:	60c6      	str	r6, [r0, #12]
 800a8a4:	b13c      	cbz	r4, 800a8b6 <_Bfree+0x3a>
 800a8a6:	69eb      	ldr	r3, [r5, #28]
 800a8a8:	6862      	ldr	r2, [r4, #4]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8b0:	6021      	str	r1, [r4, #0]
 800a8b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8b6:	bd70      	pop	{r4, r5, r6, pc}
 800a8b8:	0800d889 	.word	0x0800d889
 800a8bc:	0800d8a0 	.word	0x0800d8a0

0800a8c0 <__multadd>:
 800a8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c4:	690d      	ldr	r5, [r1, #16]
 800a8c6:	4607      	mov	r7, r0
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	461e      	mov	r6, r3
 800a8cc:	f101 0c14 	add.w	ip, r1, #20
 800a8d0:	2000      	movs	r0, #0
 800a8d2:	f8dc 3000 	ldr.w	r3, [ip]
 800a8d6:	b299      	uxth	r1, r3
 800a8d8:	fb02 6101 	mla	r1, r2, r1, r6
 800a8dc:	0c1e      	lsrs	r6, r3, #16
 800a8de:	0c0b      	lsrs	r3, r1, #16
 800a8e0:	fb02 3306 	mla	r3, r2, r6, r3
 800a8e4:	b289      	uxth	r1, r1
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8ec:	4285      	cmp	r5, r0
 800a8ee:	f84c 1b04 	str.w	r1, [ip], #4
 800a8f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8f6:	dcec      	bgt.n	800a8d2 <__multadd+0x12>
 800a8f8:	b30e      	cbz	r6, 800a93e <__multadd+0x7e>
 800a8fa:	68a3      	ldr	r3, [r4, #8]
 800a8fc:	42ab      	cmp	r3, r5
 800a8fe:	dc19      	bgt.n	800a934 <__multadd+0x74>
 800a900:	6861      	ldr	r1, [r4, #4]
 800a902:	4638      	mov	r0, r7
 800a904:	3101      	adds	r1, #1
 800a906:	f7ff ff79 	bl	800a7fc <_Balloc>
 800a90a:	4680      	mov	r8, r0
 800a90c:	b928      	cbnz	r0, 800a91a <__multadd+0x5a>
 800a90e:	4602      	mov	r2, r0
 800a910:	4b0c      	ldr	r3, [pc, #48]	@ (800a944 <__multadd+0x84>)
 800a912:	480d      	ldr	r0, [pc, #52]	@ (800a948 <__multadd+0x88>)
 800a914:	21ba      	movs	r1, #186	@ 0xba
 800a916:	f001 f83f 	bl	800b998 <__assert_func>
 800a91a:	6922      	ldr	r2, [r4, #16]
 800a91c:	3202      	adds	r2, #2
 800a91e:	f104 010c 	add.w	r1, r4, #12
 800a922:	0092      	lsls	r2, r2, #2
 800a924:	300c      	adds	r0, #12
 800a926:	f7ff fb06 	bl	8009f36 <memcpy>
 800a92a:	4621      	mov	r1, r4
 800a92c:	4638      	mov	r0, r7
 800a92e:	f7ff ffa5 	bl	800a87c <_Bfree>
 800a932:	4644      	mov	r4, r8
 800a934:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a938:	3501      	adds	r5, #1
 800a93a:	615e      	str	r6, [r3, #20]
 800a93c:	6125      	str	r5, [r4, #16]
 800a93e:	4620      	mov	r0, r4
 800a940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a944:	0800d818 	.word	0x0800d818
 800a948:	0800d8a0 	.word	0x0800d8a0

0800a94c <__s2b>:
 800a94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a950:	460c      	mov	r4, r1
 800a952:	4615      	mov	r5, r2
 800a954:	461f      	mov	r7, r3
 800a956:	2209      	movs	r2, #9
 800a958:	3308      	adds	r3, #8
 800a95a:	4606      	mov	r6, r0
 800a95c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a960:	2100      	movs	r1, #0
 800a962:	2201      	movs	r2, #1
 800a964:	429a      	cmp	r2, r3
 800a966:	db09      	blt.n	800a97c <__s2b+0x30>
 800a968:	4630      	mov	r0, r6
 800a96a:	f7ff ff47 	bl	800a7fc <_Balloc>
 800a96e:	b940      	cbnz	r0, 800a982 <__s2b+0x36>
 800a970:	4602      	mov	r2, r0
 800a972:	4b19      	ldr	r3, [pc, #100]	@ (800a9d8 <__s2b+0x8c>)
 800a974:	4819      	ldr	r0, [pc, #100]	@ (800a9dc <__s2b+0x90>)
 800a976:	21d3      	movs	r1, #211	@ 0xd3
 800a978:	f001 f80e 	bl	800b998 <__assert_func>
 800a97c:	0052      	lsls	r2, r2, #1
 800a97e:	3101      	adds	r1, #1
 800a980:	e7f0      	b.n	800a964 <__s2b+0x18>
 800a982:	9b08      	ldr	r3, [sp, #32]
 800a984:	6143      	str	r3, [r0, #20]
 800a986:	2d09      	cmp	r5, #9
 800a988:	f04f 0301 	mov.w	r3, #1
 800a98c:	6103      	str	r3, [r0, #16]
 800a98e:	dd16      	ble.n	800a9be <__s2b+0x72>
 800a990:	f104 0909 	add.w	r9, r4, #9
 800a994:	46c8      	mov	r8, r9
 800a996:	442c      	add	r4, r5
 800a998:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a99c:	4601      	mov	r1, r0
 800a99e:	3b30      	subs	r3, #48	@ 0x30
 800a9a0:	220a      	movs	r2, #10
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	f7ff ff8c 	bl	800a8c0 <__multadd>
 800a9a8:	45a0      	cmp	r8, r4
 800a9aa:	d1f5      	bne.n	800a998 <__s2b+0x4c>
 800a9ac:	f1a5 0408 	sub.w	r4, r5, #8
 800a9b0:	444c      	add	r4, r9
 800a9b2:	1b2d      	subs	r5, r5, r4
 800a9b4:	1963      	adds	r3, r4, r5
 800a9b6:	42bb      	cmp	r3, r7
 800a9b8:	db04      	blt.n	800a9c4 <__s2b+0x78>
 800a9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9be:	340a      	adds	r4, #10
 800a9c0:	2509      	movs	r5, #9
 800a9c2:	e7f6      	b.n	800a9b2 <__s2b+0x66>
 800a9c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a9c8:	4601      	mov	r1, r0
 800a9ca:	3b30      	subs	r3, #48	@ 0x30
 800a9cc:	220a      	movs	r2, #10
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	f7ff ff76 	bl	800a8c0 <__multadd>
 800a9d4:	e7ee      	b.n	800a9b4 <__s2b+0x68>
 800a9d6:	bf00      	nop
 800a9d8:	0800d818 	.word	0x0800d818
 800a9dc:	0800d8a0 	.word	0x0800d8a0

0800a9e0 <__hi0bits>:
 800a9e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	bf36      	itet	cc
 800a9e8:	0403      	lslcc	r3, r0, #16
 800a9ea:	2000      	movcs	r0, #0
 800a9ec:	2010      	movcc	r0, #16
 800a9ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a9f2:	bf3c      	itt	cc
 800a9f4:	021b      	lslcc	r3, r3, #8
 800a9f6:	3008      	addcc	r0, #8
 800a9f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9fc:	bf3c      	itt	cc
 800a9fe:	011b      	lslcc	r3, r3, #4
 800aa00:	3004      	addcc	r0, #4
 800aa02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa06:	bf3c      	itt	cc
 800aa08:	009b      	lslcc	r3, r3, #2
 800aa0a:	3002      	addcc	r0, #2
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	db05      	blt.n	800aa1c <__hi0bits+0x3c>
 800aa10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aa14:	f100 0001 	add.w	r0, r0, #1
 800aa18:	bf08      	it	eq
 800aa1a:	2020      	moveq	r0, #32
 800aa1c:	4770      	bx	lr

0800aa1e <__lo0bits>:
 800aa1e:	6803      	ldr	r3, [r0, #0]
 800aa20:	4602      	mov	r2, r0
 800aa22:	f013 0007 	ands.w	r0, r3, #7
 800aa26:	d00b      	beq.n	800aa40 <__lo0bits+0x22>
 800aa28:	07d9      	lsls	r1, r3, #31
 800aa2a:	d421      	bmi.n	800aa70 <__lo0bits+0x52>
 800aa2c:	0798      	lsls	r0, r3, #30
 800aa2e:	bf49      	itett	mi
 800aa30:	085b      	lsrmi	r3, r3, #1
 800aa32:	089b      	lsrpl	r3, r3, #2
 800aa34:	2001      	movmi	r0, #1
 800aa36:	6013      	strmi	r3, [r2, #0]
 800aa38:	bf5c      	itt	pl
 800aa3a:	6013      	strpl	r3, [r2, #0]
 800aa3c:	2002      	movpl	r0, #2
 800aa3e:	4770      	bx	lr
 800aa40:	b299      	uxth	r1, r3
 800aa42:	b909      	cbnz	r1, 800aa48 <__lo0bits+0x2a>
 800aa44:	0c1b      	lsrs	r3, r3, #16
 800aa46:	2010      	movs	r0, #16
 800aa48:	b2d9      	uxtb	r1, r3
 800aa4a:	b909      	cbnz	r1, 800aa50 <__lo0bits+0x32>
 800aa4c:	3008      	adds	r0, #8
 800aa4e:	0a1b      	lsrs	r3, r3, #8
 800aa50:	0719      	lsls	r1, r3, #28
 800aa52:	bf04      	itt	eq
 800aa54:	091b      	lsreq	r3, r3, #4
 800aa56:	3004      	addeq	r0, #4
 800aa58:	0799      	lsls	r1, r3, #30
 800aa5a:	bf04      	itt	eq
 800aa5c:	089b      	lsreq	r3, r3, #2
 800aa5e:	3002      	addeq	r0, #2
 800aa60:	07d9      	lsls	r1, r3, #31
 800aa62:	d403      	bmi.n	800aa6c <__lo0bits+0x4e>
 800aa64:	085b      	lsrs	r3, r3, #1
 800aa66:	f100 0001 	add.w	r0, r0, #1
 800aa6a:	d003      	beq.n	800aa74 <__lo0bits+0x56>
 800aa6c:	6013      	str	r3, [r2, #0]
 800aa6e:	4770      	bx	lr
 800aa70:	2000      	movs	r0, #0
 800aa72:	4770      	bx	lr
 800aa74:	2020      	movs	r0, #32
 800aa76:	4770      	bx	lr

0800aa78 <__i2b>:
 800aa78:	b510      	push	{r4, lr}
 800aa7a:	460c      	mov	r4, r1
 800aa7c:	2101      	movs	r1, #1
 800aa7e:	f7ff febd 	bl	800a7fc <_Balloc>
 800aa82:	4602      	mov	r2, r0
 800aa84:	b928      	cbnz	r0, 800aa92 <__i2b+0x1a>
 800aa86:	4b05      	ldr	r3, [pc, #20]	@ (800aa9c <__i2b+0x24>)
 800aa88:	4805      	ldr	r0, [pc, #20]	@ (800aaa0 <__i2b+0x28>)
 800aa8a:	f240 1145 	movw	r1, #325	@ 0x145
 800aa8e:	f000 ff83 	bl	800b998 <__assert_func>
 800aa92:	2301      	movs	r3, #1
 800aa94:	6144      	str	r4, [r0, #20]
 800aa96:	6103      	str	r3, [r0, #16]
 800aa98:	bd10      	pop	{r4, pc}
 800aa9a:	bf00      	nop
 800aa9c:	0800d818 	.word	0x0800d818
 800aaa0:	0800d8a0 	.word	0x0800d8a0

0800aaa4 <__multiply>:
 800aaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa8:	4614      	mov	r4, r2
 800aaaa:	690a      	ldr	r2, [r1, #16]
 800aaac:	6923      	ldr	r3, [r4, #16]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	bfa8      	it	ge
 800aab2:	4623      	movge	r3, r4
 800aab4:	460f      	mov	r7, r1
 800aab6:	bfa4      	itt	ge
 800aab8:	460c      	movge	r4, r1
 800aaba:	461f      	movge	r7, r3
 800aabc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800aac0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800aac4:	68a3      	ldr	r3, [r4, #8]
 800aac6:	6861      	ldr	r1, [r4, #4]
 800aac8:	eb0a 0609 	add.w	r6, sl, r9
 800aacc:	42b3      	cmp	r3, r6
 800aace:	b085      	sub	sp, #20
 800aad0:	bfb8      	it	lt
 800aad2:	3101      	addlt	r1, #1
 800aad4:	f7ff fe92 	bl	800a7fc <_Balloc>
 800aad8:	b930      	cbnz	r0, 800aae8 <__multiply+0x44>
 800aada:	4602      	mov	r2, r0
 800aadc:	4b44      	ldr	r3, [pc, #272]	@ (800abf0 <__multiply+0x14c>)
 800aade:	4845      	ldr	r0, [pc, #276]	@ (800abf4 <__multiply+0x150>)
 800aae0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aae4:	f000 ff58 	bl	800b998 <__assert_func>
 800aae8:	f100 0514 	add.w	r5, r0, #20
 800aaec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aaf0:	462b      	mov	r3, r5
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	4543      	cmp	r3, r8
 800aaf6:	d321      	bcc.n	800ab3c <__multiply+0x98>
 800aaf8:	f107 0114 	add.w	r1, r7, #20
 800aafc:	f104 0214 	add.w	r2, r4, #20
 800ab00:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ab04:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ab08:	9302      	str	r3, [sp, #8]
 800ab0a:	1b13      	subs	r3, r2, r4
 800ab0c:	3b15      	subs	r3, #21
 800ab0e:	f023 0303 	bic.w	r3, r3, #3
 800ab12:	3304      	adds	r3, #4
 800ab14:	f104 0715 	add.w	r7, r4, #21
 800ab18:	42ba      	cmp	r2, r7
 800ab1a:	bf38      	it	cc
 800ab1c:	2304      	movcc	r3, #4
 800ab1e:	9301      	str	r3, [sp, #4]
 800ab20:	9b02      	ldr	r3, [sp, #8]
 800ab22:	9103      	str	r1, [sp, #12]
 800ab24:	428b      	cmp	r3, r1
 800ab26:	d80c      	bhi.n	800ab42 <__multiply+0x9e>
 800ab28:	2e00      	cmp	r6, #0
 800ab2a:	dd03      	ble.n	800ab34 <__multiply+0x90>
 800ab2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d05b      	beq.n	800abec <__multiply+0x148>
 800ab34:	6106      	str	r6, [r0, #16]
 800ab36:	b005      	add	sp, #20
 800ab38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3c:	f843 2b04 	str.w	r2, [r3], #4
 800ab40:	e7d8      	b.n	800aaf4 <__multiply+0x50>
 800ab42:	f8b1 a000 	ldrh.w	sl, [r1]
 800ab46:	f1ba 0f00 	cmp.w	sl, #0
 800ab4a:	d024      	beq.n	800ab96 <__multiply+0xf2>
 800ab4c:	f104 0e14 	add.w	lr, r4, #20
 800ab50:	46a9      	mov	r9, r5
 800ab52:	f04f 0c00 	mov.w	ip, #0
 800ab56:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab5a:	f8d9 3000 	ldr.w	r3, [r9]
 800ab5e:	fa1f fb87 	uxth.w	fp, r7
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	fb0a 330b 	mla	r3, sl, fp, r3
 800ab68:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ab6c:	f8d9 7000 	ldr.w	r7, [r9]
 800ab70:	4463      	add	r3, ip
 800ab72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ab76:	fb0a c70b 	mla	r7, sl, fp, ip
 800ab7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ab84:	4572      	cmp	r2, lr
 800ab86:	f849 3b04 	str.w	r3, [r9], #4
 800ab8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ab8e:	d8e2      	bhi.n	800ab56 <__multiply+0xb2>
 800ab90:	9b01      	ldr	r3, [sp, #4]
 800ab92:	f845 c003 	str.w	ip, [r5, r3]
 800ab96:	9b03      	ldr	r3, [sp, #12]
 800ab98:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ab9c:	3104      	adds	r1, #4
 800ab9e:	f1b9 0f00 	cmp.w	r9, #0
 800aba2:	d021      	beq.n	800abe8 <__multiply+0x144>
 800aba4:	682b      	ldr	r3, [r5, #0]
 800aba6:	f104 0c14 	add.w	ip, r4, #20
 800abaa:	46ae      	mov	lr, r5
 800abac:	f04f 0a00 	mov.w	sl, #0
 800abb0:	f8bc b000 	ldrh.w	fp, [ip]
 800abb4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800abb8:	fb09 770b 	mla	r7, r9, fp, r7
 800abbc:	4457      	add	r7, sl
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800abc4:	f84e 3b04 	str.w	r3, [lr], #4
 800abc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800abcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800abd0:	f8be 3000 	ldrh.w	r3, [lr]
 800abd4:	fb09 330a 	mla	r3, r9, sl, r3
 800abd8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800abdc:	4562      	cmp	r2, ip
 800abde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800abe2:	d8e5      	bhi.n	800abb0 <__multiply+0x10c>
 800abe4:	9f01      	ldr	r7, [sp, #4]
 800abe6:	51eb      	str	r3, [r5, r7]
 800abe8:	3504      	adds	r5, #4
 800abea:	e799      	b.n	800ab20 <__multiply+0x7c>
 800abec:	3e01      	subs	r6, #1
 800abee:	e79b      	b.n	800ab28 <__multiply+0x84>
 800abf0:	0800d818 	.word	0x0800d818
 800abf4:	0800d8a0 	.word	0x0800d8a0

0800abf8 <__pow5mult>:
 800abf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abfc:	4615      	mov	r5, r2
 800abfe:	f012 0203 	ands.w	r2, r2, #3
 800ac02:	4607      	mov	r7, r0
 800ac04:	460e      	mov	r6, r1
 800ac06:	d007      	beq.n	800ac18 <__pow5mult+0x20>
 800ac08:	4c25      	ldr	r4, [pc, #148]	@ (800aca0 <__pow5mult+0xa8>)
 800ac0a:	3a01      	subs	r2, #1
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac12:	f7ff fe55 	bl	800a8c0 <__multadd>
 800ac16:	4606      	mov	r6, r0
 800ac18:	10ad      	asrs	r5, r5, #2
 800ac1a:	d03d      	beq.n	800ac98 <__pow5mult+0xa0>
 800ac1c:	69fc      	ldr	r4, [r7, #28]
 800ac1e:	b97c      	cbnz	r4, 800ac40 <__pow5mult+0x48>
 800ac20:	2010      	movs	r0, #16
 800ac22:	f000 feeb 	bl	800b9fc <malloc>
 800ac26:	4602      	mov	r2, r0
 800ac28:	61f8      	str	r0, [r7, #28]
 800ac2a:	b928      	cbnz	r0, 800ac38 <__pow5mult+0x40>
 800ac2c:	4b1d      	ldr	r3, [pc, #116]	@ (800aca4 <__pow5mult+0xac>)
 800ac2e:	481e      	ldr	r0, [pc, #120]	@ (800aca8 <__pow5mult+0xb0>)
 800ac30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ac34:	f000 feb0 	bl	800b998 <__assert_func>
 800ac38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac3c:	6004      	str	r4, [r0, #0]
 800ac3e:	60c4      	str	r4, [r0, #12]
 800ac40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ac44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac48:	b94c      	cbnz	r4, 800ac5e <__pow5mult+0x66>
 800ac4a:	f240 2171 	movw	r1, #625	@ 0x271
 800ac4e:	4638      	mov	r0, r7
 800ac50:	f7ff ff12 	bl	800aa78 <__i2b>
 800ac54:	2300      	movs	r3, #0
 800ac56:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	6003      	str	r3, [r0, #0]
 800ac5e:	f04f 0900 	mov.w	r9, #0
 800ac62:	07eb      	lsls	r3, r5, #31
 800ac64:	d50a      	bpl.n	800ac7c <__pow5mult+0x84>
 800ac66:	4631      	mov	r1, r6
 800ac68:	4622      	mov	r2, r4
 800ac6a:	4638      	mov	r0, r7
 800ac6c:	f7ff ff1a 	bl	800aaa4 <__multiply>
 800ac70:	4631      	mov	r1, r6
 800ac72:	4680      	mov	r8, r0
 800ac74:	4638      	mov	r0, r7
 800ac76:	f7ff fe01 	bl	800a87c <_Bfree>
 800ac7a:	4646      	mov	r6, r8
 800ac7c:	106d      	asrs	r5, r5, #1
 800ac7e:	d00b      	beq.n	800ac98 <__pow5mult+0xa0>
 800ac80:	6820      	ldr	r0, [r4, #0]
 800ac82:	b938      	cbnz	r0, 800ac94 <__pow5mult+0x9c>
 800ac84:	4622      	mov	r2, r4
 800ac86:	4621      	mov	r1, r4
 800ac88:	4638      	mov	r0, r7
 800ac8a:	f7ff ff0b 	bl	800aaa4 <__multiply>
 800ac8e:	6020      	str	r0, [r4, #0]
 800ac90:	f8c0 9000 	str.w	r9, [r0]
 800ac94:	4604      	mov	r4, r0
 800ac96:	e7e4      	b.n	800ac62 <__pow5mult+0x6a>
 800ac98:	4630      	mov	r0, r6
 800ac9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac9e:	bf00      	nop
 800aca0:	0800d8fc 	.word	0x0800d8fc
 800aca4:	0800d889 	.word	0x0800d889
 800aca8:	0800d8a0 	.word	0x0800d8a0

0800acac <__lshift>:
 800acac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acb0:	460c      	mov	r4, r1
 800acb2:	6849      	ldr	r1, [r1, #4]
 800acb4:	6923      	ldr	r3, [r4, #16]
 800acb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800acba:	68a3      	ldr	r3, [r4, #8]
 800acbc:	4607      	mov	r7, r0
 800acbe:	4691      	mov	r9, r2
 800acc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800acc4:	f108 0601 	add.w	r6, r8, #1
 800acc8:	42b3      	cmp	r3, r6
 800acca:	db0b      	blt.n	800ace4 <__lshift+0x38>
 800accc:	4638      	mov	r0, r7
 800acce:	f7ff fd95 	bl	800a7fc <_Balloc>
 800acd2:	4605      	mov	r5, r0
 800acd4:	b948      	cbnz	r0, 800acea <__lshift+0x3e>
 800acd6:	4602      	mov	r2, r0
 800acd8:	4b28      	ldr	r3, [pc, #160]	@ (800ad7c <__lshift+0xd0>)
 800acda:	4829      	ldr	r0, [pc, #164]	@ (800ad80 <__lshift+0xd4>)
 800acdc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ace0:	f000 fe5a 	bl	800b998 <__assert_func>
 800ace4:	3101      	adds	r1, #1
 800ace6:	005b      	lsls	r3, r3, #1
 800ace8:	e7ee      	b.n	800acc8 <__lshift+0x1c>
 800acea:	2300      	movs	r3, #0
 800acec:	f100 0114 	add.w	r1, r0, #20
 800acf0:	f100 0210 	add.w	r2, r0, #16
 800acf4:	4618      	mov	r0, r3
 800acf6:	4553      	cmp	r3, sl
 800acf8:	db33      	blt.n	800ad62 <__lshift+0xb6>
 800acfa:	6920      	ldr	r0, [r4, #16]
 800acfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad00:	f104 0314 	add.w	r3, r4, #20
 800ad04:	f019 091f 	ands.w	r9, r9, #31
 800ad08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad10:	d02b      	beq.n	800ad6a <__lshift+0xbe>
 800ad12:	f1c9 0e20 	rsb	lr, r9, #32
 800ad16:	468a      	mov	sl, r1
 800ad18:	2200      	movs	r2, #0
 800ad1a:	6818      	ldr	r0, [r3, #0]
 800ad1c:	fa00 f009 	lsl.w	r0, r0, r9
 800ad20:	4310      	orrs	r0, r2
 800ad22:	f84a 0b04 	str.w	r0, [sl], #4
 800ad26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad2a:	459c      	cmp	ip, r3
 800ad2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ad30:	d8f3      	bhi.n	800ad1a <__lshift+0x6e>
 800ad32:	ebac 0304 	sub.w	r3, ip, r4
 800ad36:	3b15      	subs	r3, #21
 800ad38:	f023 0303 	bic.w	r3, r3, #3
 800ad3c:	3304      	adds	r3, #4
 800ad3e:	f104 0015 	add.w	r0, r4, #21
 800ad42:	4584      	cmp	ip, r0
 800ad44:	bf38      	it	cc
 800ad46:	2304      	movcc	r3, #4
 800ad48:	50ca      	str	r2, [r1, r3]
 800ad4a:	b10a      	cbz	r2, 800ad50 <__lshift+0xa4>
 800ad4c:	f108 0602 	add.w	r6, r8, #2
 800ad50:	3e01      	subs	r6, #1
 800ad52:	4638      	mov	r0, r7
 800ad54:	612e      	str	r6, [r5, #16]
 800ad56:	4621      	mov	r1, r4
 800ad58:	f7ff fd90 	bl	800a87c <_Bfree>
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad62:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad66:	3301      	adds	r3, #1
 800ad68:	e7c5      	b.n	800acf6 <__lshift+0x4a>
 800ad6a:	3904      	subs	r1, #4
 800ad6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad70:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad74:	459c      	cmp	ip, r3
 800ad76:	d8f9      	bhi.n	800ad6c <__lshift+0xc0>
 800ad78:	e7ea      	b.n	800ad50 <__lshift+0xa4>
 800ad7a:	bf00      	nop
 800ad7c:	0800d818 	.word	0x0800d818
 800ad80:	0800d8a0 	.word	0x0800d8a0

0800ad84 <__mcmp>:
 800ad84:	690a      	ldr	r2, [r1, #16]
 800ad86:	4603      	mov	r3, r0
 800ad88:	6900      	ldr	r0, [r0, #16]
 800ad8a:	1a80      	subs	r0, r0, r2
 800ad8c:	b530      	push	{r4, r5, lr}
 800ad8e:	d10e      	bne.n	800adae <__mcmp+0x2a>
 800ad90:	3314      	adds	r3, #20
 800ad92:	3114      	adds	r1, #20
 800ad94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ad98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ad9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ada0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ada4:	4295      	cmp	r5, r2
 800ada6:	d003      	beq.n	800adb0 <__mcmp+0x2c>
 800ada8:	d205      	bcs.n	800adb6 <__mcmp+0x32>
 800adaa:	f04f 30ff 	mov.w	r0, #4294967295
 800adae:	bd30      	pop	{r4, r5, pc}
 800adb0:	42a3      	cmp	r3, r4
 800adb2:	d3f3      	bcc.n	800ad9c <__mcmp+0x18>
 800adb4:	e7fb      	b.n	800adae <__mcmp+0x2a>
 800adb6:	2001      	movs	r0, #1
 800adb8:	e7f9      	b.n	800adae <__mcmp+0x2a>
	...

0800adbc <__mdiff>:
 800adbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc0:	4689      	mov	r9, r1
 800adc2:	4606      	mov	r6, r0
 800adc4:	4611      	mov	r1, r2
 800adc6:	4648      	mov	r0, r9
 800adc8:	4614      	mov	r4, r2
 800adca:	f7ff ffdb 	bl	800ad84 <__mcmp>
 800adce:	1e05      	subs	r5, r0, #0
 800add0:	d112      	bne.n	800adf8 <__mdiff+0x3c>
 800add2:	4629      	mov	r1, r5
 800add4:	4630      	mov	r0, r6
 800add6:	f7ff fd11 	bl	800a7fc <_Balloc>
 800adda:	4602      	mov	r2, r0
 800addc:	b928      	cbnz	r0, 800adea <__mdiff+0x2e>
 800adde:	4b3f      	ldr	r3, [pc, #252]	@ (800aedc <__mdiff+0x120>)
 800ade0:	f240 2137 	movw	r1, #567	@ 0x237
 800ade4:	483e      	ldr	r0, [pc, #248]	@ (800aee0 <__mdiff+0x124>)
 800ade6:	f000 fdd7 	bl	800b998 <__assert_func>
 800adea:	2301      	movs	r3, #1
 800adec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800adf0:	4610      	mov	r0, r2
 800adf2:	b003      	add	sp, #12
 800adf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf8:	bfbc      	itt	lt
 800adfa:	464b      	movlt	r3, r9
 800adfc:	46a1      	movlt	r9, r4
 800adfe:	4630      	mov	r0, r6
 800ae00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ae04:	bfba      	itte	lt
 800ae06:	461c      	movlt	r4, r3
 800ae08:	2501      	movlt	r5, #1
 800ae0a:	2500      	movge	r5, #0
 800ae0c:	f7ff fcf6 	bl	800a7fc <_Balloc>
 800ae10:	4602      	mov	r2, r0
 800ae12:	b918      	cbnz	r0, 800ae1c <__mdiff+0x60>
 800ae14:	4b31      	ldr	r3, [pc, #196]	@ (800aedc <__mdiff+0x120>)
 800ae16:	f240 2145 	movw	r1, #581	@ 0x245
 800ae1a:	e7e3      	b.n	800ade4 <__mdiff+0x28>
 800ae1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ae20:	6926      	ldr	r6, [r4, #16]
 800ae22:	60c5      	str	r5, [r0, #12]
 800ae24:	f109 0310 	add.w	r3, r9, #16
 800ae28:	f109 0514 	add.w	r5, r9, #20
 800ae2c:	f104 0e14 	add.w	lr, r4, #20
 800ae30:	f100 0b14 	add.w	fp, r0, #20
 800ae34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ae38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ae3c:	9301      	str	r3, [sp, #4]
 800ae3e:	46d9      	mov	r9, fp
 800ae40:	f04f 0c00 	mov.w	ip, #0
 800ae44:	9b01      	ldr	r3, [sp, #4]
 800ae46:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ae4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ae4e:	9301      	str	r3, [sp, #4]
 800ae50:	fa1f f38a 	uxth.w	r3, sl
 800ae54:	4619      	mov	r1, r3
 800ae56:	b283      	uxth	r3, r0
 800ae58:	1acb      	subs	r3, r1, r3
 800ae5a:	0c00      	lsrs	r0, r0, #16
 800ae5c:	4463      	add	r3, ip
 800ae5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ae62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ae6c:	4576      	cmp	r6, lr
 800ae6e:	f849 3b04 	str.w	r3, [r9], #4
 800ae72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ae76:	d8e5      	bhi.n	800ae44 <__mdiff+0x88>
 800ae78:	1b33      	subs	r3, r6, r4
 800ae7a:	3b15      	subs	r3, #21
 800ae7c:	f023 0303 	bic.w	r3, r3, #3
 800ae80:	3415      	adds	r4, #21
 800ae82:	3304      	adds	r3, #4
 800ae84:	42a6      	cmp	r6, r4
 800ae86:	bf38      	it	cc
 800ae88:	2304      	movcc	r3, #4
 800ae8a:	441d      	add	r5, r3
 800ae8c:	445b      	add	r3, fp
 800ae8e:	461e      	mov	r6, r3
 800ae90:	462c      	mov	r4, r5
 800ae92:	4544      	cmp	r4, r8
 800ae94:	d30e      	bcc.n	800aeb4 <__mdiff+0xf8>
 800ae96:	f108 0103 	add.w	r1, r8, #3
 800ae9a:	1b49      	subs	r1, r1, r5
 800ae9c:	f021 0103 	bic.w	r1, r1, #3
 800aea0:	3d03      	subs	r5, #3
 800aea2:	45a8      	cmp	r8, r5
 800aea4:	bf38      	it	cc
 800aea6:	2100      	movcc	r1, #0
 800aea8:	440b      	add	r3, r1
 800aeaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aeae:	b191      	cbz	r1, 800aed6 <__mdiff+0x11a>
 800aeb0:	6117      	str	r7, [r2, #16]
 800aeb2:	e79d      	b.n	800adf0 <__mdiff+0x34>
 800aeb4:	f854 1b04 	ldr.w	r1, [r4], #4
 800aeb8:	46e6      	mov	lr, ip
 800aeba:	0c08      	lsrs	r0, r1, #16
 800aebc:	fa1c fc81 	uxtah	ip, ip, r1
 800aec0:	4471      	add	r1, lr
 800aec2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aec6:	b289      	uxth	r1, r1
 800aec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aecc:	f846 1b04 	str.w	r1, [r6], #4
 800aed0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aed4:	e7dd      	b.n	800ae92 <__mdiff+0xd6>
 800aed6:	3f01      	subs	r7, #1
 800aed8:	e7e7      	b.n	800aeaa <__mdiff+0xee>
 800aeda:	bf00      	nop
 800aedc:	0800d818 	.word	0x0800d818
 800aee0:	0800d8a0 	.word	0x0800d8a0

0800aee4 <__ulp>:
 800aee4:	b082      	sub	sp, #8
 800aee6:	ed8d 0b00 	vstr	d0, [sp]
 800aeea:	9a01      	ldr	r2, [sp, #4]
 800aeec:	4b0f      	ldr	r3, [pc, #60]	@ (800af2c <__ulp+0x48>)
 800aeee:	4013      	ands	r3, r2
 800aef0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	dc08      	bgt.n	800af0a <__ulp+0x26>
 800aef8:	425b      	negs	r3, r3
 800aefa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800aefe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800af02:	da04      	bge.n	800af0e <__ulp+0x2a>
 800af04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800af08:	4113      	asrs	r3, r2
 800af0a:	2200      	movs	r2, #0
 800af0c:	e008      	b.n	800af20 <__ulp+0x3c>
 800af0e:	f1a2 0314 	sub.w	r3, r2, #20
 800af12:	2b1e      	cmp	r3, #30
 800af14:	bfda      	itte	le
 800af16:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800af1a:	40da      	lsrle	r2, r3
 800af1c:	2201      	movgt	r2, #1
 800af1e:	2300      	movs	r3, #0
 800af20:	4619      	mov	r1, r3
 800af22:	4610      	mov	r0, r2
 800af24:	ec41 0b10 	vmov	d0, r0, r1
 800af28:	b002      	add	sp, #8
 800af2a:	4770      	bx	lr
 800af2c:	7ff00000 	.word	0x7ff00000

0800af30 <__b2d>:
 800af30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af34:	6906      	ldr	r6, [r0, #16]
 800af36:	f100 0814 	add.w	r8, r0, #20
 800af3a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800af3e:	1f37      	subs	r7, r6, #4
 800af40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800af44:	4610      	mov	r0, r2
 800af46:	f7ff fd4b 	bl	800a9e0 <__hi0bits>
 800af4a:	f1c0 0320 	rsb	r3, r0, #32
 800af4e:	280a      	cmp	r0, #10
 800af50:	600b      	str	r3, [r1, #0]
 800af52:	491b      	ldr	r1, [pc, #108]	@ (800afc0 <__b2d+0x90>)
 800af54:	dc15      	bgt.n	800af82 <__b2d+0x52>
 800af56:	f1c0 0c0b 	rsb	ip, r0, #11
 800af5a:	fa22 f30c 	lsr.w	r3, r2, ip
 800af5e:	45b8      	cmp	r8, r7
 800af60:	ea43 0501 	orr.w	r5, r3, r1
 800af64:	bf34      	ite	cc
 800af66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800af6a:	2300      	movcs	r3, #0
 800af6c:	3015      	adds	r0, #21
 800af6e:	fa02 f000 	lsl.w	r0, r2, r0
 800af72:	fa23 f30c 	lsr.w	r3, r3, ip
 800af76:	4303      	orrs	r3, r0
 800af78:	461c      	mov	r4, r3
 800af7a:	ec45 4b10 	vmov	d0, r4, r5
 800af7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af82:	45b8      	cmp	r8, r7
 800af84:	bf3a      	itte	cc
 800af86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800af8a:	f1a6 0708 	subcc.w	r7, r6, #8
 800af8e:	2300      	movcs	r3, #0
 800af90:	380b      	subs	r0, #11
 800af92:	d012      	beq.n	800afba <__b2d+0x8a>
 800af94:	f1c0 0120 	rsb	r1, r0, #32
 800af98:	fa23 f401 	lsr.w	r4, r3, r1
 800af9c:	4082      	lsls	r2, r0
 800af9e:	4322      	orrs	r2, r4
 800afa0:	4547      	cmp	r7, r8
 800afa2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800afa6:	bf8c      	ite	hi
 800afa8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800afac:	2200      	movls	r2, #0
 800afae:	4083      	lsls	r3, r0
 800afb0:	40ca      	lsrs	r2, r1
 800afb2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800afb6:	4313      	orrs	r3, r2
 800afb8:	e7de      	b.n	800af78 <__b2d+0x48>
 800afba:	ea42 0501 	orr.w	r5, r2, r1
 800afbe:	e7db      	b.n	800af78 <__b2d+0x48>
 800afc0:	3ff00000 	.word	0x3ff00000

0800afc4 <__d2b>:
 800afc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800afc8:	460f      	mov	r7, r1
 800afca:	2101      	movs	r1, #1
 800afcc:	ec59 8b10 	vmov	r8, r9, d0
 800afd0:	4616      	mov	r6, r2
 800afd2:	f7ff fc13 	bl	800a7fc <_Balloc>
 800afd6:	4604      	mov	r4, r0
 800afd8:	b930      	cbnz	r0, 800afe8 <__d2b+0x24>
 800afda:	4602      	mov	r2, r0
 800afdc:	4b23      	ldr	r3, [pc, #140]	@ (800b06c <__d2b+0xa8>)
 800afde:	4824      	ldr	r0, [pc, #144]	@ (800b070 <__d2b+0xac>)
 800afe0:	f240 310f 	movw	r1, #783	@ 0x30f
 800afe4:	f000 fcd8 	bl	800b998 <__assert_func>
 800afe8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800afec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aff0:	b10d      	cbz	r5, 800aff6 <__d2b+0x32>
 800aff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aff6:	9301      	str	r3, [sp, #4]
 800aff8:	f1b8 0300 	subs.w	r3, r8, #0
 800affc:	d023      	beq.n	800b046 <__d2b+0x82>
 800affe:	4668      	mov	r0, sp
 800b000:	9300      	str	r3, [sp, #0]
 800b002:	f7ff fd0c 	bl	800aa1e <__lo0bits>
 800b006:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b00a:	b1d0      	cbz	r0, 800b042 <__d2b+0x7e>
 800b00c:	f1c0 0320 	rsb	r3, r0, #32
 800b010:	fa02 f303 	lsl.w	r3, r2, r3
 800b014:	430b      	orrs	r3, r1
 800b016:	40c2      	lsrs	r2, r0
 800b018:	6163      	str	r3, [r4, #20]
 800b01a:	9201      	str	r2, [sp, #4]
 800b01c:	9b01      	ldr	r3, [sp, #4]
 800b01e:	61a3      	str	r3, [r4, #24]
 800b020:	2b00      	cmp	r3, #0
 800b022:	bf0c      	ite	eq
 800b024:	2201      	moveq	r2, #1
 800b026:	2202      	movne	r2, #2
 800b028:	6122      	str	r2, [r4, #16]
 800b02a:	b1a5      	cbz	r5, 800b056 <__d2b+0x92>
 800b02c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b030:	4405      	add	r5, r0
 800b032:	603d      	str	r5, [r7, #0]
 800b034:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b038:	6030      	str	r0, [r6, #0]
 800b03a:	4620      	mov	r0, r4
 800b03c:	b003      	add	sp, #12
 800b03e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b042:	6161      	str	r1, [r4, #20]
 800b044:	e7ea      	b.n	800b01c <__d2b+0x58>
 800b046:	a801      	add	r0, sp, #4
 800b048:	f7ff fce9 	bl	800aa1e <__lo0bits>
 800b04c:	9b01      	ldr	r3, [sp, #4]
 800b04e:	6163      	str	r3, [r4, #20]
 800b050:	3020      	adds	r0, #32
 800b052:	2201      	movs	r2, #1
 800b054:	e7e8      	b.n	800b028 <__d2b+0x64>
 800b056:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b05a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b05e:	6038      	str	r0, [r7, #0]
 800b060:	6918      	ldr	r0, [r3, #16]
 800b062:	f7ff fcbd 	bl	800a9e0 <__hi0bits>
 800b066:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b06a:	e7e5      	b.n	800b038 <__d2b+0x74>
 800b06c:	0800d818 	.word	0x0800d818
 800b070:	0800d8a0 	.word	0x0800d8a0

0800b074 <__ratio>:
 800b074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b078:	b085      	sub	sp, #20
 800b07a:	e9cd 1000 	strd	r1, r0, [sp]
 800b07e:	a902      	add	r1, sp, #8
 800b080:	f7ff ff56 	bl	800af30 <__b2d>
 800b084:	9800      	ldr	r0, [sp, #0]
 800b086:	a903      	add	r1, sp, #12
 800b088:	ec55 4b10 	vmov	r4, r5, d0
 800b08c:	f7ff ff50 	bl	800af30 <__b2d>
 800b090:	9b01      	ldr	r3, [sp, #4]
 800b092:	6919      	ldr	r1, [r3, #16]
 800b094:	9b00      	ldr	r3, [sp, #0]
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	1ac9      	subs	r1, r1, r3
 800b09a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b09e:	1a9b      	subs	r3, r3, r2
 800b0a0:	ec5b ab10 	vmov	sl, fp, d0
 800b0a4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	bfce      	itee	gt
 800b0ac:	462a      	movgt	r2, r5
 800b0ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b0b2:	465a      	movle	r2, fp
 800b0b4:	462f      	mov	r7, r5
 800b0b6:	46d9      	mov	r9, fp
 800b0b8:	bfcc      	ite	gt
 800b0ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b0be:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b0c2:	464b      	mov	r3, r9
 800b0c4:	4652      	mov	r2, sl
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	4639      	mov	r1, r7
 800b0ca:	f7f5 fbbf 	bl	800084c <__aeabi_ddiv>
 800b0ce:	ec41 0b10 	vmov	d0, r0, r1
 800b0d2:	b005      	add	sp, #20
 800b0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0d8 <__copybits>:
 800b0d8:	3901      	subs	r1, #1
 800b0da:	b570      	push	{r4, r5, r6, lr}
 800b0dc:	1149      	asrs	r1, r1, #5
 800b0de:	6914      	ldr	r4, [r2, #16]
 800b0e0:	3101      	adds	r1, #1
 800b0e2:	f102 0314 	add.w	r3, r2, #20
 800b0e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b0ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b0ee:	1f05      	subs	r5, r0, #4
 800b0f0:	42a3      	cmp	r3, r4
 800b0f2:	d30c      	bcc.n	800b10e <__copybits+0x36>
 800b0f4:	1aa3      	subs	r3, r4, r2
 800b0f6:	3b11      	subs	r3, #17
 800b0f8:	f023 0303 	bic.w	r3, r3, #3
 800b0fc:	3211      	adds	r2, #17
 800b0fe:	42a2      	cmp	r2, r4
 800b100:	bf88      	it	hi
 800b102:	2300      	movhi	r3, #0
 800b104:	4418      	add	r0, r3
 800b106:	2300      	movs	r3, #0
 800b108:	4288      	cmp	r0, r1
 800b10a:	d305      	bcc.n	800b118 <__copybits+0x40>
 800b10c:	bd70      	pop	{r4, r5, r6, pc}
 800b10e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b112:	f845 6f04 	str.w	r6, [r5, #4]!
 800b116:	e7eb      	b.n	800b0f0 <__copybits+0x18>
 800b118:	f840 3b04 	str.w	r3, [r0], #4
 800b11c:	e7f4      	b.n	800b108 <__copybits+0x30>

0800b11e <__any_on>:
 800b11e:	f100 0214 	add.w	r2, r0, #20
 800b122:	6900      	ldr	r0, [r0, #16]
 800b124:	114b      	asrs	r3, r1, #5
 800b126:	4298      	cmp	r0, r3
 800b128:	b510      	push	{r4, lr}
 800b12a:	db11      	blt.n	800b150 <__any_on+0x32>
 800b12c:	dd0a      	ble.n	800b144 <__any_on+0x26>
 800b12e:	f011 011f 	ands.w	r1, r1, #31
 800b132:	d007      	beq.n	800b144 <__any_on+0x26>
 800b134:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b138:	fa24 f001 	lsr.w	r0, r4, r1
 800b13c:	fa00 f101 	lsl.w	r1, r0, r1
 800b140:	428c      	cmp	r4, r1
 800b142:	d10b      	bne.n	800b15c <__any_on+0x3e>
 800b144:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b148:	4293      	cmp	r3, r2
 800b14a:	d803      	bhi.n	800b154 <__any_on+0x36>
 800b14c:	2000      	movs	r0, #0
 800b14e:	bd10      	pop	{r4, pc}
 800b150:	4603      	mov	r3, r0
 800b152:	e7f7      	b.n	800b144 <__any_on+0x26>
 800b154:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b158:	2900      	cmp	r1, #0
 800b15a:	d0f5      	beq.n	800b148 <__any_on+0x2a>
 800b15c:	2001      	movs	r0, #1
 800b15e:	e7f6      	b.n	800b14e <__any_on+0x30>

0800b160 <__ascii_wctomb>:
 800b160:	4603      	mov	r3, r0
 800b162:	4608      	mov	r0, r1
 800b164:	b141      	cbz	r1, 800b178 <__ascii_wctomb+0x18>
 800b166:	2aff      	cmp	r2, #255	@ 0xff
 800b168:	d904      	bls.n	800b174 <__ascii_wctomb+0x14>
 800b16a:	228a      	movs	r2, #138	@ 0x8a
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	f04f 30ff 	mov.w	r0, #4294967295
 800b172:	4770      	bx	lr
 800b174:	700a      	strb	r2, [r1, #0]
 800b176:	2001      	movs	r0, #1
 800b178:	4770      	bx	lr

0800b17a <__sfputc_r>:
 800b17a:	6893      	ldr	r3, [r2, #8]
 800b17c:	3b01      	subs	r3, #1
 800b17e:	2b00      	cmp	r3, #0
 800b180:	b410      	push	{r4}
 800b182:	6093      	str	r3, [r2, #8]
 800b184:	da08      	bge.n	800b198 <__sfputc_r+0x1e>
 800b186:	6994      	ldr	r4, [r2, #24]
 800b188:	42a3      	cmp	r3, r4
 800b18a:	db01      	blt.n	800b190 <__sfputc_r+0x16>
 800b18c:	290a      	cmp	r1, #10
 800b18e:	d103      	bne.n	800b198 <__sfputc_r+0x1e>
 800b190:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b194:	f7fe bdad 	b.w	8009cf2 <__swbuf_r>
 800b198:	6813      	ldr	r3, [r2, #0]
 800b19a:	1c58      	adds	r0, r3, #1
 800b19c:	6010      	str	r0, [r2, #0]
 800b19e:	7019      	strb	r1, [r3, #0]
 800b1a0:	4608      	mov	r0, r1
 800b1a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <__sfputs_r>:
 800b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1aa:	4606      	mov	r6, r0
 800b1ac:	460f      	mov	r7, r1
 800b1ae:	4614      	mov	r4, r2
 800b1b0:	18d5      	adds	r5, r2, r3
 800b1b2:	42ac      	cmp	r4, r5
 800b1b4:	d101      	bne.n	800b1ba <__sfputs_r+0x12>
 800b1b6:	2000      	movs	r0, #0
 800b1b8:	e007      	b.n	800b1ca <__sfputs_r+0x22>
 800b1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1be:	463a      	mov	r2, r7
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	f7ff ffda 	bl	800b17a <__sfputc_r>
 800b1c6:	1c43      	adds	r3, r0, #1
 800b1c8:	d1f3      	bne.n	800b1b2 <__sfputs_r+0xa>
 800b1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b1cc <_vfiprintf_r>:
 800b1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d0:	460d      	mov	r5, r1
 800b1d2:	b09d      	sub	sp, #116	@ 0x74
 800b1d4:	4614      	mov	r4, r2
 800b1d6:	4698      	mov	r8, r3
 800b1d8:	4606      	mov	r6, r0
 800b1da:	b118      	cbz	r0, 800b1e4 <_vfiprintf_r+0x18>
 800b1dc:	6a03      	ldr	r3, [r0, #32]
 800b1de:	b90b      	cbnz	r3, 800b1e4 <_vfiprintf_r+0x18>
 800b1e0:	f7fe fc9e 	bl	8009b20 <__sinit>
 800b1e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1e6:	07d9      	lsls	r1, r3, #31
 800b1e8:	d405      	bmi.n	800b1f6 <_vfiprintf_r+0x2a>
 800b1ea:	89ab      	ldrh	r3, [r5, #12]
 800b1ec:	059a      	lsls	r2, r3, #22
 800b1ee:	d402      	bmi.n	800b1f6 <_vfiprintf_r+0x2a>
 800b1f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1f2:	f7fe fe9e 	bl	8009f32 <__retarget_lock_acquire_recursive>
 800b1f6:	89ab      	ldrh	r3, [r5, #12]
 800b1f8:	071b      	lsls	r3, r3, #28
 800b1fa:	d501      	bpl.n	800b200 <_vfiprintf_r+0x34>
 800b1fc:	692b      	ldr	r3, [r5, #16]
 800b1fe:	b99b      	cbnz	r3, 800b228 <_vfiprintf_r+0x5c>
 800b200:	4629      	mov	r1, r5
 800b202:	4630      	mov	r0, r6
 800b204:	f7fe fdb4 	bl	8009d70 <__swsetup_r>
 800b208:	b170      	cbz	r0, 800b228 <_vfiprintf_r+0x5c>
 800b20a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b20c:	07dc      	lsls	r4, r3, #31
 800b20e:	d504      	bpl.n	800b21a <_vfiprintf_r+0x4e>
 800b210:	f04f 30ff 	mov.w	r0, #4294967295
 800b214:	b01d      	add	sp, #116	@ 0x74
 800b216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21a:	89ab      	ldrh	r3, [r5, #12]
 800b21c:	0598      	lsls	r0, r3, #22
 800b21e:	d4f7      	bmi.n	800b210 <_vfiprintf_r+0x44>
 800b220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b222:	f7fe fe87 	bl	8009f34 <__retarget_lock_release_recursive>
 800b226:	e7f3      	b.n	800b210 <_vfiprintf_r+0x44>
 800b228:	2300      	movs	r3, #0
 800b22a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b22c:	2320      	movs	r3, #32
 800b22e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b232:	f8cd 800c 	str.w	r8, [sp, #12]
 800b236:	2330      	movs	r3, #48	@ 0x30
 800b238:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b3e8 <_vfiprintf_r+0x21c>
 800b23c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b240:	f04f 0901 	mov.w	r9, #1
 800b244:	4623      	mov	r3, r4
 800b246:	469a      	mov	sl, r3
 800b248:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b24c:	b10a      	cbz	r2, 800b252 <_vfiprintf_r+0x86>
 800b24e:	2a25      	cmp	r2, #37	@ 0x25
 800b250:	d1f9      	bne.n	800b246 <_vfiprintf_r+0x7a>
 800b252:	ebba 0b04 	subs.w	fp, sl, r4
 800b256:	d00b      	beq.n	800b270 <_vfiprintf_r+0xa4>
 800b258:	465b      	mov	r3, fp
 800b25a:	4622      	mov	r2, r4
 800b25c:	4629      	mov	r1, r5
 800b25e:	4630      	mov	r0, r6
 800b260:	f7ff ffa2 	bl	800b1a8 <__sfputs_r>
 800b264:	3001      	adds	r0, #1
 800b266:	f000 80a7 	beq.w	800b3b8 <_vfiprintf_r+0x1ec>
 800b26a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b26c:	445a      	add	r2, fp
 800b26e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b270:	f89a 3000 	ldrb.w	r3, [sl]
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 809f 	beq.w	800b3b8 <_vfiprintf_r+0x1ec>
 800b27a:	2300      	movs	r3, #0
 800b27c:	f04f 32ff 	mov.w	r2, #4294967295
 800b280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b284:	f10a 0a01 	add.w	sl, sl, #1
 800b288:	9304      	str	r3, [sp, #16]
 800b28a:	9307      	str	r3, [sp, #28]
 800b28c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b290:	931a      	str	r3, [sp, #104]	@ 0x68
 800b292:	4654      	mov	r4, sl
 800b294:	2205      	movs	r2, #5
 800b296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b29a:	4853      	ldr	r0, [pc, #332]	@ (800b3e8 <_vfiprintf_r+0x21c>)
 800b29c:	f7f4 ffa0 	bl	80001e0 <memchr>
 800b2a0:	9a04      	ldr	r2, [sp, #16]
 800b2a2:	b9d8      	cbnz	r0, 800b2dc <_vfiprintf_r+0x110>
 800b2a4:	06d1      	lsls	r1, r2, #27
 800b2a6:	bf44      	itt	mi
 800b2a8:	2320      	movmi	r3, #32
 800b2aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2ae:	0713      	lsls	r3, r2, #28
 800b2b0:	bf44      	itt	mi
 800b2b2:	232b      	movmi	r3, #43	@ 0x2b
 800b2b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b2bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2be:	d015      	beq.n	800b2ec <_vfiprintf_r+0x120>
 800b2c0:	9a07      	ldr	r2, [sp, #28]
 800b2c2:	4654      	mov	r4, sl
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	f04f 0c0a 	mov.w	ip, #10
 800b2ca:	4621      	mov	r1, r4
 800b2cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2d0:	3b30      	subs	r3, #48	@ 0x30
 800b2d2:	2b09      	cmp	r3, #9
 800b2d4:	d94b      	bls.n	800b36e <_vfiprintf_r+0x1a2>
 800b2d6:	b1b0      	cbz	r0, 800b306 <_vfiprintf_r+0x13a>
 800b2d8:	9207      	str	r2, [sp, #28]
 800b2da:	e014      	b.n	800b306 <_vfiprintf_r+0x13a>
 800b2dc:	eba0 0308 	sub.w	r3, r0, r8
 800b2e0:	fa09 f303 	lsl.w	r3, r9, r3
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	9304      	str	r3, [sp, #16]
 800b2e8:	46a2      	mov	sl, r4
 800b2ea:	e7d2      	b.n	800b292 <_vfiprintf_r+0xc6>
 800b2ec:	9b03      	ldr	r3, [sp, #12]
 800b2ee:	1d19      	adds	r1, r3, #4
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	9103      	str	r1, [sp, #12]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	bfbb      	ittet	lt
 800b2f8:	425b      	neglt	r3, r3
 800b2fa:	f042 0202 	orrlt.w	r2, r2, #2
 800b2fe:	9307      	strge	r3, [sp, #28]
 800b300:	9307      	strlt	r3, [sp, #28]
 800b302:	bfb8      	it	lt
 800b304:	9204      	strlt	r2, [sp, #16]
 800b306:	7823      	ldrb	r3, [r4, #0]
 800b308:	2b2e      	cmp	r3, #46	@ 0x2e
 800b30a:	d10a      	bne.n	800b322 <_vfiprintf_r+0x156>
 800b30c:	7863      	ldrb	r3, [r4, #1]
 800b30e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b310:	d132      	bne.n	800b378 <_vfiprintf_r+0x1ac>
 800b312:	9b03      	ldr	r3, [sp, #12]
 800b314:	1d1a      	adds	r2, r3, #4
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	9203      	str	r2, [sp, #12]
 800b31a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b31e:	3402      	adds	r4, #2
 800b320:	9305      	str	r3, [sp, #20]
 800b322:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b3f8 <_vfiprintf_r+0x22c>
 800b326:	7821      	ldrb	r1, [r4, #0]
 800b328:	2203      	movs	r2, #3
 800b32a:	4650      	mov	r0, sl
 800b32c:	f7f4 ff58 	bl	80001e0 <memchr>
 800b330:	b138      	cbz	r0, 800b342 <_vfiprintf_r+0x176>
 800b332:	9b04      	ldr	r3, [sp, #16]
 800b334:	eba0 000a 	sub.w	r0, r0, sl
 800b338:	2240      	movs	r2, #64	@ 0x40
 800b33a:	4082      	lsls	r2, r0
 800b33c:	4313      	orrs	r3, r2
 800b33e:	3401      	adds	r4, #1
 800b340:	9304      	str	r3, [sp, #16]
 800b342:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b346:	4829      	ldr	r0, [pc, #164]	@ (800b3ec <_vfiprintf_r+0x220>)
 800b348:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b34c:	2206      	movs	r2, #6
 800b34e:	f7f4 ff47 	bl	80001e0 <memchr>
 800b352:	2800      	cmp	r0, #0
 800b354:	d03f      	beq.n	800b3d6 <_vfiprintf_r+0x20a>
 800b356:	4b26      	ldr	r3, [pc, #152]	@ (800b3f0 <_vfiprintf_r+0x224>)
 800b358:	bb1b      	cbnz	r3, 800b3a2 <_vfiprintf_r+0x1d6>
 800b35a:	9b03      	ldr	r3, [sp, #12]
 800b35c:	3307      	adds	r3, #7
 800b35e:	f023 0307 	bic.w	r3, r3, #7
 800b362:	3308      	adds	r3, #8
 800b364:	9303      	str	r3, [sp, #12]
 800b366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b368:	443b      	add	r3, r7
 800b36a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b36c:	e76a      	b.n	800b244 <_vfiprintf_r+0x78>
 800b36e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b372:	460c      	mov	r4, r1
 800b374:	2001      	movs	r0, #1
 800b376:	e7a8      	b.n	800b2ca <_vfiprintf_r+0xfe>
 800b378:	2300      	movs	r3, #0
 800b37a:	3401      	adds	r4, #1
 800b37c:	9305      	str	r3, [sp, #20]
 800b37e:	4619      	mov	r1, r3
 800b380:	f04f 0c0a 	mov.w	ip, #10
 800b384:	4620      	mov	r0, r4
 800b386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b38a:	3a30      	subs	r2, #48	@ 0x30
 800b38c:	2a09      	cmp	r2, #9
 800b38e:	d903      	bls.n	800b398 <_vfiprintf_r+0x1cc>
 800b390:	2b00      	cmp	r3, #0
 800b392:	d0c6      	beq.n	800b322 <_vfiprintf_r+0x156>
 800b394:	9105      	str	r1, [sp, #20]
 800b396:	e7c4      	b.n	800b322 <_vfiprintf_r+0x156>
 800b398:	fb0c 2101 	mla	r1, ip, r1, r2
 800b39c:	4604      	mov	r4, r0
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e7f0      	b.n	800b384 <_vfiprintf_r+0x1b8>
 800b3a2:	ab03      	add	r3, sp, #12
 800b3a4:	9300      	str	r3, [sp, #0]
 800b3a6:	462a      	mov	r2, r5
 800b3a8:	4b12      	ldr	r3, [pc, #72]	@ (800b3f4 <_vfiprintf_r+0x228>)
 800b3aa:	a904      	add	r1, sp, #16
 800b3ac:	4630      	mov	r0, r6
 800b3ae:	f3af 8000 	nop.w
 800b3b2:	4607      	mov	r7, r0
 800b3b4:	1c78      	adds	r0, r7, #1
 800b3b6:	d1d6      	bne.n	800b366 <_vfiprintf_r+0x19a>
 800b3b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3ba:	07d9      	lsls	r1, r3, #31
 800b3bc:	d405      	bmi.n	800b3ca <_vfiprintf_r+0x1fe>
 800b3be:	89ab      	ldrh	r3, [r5, #12]
 800b3c0:	059a      	lsls	r2, r3, #22
 800b3c2:	d402      	bmi.n	800b3ca <_vfiprintf_r+0x1fe>
 800b3c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3c6:	f7fe fdb5 	bl	8009f34 <__retarget_lock_release_recursive>
 800b3ca:	89ab      	ldrh	r3, [r5, #12]
 800b3cc:	065b      	lsls	r3, r3, #25
 800b3ce:	f53f af1f 	bmi.w	800b210 <_vfiprintf_r+0x44>
 800b3d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b3d4:	e71e      	b.n	800b214 <_vfiprintf_r+0x48>
 800b3d6:	ab03      	add	r3, sp, #12
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	462a      	mov	r2, r5
 800b3dc:	4b05      	ldr	r3, [pc, #20]	@ (800b3f4 <_vfiprintf_r+0x228>)
 800b3de:	a904      	add	r1, sp, #16
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	f000 f879 	bl	800b4d8 <_printf_i>
 800b3e6:	e7e4      	b.n	800b3b2 <_vfiprintf_r+0x1e6>
 800b3e8:	0800daf9 	.word	0x0800daf9
 800b3ec:	0800db03 	.word	0x0800db03
 800b3f0:	00000000 	.word	0x00000000
 800b3f4:	0800b1a9 	.word	0x0800b1a9
 800b3f8:	0800daff 	.word	0x0800daff

0800b3fc <_printf_common>:
 800b3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b400:	4616      	mov	r6, r2
 800b402:	4698      	mov	r8, r3
 800b404:	688a      	ldr	r2, [r1, #8]
 800b406:	690b      	ldr	r3, [r1, #16]
 800b408:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b40c:	4293      	cmp	r3, r2
 800b40e:	bfb8      	it	lt
 800b410:	4613      	movlt	r3, r2
 800b412:	6033      	str	r3, [r6, #0]
 800b414:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b418:	4607      	mov	r7, r0
 800b41a:	460c      	mov	r4, r1
 800b41c:	b10a      	cbz	r2, 800b422 <_printf_common+0x26>
 800b41e:	3301      	adds	r3, #1
 800b420:	6033      	str	r3, [r6, #0]
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	0699      	lsls	r1, r3, #26
 800b426:	bf42      	ittt	mi
 800b428:	6833      	ldrmi	r3, [r6, #0]
 800b42a:	3302      	addmi	r3, #2
 800b42c:	6033      	strmi	r3, [r6, #0]
 800b42e:	6825      	ldr	r5, [r4, #0]
 800b430:	f015 0506 	ands.w	r5, r5, #6
 800b434:	d106      	bne.n	800b444 <_printf_common+0x48>
 800b436:	f104 0a19 	add.w	sl, r4, #25
 800b43a:	68e3      	ldr	r3, [r4, #12]
 800b43c:	6832      	ldr	r2, [r6, #0]
 800b43e:	1a9b      	subs	r3, r3, r2
 800b440:	42ab      	cmp	r3, r5
 800b442:	dc26      	bgt.n	800b492 <_printf_common+0x96>
 800b444:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b448:	6822      	ldr	r2, [r4, #0]
 800b44a:	3b00      	subs	r3, #0
 800b44c:	bf18      	it	ne
 800b44e:	2301      	movne	r3, #1
 800b450:	0692      	lsls	r2, r2, #26
 800b452:	d42b      	bmi.n	800b4ac <_printf_common+0xb0>
 800b454:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b458:	4641      	mov	r1, r8
 800b45a:	4638      	mov	r0, r7
 800b45c:	47c8      	blx	r9
 800b45e:	3001      	adds	r0, #1
 800b460:	d01e      	beq.n	800b4a0 <_printf_common+0xa4>
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	6922      	ldr	r2, [r4, #16]
 800b466:	f003 0306 	and.w	r3, r3, #6
 800b46a:	2b04      	cmp	r3, #4
 800b46c:	bf02      	ittt	eq
 800b46e:	68e5      	ldreq	r5, [r4, #12]
 800b470:	6833      	ldreq	r3, [r6, #0]
 800b472:	1aed      	subeq	r5, r5, r3
 800b474:	68a3      	ldr	r3, [r4, #8]
 800b476:	bf0c      	ite	eq
 800b478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b47c:	2500      	movne	r5, #0
 800b47e:	4293      	cmp	r3, r2
 800b480:	bfc4      	itt	gt
 800b482:	1a9b      	subgt	r3, r3, r2
 800b484:	18ed      	addgt	r5, r5, r3
 800b486:	2600      	movs	r6, #0
 800b488:	341a      	adds	r4, #26
 800b48a:	42b5      	cmp	r5, r6
 800b48c:	d11a      	bne.n	800b4c4 <_printf_common+0xc8>
 800b48e:	2000      	movs	r0, #0
 800b490:	e008      	b.n	800b4a4 <_printf_common+0xa8>
 800b492:	2301      	movs	r3, #1
 800b494:	4652      	mov	r2, sl
 800b496:	4641      	mov	r1, r8
 800b498:	4638      	mov	r0, r7
 800b49a:	47c8      	blx	r9
 800b49c:	3001      	adds	r0, #1
 800b49e:	d103      	bne.n	800b4a8 <_printf_common+0xac>
 800b4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a8:	3501      	adds	r5, #1
 800b4aa:	e7c6      	b.n	800b43a <_printf_common+0x3e>
 800b4ac:	18e1      	adds	r1, r4, r3
 800b4ae:	1c5a      	adds	r2, r3, #1
 800b4b0:	2030      	movs	r0, #48	@ 0x30
 800b4b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b4b6:	4422      	add	r2, r4
 800b4b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b4bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b4c0:	3302      	adds	r3, #2
 800b4c2:	e7c7      	b.n	800b454 <_printf_common+0x58>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	4622      	mov	r2, r4
 800b4c8:	4641      	mov	r1, r8
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	47c8      	blx	r9
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	d0e6      	beq.n	800b4a0 <_printf_common+0xa4>
 800b4d2:	3601      	adds	r6, #1
 800b4d4:	e7d9      	b.n	800b48a <_printf_common+0x8e>
	...

0800b4d8 <_printf_i>:
 800b4d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4dc:	7e0f      	ldrb	r7, [r1, #24]
 800b4de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b4e0:	2f78      	cmp	r7, #120	@ 0x78
 800b4e2:	4691      	mov	r9, r2
 800b4e4:	4680      	mov	r8, r0
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	469a      	mov	sl, r3
 800b4ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b4ee:	d807      	bhi.n	800b500 <_printf_i+0x28>
 800b4f0:	2f62      	cmp	r7, #98	@ 0x62
 800b4f2:	d80a      	bhi.n	800b50a <_printf_i+0x32>
 800b4f4:	2f00      	cmp	r7, #0
 800b4f6:	f000 80d2 	beq.w	800b69e <_printf_i+0x1c6>
 800b4fa:	2f58      	cmp	r7, #88	@ 0x58
 800b4fc:	f000 80b9 	beq.w	800b672 <_printf_i+0x19a>
 800b500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b504:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b508:	e03a      	b.n	800b580 <_printf_i+0xa8>
 800b50a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b50e:	2b15      	cmp	r3, #21
 800b510:	d8f6      	bhi.n	800b500 <_printf_i+0x28>
 800b512:	a101      	add	r1, pc, #4	@ (adr r1, 800b518 <_printf_i+0x40>)
 800b514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b518:	0800b571 	.word	0x0800b571
 800b51c:	0800b585 	.word	0x0800b585
 800b520:	0800b501 	.word	0x0800b501
 800b524:	0800b501 	.word	0x0800b501
 800b528:	0800b501 	.word	0x0800b501
 800b52c:	0800b501 	.word	0x0800b501
 800b530:	0800b585 	.word	0x0800b585
 800b534:	0800b501 	.word	0x0800b501
 800b538:	0800b501 	.word	0x0800b501
 800b53c:	0800b501 	.word	0x0800b501
 800b540:	0800b501 	.word	0x0800b501
 800b544:	0800b685 	.word	0x0800b685
 800b548:	0800b5af 	.word	0x0800b5af
 800b54c:	0800b63f 	.word	0x0800b63f
 800b550:	0800b501 	.word	0x0800b501
 800b554:	0800b501 	.word	0x0800b501
 800b558:	0800b6a7 	.word	0x0800b6a7
 800b55c:	0800b501 	.word	0x0800b501
 800b560:	0800b5af 	.word	0x0800b5af
 800b564:	0800b501 	.word	0x0800b501
 800b568:	0800b501 	.word	0x0800b501
 800b56c:	0800b647 	.word	0x0800b647
 800b570:	6833      	ldr	r3, [r6, #0]
 800b572:	1d1a      	adds	r2, r3, #4
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6032      	str	r2, [r6, #0]
 800b578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b57c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b580:	2301      	movs	r3, #1
 800b582:	e09d      	b.n	800b6c0 <_printf_i+0x1e8>
 800b584:	6833      	ldr	r3, [r6, #0]
 800b586:	6820      	ldr	r0, [r4, #0]
 800b588:	1d19      	adds	r1, r3, #4
 800b58a:	6031      	str	r1, [r6, #0]
 800b58c:	0606      	lsls	r6, r0, #24
 800b58e:	d501      	bpl.n	800b594 <_printf_i+0xbc>
 800b590:	681d      	ldr	r5, [r3, #0]
 800b592:	e003      	b.n	800b59c <_printf_i+0xc4>
 800b594:	0645      	lsls	r5, r0, #25
 800b596:	d5fb      	bpl.n	800b590 <_printf_i+0xb8>
 800b598:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b59c:	2d00      	cmp	r5, #0
 800b59e:	da03      	bge.n	800b5a8 <_printf_i+0xd0>
 800b5a0:	232d      	movs	r3, #45	@ 0x2d
 800b5a2:	426d      	negs	r5, r5
 800b5a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5a8:	4859      	ldr	r0, [pc, #356]	@ (800b710 <_printf_i+0x238>)
 800b5aa:	230a      	movs	r3, #10
 800b5ac:	e011      	b.n	800b5d2 <_printf_i+0xfa>
 800b5ae:	6821      	ldr	r1, [r4, #0]
 800b5b0:	6833      	ldr	r3, [r6, #0]
 800b5b2:	0608      	lsls	r0, r1, #24
 800b5b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b5b8:	d402      	bmi.n	800b5c0 <_printf_i+0xe8>
 800b5ba:	0649      	lsls	r1, r1, #25
 800b5bc:	bf48      	it	mi
 800b5be:	b2ad      	uxthmi	r5, r5
 800b5c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b5c2:	4853      	ldr	r0, [pc, #332]	@ (800b710 <_printf_i+0x238>)
 800b5c4:	6033      	str	r3, [r6, #0]
 800b5c6:	bf14      	ite	ne
 800b5c8:	230a      	movne	r3, #10
 800b5ca:	2308      	moveq	r3, #8
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b5d2:	6866      	ldr	r6, [r4, #4]
 800b5d4:	60a6      	str	r6, [r4, #8]
 800b5d6:	2e00      	cmp	r6, #0
 800b5d8:	bfa2      	ittt	ge
 800b5da:	6821      	ldrge	r1, [r4, #0]
 800b5dc:	f021 0104 	bicge.w	r1, r1, #4
 800b5e0:	6021      	strge	r1, [r4, #0]
 800b5e2:	b90d      	cbnz	r5, 800b5e8 <_printf_i+0x110>
 800b5e4:	2e00      	cmp	r6, #0
 800b5e6:	d04b      	beq.n	800b680 <_printf_i+0x1a8>
 800b5e8:	4616      	mov	r6, r2
 800b5ea:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5ee:	fb03 5711 	mls	r7, r3, r1, r5
 800b5f2:	5dc7      	ldrb	r7, [r0, r7]
 800b5f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5f8:	462f      	mov	r7, r5
 800b5fa:	42bb      	cmp	r3, r7
 800b5fc:	460d      	mov	r5, r1
 800b5fe:	d9f4      	bls.n	800b5ea <_printf_i+0x112>
 800b600:	2b08      	cmp	r3, #8
 800b602:	d10b      	bne.n	800b61c <_printf_i+0x144>
 800b604:	6823      	ldr	r3, [r4, #0]
 800b606:	07df      	lsls	r7, r3, #31
 800b608:	d508      	bpl.n	800b61c <_printf_i+0x144>
 800b60a:	6923      	ldr	r3, [r4, #16]
 800b60c:	6861      	ldr	r1, [r4, #4]
 800b60e:	4299      	cmp	r1, r3
 800b610:	bfde      	ittt	le
 800b612:	2330      	movle	r3, #48	@ 0x30
 800b614:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b618:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b61c:	1b92      	subs	r2, r2, r6
 800b61e:	6122      	str	r2, [r4, #16]
 800b620:	f8cd a000 	str.w	sl, [sp]
 800b624:	464b      	mov	r3, r9
 800b626:	aa03      	add	r2, sp, #12
 800b628:	4621      	mov	r1, r4
 800b62a:	4640      	mov	r0, r8
 800b62c:	f7ff fee6 	bl	800b3fc <_printf_common>
 800b630:	3001      	adds	r0, #1
 800b632:	d14a      	bne.n	800b6ca <_printf_i+0x1f2>
 800b634:	f04f 30ff 	mov.w	r0, #4294967295
 800b638:	b004      	add	sp, #16
 800b63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b63e:	6823      	ldr	r3, [r4, #0]
 800b640:	f043 0320 	orr.w	r3, r3, #32
 800b644:	6023      	str	r3, [r4, #0]
 800b646:	4833      	ldr	r0, [pc, #204]	@ (800b714 <_printf_i+0x23c>)
 800b648:	2778      	movs	r7, #120	@ 0x78
 800b64a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b64e:	6823      	ldr	r3, [r4, #0]
 800b650:	6831      	ldr	r1, [r6, #0]
 800b652:	061f      	lsls	r7, r3, #24
 800b654:	f851 5b04 	ldr.w	r5, [r1], #4
 800b658:	d402      	bmi.n	800b660 <_printf_i+0x188>
 800b65a:	065f      	lsls	r7, r3, #25
 800b65c:	bf48      	it	mi
 800b65e:	b2ad      	uxthmi	r5, r5
 800b660:	6031      	str	r1, [r6, #0]
 800b662:	07d9      	lsls	r1, r3, #31
 800b664:	bf44      	itt	mi
 800b666:	f043 0320 	orrmi.w	r3, r3, #32
 800b66a:	6023      	strmi	r3, [r4, #0]
 800b66c:	b11d      	cbz	r5, 800b676 <_printf_i+0x19e>
 800b66e:	2310      	movs	r3, #16
 800b670:	e7ac      	b.n	800b5cc <_printf_i+0xf4>
 800b672:	4827      	ldr	r0, [pc, #156]	@ (800b710 <_printf_i+0x238>)
 800b674:	e7e9      	b.n	800b64a <_printf_i+0x172>
 800b676:	6823      	ldr	r3, [r4, #0]
 800b678:	f023 0320 	bic.w	r3, r3, #32
 800b67c:	6023      	str	r3, [r4, #0]
 800b67e:	e7f6      	b.n	800b66e <_printf_i+0x196>
 800b680:	4616      	mov	r6, r2
 800b682:	e7bd      	b.n	800b600 <_printf_i+0x128>
 800b684:	6833      	ldr	r3, [r6, #0]
 800b686:	6825      	ldr	r5, [r4, #0]
 800b688:	6961      	ldr	r1, [r4, #20]
 800b68a:	1d18      	adds	r0, r3, #4
 800b68c:	6030      	str	r0, [r6, #0]
 800b68e:	062e      	lsls	r6, r5, #24
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	d501      	bpl.n	800b698 <_printf_i+0x1c0>
 800b694:	6019      	str	r1, [r3, #0]
 800b696:	e002      	b.n	800b69e <_printf_i+0x1c6>
 800b698:	0668      	lsls	r0, r5, #25
 800b69a:	d5fb      	bpl.n	800b694 <_printf_i+0x1bc>
 800b69c:	8019      	strh	r1, [r3, #0]
 800b69e:	2300      	movs	r3, #0
 800b6a0:	6123      	str	r3, [r4, #16]
 800b6a2:	4616      	mov	r6, r2
 800b6a4:	e7bc      	b.n	800b620 <_printf_i+0x148>
 800b6a6:	6833      	ldr	r3, [r6, #0]
 800b6a8:	1d1a      	adds	r2, r3, #4
 800b6aa:	6032      	str	r2, [r6, #0]
 800b6ac:	681e      	ldr	r6, [r3, #0]
 800b6ae:	6862      	ldr	r2, [r4, #4]
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	f7f4 fd94 	bl	80001e0 <memchr>
 800b6b8:	b108      	cbz	r0, 800b6be <_printf_i+0x1e6>
 800b6ba:	1b80      	subs	r0, r0, r6
 800b6bc:	6060      	str	r0, [r4, #4]
 800b6be:	6863      	ldr	r3, [r4, #4]
 800b6c0:	6123      	str	r3, [r4, #16]
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6c8:	e7aa      	b.n	800b620 <_printf_i+0x148>
 800b6ca:	6923      	ldr	r3, [r4, #16]
 800b6cc:	4632      	mov	r2, r6
 800b6ce:	4649      	mov	r1, r9
 800b6d0:	4640      	mov	r0, r8
 800b6d2:	47d0      	blx	sl
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	d0ad      	beq.n	800b634 <_printf_i+0x15c>
 800b6d8:	6823      	ldr	r3, [r4, #0]
 800b6da:	079b      	lsls	r3, r3, #30
 800b6dc:	d413      	bmi.n	800b706 <_printf_i+0x22e>
 800b6de:	68e0      	ldr	r0, [r4, #12]
 800b6e0:	9b03      	ldr	r3, [sp, #12]
 800b6e2:	4298      	cmp	r0, r3
 800b6e4:	bfb8      	it	lt
 800b6e6:	4618      	movlt	r0, r3
 800b6e8:	e7a6      	b.n	800b638 <_printf_i+0x160>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	4632      	mov	r2, r6
 800b6ee:	4649      	mov	r1, r9
 800b6f0:	4640      	mov	r0, r8
 800b6f2:	47d0      	blx	sl
 800b6f4:	3001      	adds	r0, #1
 800b6f6:	d09d      	beq.n	800b634 <_printf_i+0x15c>
 800b6f8:	3501      	adds	r5, #1
 800b6fa:	68e3      	ldr	r3, [r4, #12]
 800b6fc:	9903      	ldr	r1, [sp, #12]
 800b6fe:	1a5b      	subs	r3, r3, r1
 800b700:	42ab      	cmp	r3, r5
 800b702:	dcf2      	bgt.n	800b6ea <_printf_i+0x212>
 800b704:	e7eb      	b.n	800b6de <_printf_i+0x206>
 800b706:	2500      	movs	r5, #0
 800b708:	f104 0619 	add.w	r6, r4, #25
 800b70c:	e7f5      	b.n	800b6fa <_printf_i+0x222>
 800b70e:	bf00      	nop
 800b710:	0800db0a 	.word	0x0800db0a
 800b714:	0800db1b 	.word	0x0800db1b

0800b718 <__sflush_r>:
 800b718:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b720:	0716      	lsls	r6, r2, #28
 800b722:	4605      	mov	r5, r0
 800b724:	460c      	mov	r4, r1
 800b726:	d454      	bmi.n	800b7d2 <__sflush_r+0xba>
 800b728:	684b      	ldr	r3, [r1, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	dc02      	bgt.n	800b734 <__sflush_r+0x1c>
 800b72e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b730:	2b00      	cmp	r3, #0
 800b732:	dd48      	ble.n	800b7c6 <__sflush_r+0xae>
 800b734:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b736:	2e00      	cmp	r6, #0
 800b738:	d045      	beq.n	800b7c6 <__sflush_r+0xae>
 800b73a:	2300      	movs	r3, #0
 800b73c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b740:	682f      	ldr	r7, [r5, #0]
 800b742:	6a21      	ldr	r1, [r4, #32]
 800b744:	602b      	str	r3, [r5, #0]
 800b746:	d030      	beq.n	800b7aa <__sflush_r+0x92>
 800b748:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b74a:	89a3      	ldrh	r3, [r4, #12]
 800b74c:	0759      	lsls	r1, r3, #29
 800b74e:	d505      	bpl.n	800b75c <__sflush_r+0x44>
 800b750:	6863      	ldr	r3, [r4, #4]
 800b752:	1ad2      	subs	r2, r2, r3
 800b754:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b756:	b10b      	cbz	r3, 800b75c <__sflush_r+0x44>
 800b758:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b75a:	1ad2      	subs	r2, r2, r3
 800b75c:	2300      	movs	r3, #0
 800b75e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b760:	6a21      	ldr	r1, [r4, #32]
 800b762:	4628      	mov	r0, r5
 800b764:	47b0      	blx	r6
 800b766:	1c43      	adds	r3, r0, #1
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	d106      	bne.n	800b77a <__sflush_r+0x62>
 800b76c:	6829      	ldr	r1, [r5, #0]
 800b76e:	291d      	cmp	r1, #29
 800b770:	d82b      	bhi.n	800b7ca <__sflush_r+0xb2>
 800b772:	4a2a      	ldr	r2, [pc, #168]	@ (800b81c <__sflush_r+0x104>)
 800b774:	410a      	asrs	r2, r1
 800b776:	07d6      	lsls	r6, r2, #31
 800b778:	d427      	bmi.n	800b7ca <__sflush_r+0xb2>
 800b77a:	2200      	movs	r2, #0
 800b77c:	6062      	str	r2, [r4, #4]
 800b77e:	04d9      	lsls	r1, r3, #19
 800b780:	6922      	ldr	r2, [r4, #16]
 800b782:	6022      	str	r2, [r4, #0]
 800b784:	d504      	bpl.n	800b790 <__sflush_r+0x78>
 800b786:	1c42      	adds	r2, r0, #1
 800b788:	d101      	bne.n	800b78e <__sflush_r+0x76>
 800b78a:	682b      	ldr	r3, [r5, #0]
 800b78c:	b903      	cbnz	r3, 800b790 <__sflush_r+0x78>
 800b78e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b790:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b792:	602f      	str	r7, [r5, #0]
 800b794:	b1b9      	cbz	r1, 800b7c6 <__sflush_r+0xae>
 800b796:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b79a:	4299      	cmp	r1, r3
 800b79c:	d002      	beq.n	800b7a4 <__sflush_r+0x8c>
 800b79e:	4628      	mov	r0, r5
 800b7a0:	f7fe fbe8 	bl	8009f74 <_free_r>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7a8:	e00d      	b.n	800b7c6 <__sflush_r+0xae>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	47b0      	blx	r6
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	1c50      	adds	r0, r2, #1
 800b7b4:	d1c9      	bne.n	800b74a <__sflush_r+0x32>
 800b7b6:	682b      	ldr	r3, [r5, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d0c6      	beq.n	800b74a <__sflush_r+0x32>
 800b7bc:	2b1d      	cmp	r3, #29
 800b7be:	d001      	beq.n	800b7c4 <__sflush_r+0xac>
 800b7c0:	2b16      	cmp	r3, #22
 800b7c2:	d11e      	bne.n	800b802 <__sflush_r+0xea>
 800b7c4:	602f      	str	r7, [r5, #0]
 800b7c6:	2000      	movs	r0, #0
 800b7c8:	e022      	b.n	800b810 <__sflush_r+0xf8>
 800b7ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7ce:	b21b      	sxth	r3, r3
 800b7d0:	e01b      	b.n	800b80a <__sflush_r+0xf2>
 800b7d2:	690f      	ldr	r7, [r1, #16]
 800b7d4:	2f00      	cmp	r7, #0
 800b7d6:	d0f6      	beq.n	800b7c6 <__sflush_r+0xae>
 800b7d8:	0793      	lsls	r3, r2, #30
 800b7da:	680e      	ldr	r6, [r1, #0]
 800b7dc:	bf08      	it	eq
 800b7de:	694b      	ldreq	r3, [r1, #20]
 800b7e0:	600f      	str	r7, [r1, #0]
 800b7e2:	bf18      	it	ne
 800b7e4:	2300      	movne	r3, #0
 800b7e6:	eba6 0807 	sub.w	r8, r6, r7
 800b7ea:	608b      	str	r3, [r1, #8]
 800b7ec:	f1b8 0f00 	cmp.w	r8, #0
 800b7f0:	dde9      	ble.n	800b7c6 <__sflush_r+0xae>
 800b7f2:	6a21      	ldr	r1, [r4, #32]
 800b7f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b7f6:	4643      	mov	r3, r8
 800b7f8:	463a      	mov	r2, r7
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	47b0      	blx	r6
 800b7fe:	2800      	cmp	r0, #0
 800b800:	dc08      	bgt.n	800b814 <__sflush_r+0xfc>
 800b802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b80a:	81a3      	strh	r3, [r4, #12]
 800b80c:	f04f 30ff 	mov.w	r0, #4294967295
 800b810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b814:	4407      	add	r7, r0
 800b816:	eba8 0800 	sub.w	r8, r8, r0
 800b81a:	e7e7      	b.n	800b7ec <__sflush_r+0xd4>
 800b81c:	dfbffffe 	.word	0xdfbffffe

0800b820 <_fflush_r>:
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	690b      	ldr	r3, [r1, #16]
 800b824:	4605      	mov	r5, r0
 800b826:	460c      	mov	r4, r1
 800b828:	b913      	cbnz	r3, 800b830 <_fflush_r+0x10>
 800b82a:	2500      	movs	r5, #0
 800b82c:	4628      	mov	r0, r5
 800b82e:	bd38      	pop	{r3, r4, r5, pc}
 800b830:	b118      	cbz	r0, 800b83a <_fflush_r+0x1a>
 800b832:	6a03      	ldr	r3, [r0, #32]
 800b834:	b90b      	cbnz	r3, 800b83a <_fflush_r+0x1a>
 800b836:	f7fe f973 	bl	8009b20 <__sinit>
 800b83a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d0f3      	beq.n	800b82a <_fflush_r+0xa>
 800b842:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b844:	07d0      	lsls	r0, r2, #31
 800b846:	d404      	bmi.n	800b852 <_fflush_r+0x32>
 800b848:	0599      	lsls	r1, r3, #22
 800b84a:	d402      	bmi.n	800b852 <_fflush_r+0x32>
 800b84c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b84e:	f7fe fb70 	bl	8009f32 <__retarget_lock_acquire_recursive>
 800b852:	4628      	mov	r0, r5
 800b854:	4621      	mov	r1, r4
 800b856:	f7ff ff5f 	bl	800b718 <__sflush_r>
 800b85a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b85c:	07da      	lsls	r2, r3, #31
 800b85e:	4605      	mov	r5, r0
 800b860:	d4e4      	bmi.n	800b82c <_fflush_r+0xc>
 800b862:	89a3      	ldrh	r3, [r4, #12]
 800b864:	059b      	lsls	r3, r3, #22
 800b866:	d4e1      	bmi.n	800b82c <_fflush_r+0xc>
 800b868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b86a:	f7fe fb63 	bl	8009f34 <__retarget_lock_release_recursive>
 800b86e:	e7dd      	b.n	800b82c <_fflush_r+0xc>

0800b870 <__swhatbuf_r>:
 800b870:	b570      	push	{r4, r5, r6, lr}
 800b872:	460c      	mov	r4, r1
 800b874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b878:	2900      	cmp	r1, #0
 800b87a:	b096      	sub	sp, #88	@ 0x58
 800b87c:	4615      	mov	r5, r2
 800b87e:	461e      	mov	r6, r3
 800b880:	da0d      	bge.n	800b89e <__swhatbuf_r+0x2e>
 800b882:	89a3      	ldrh	r3, [r4, #12]
 800b884:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b888:	f04f 0100 	mov.w	r1, #0
 800b88c:	bf14      	ite	ne
 800b88e:	2340      	movne	r3, #64	@ 0x40
 800b890:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b894:	2000      	movs	r0, #0
 800b896:	6031      	str	r1, [r6, #0]
 800b898:	602b      	str	r3, [r5, #0]
 800b89a:	b016      	add	sp, #88	@ 0x58
 800b89c:	bd70      	pop	{r4, r5, r6, pc}
 800b89e:	466a      	mov	r2, sp
 800b8a0:	f000 f848 	bl	800b934 <_fstat_r>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	dbec      	blt.n	800b882 <__swhatbuf_r+0x12>
 800b8a8:	9901      	ldr	r1, [sp, #4]
 800b8aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b8ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b8b2:	4259      	negs	r1, r3
 800b8b4:	4159      	adcs	r1, r3
 800b8b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b8ba:	e7eb      	b.n	800b894 <__swhatbuf_r+0x24>

0800b8bc <__smakebuf_r>:
 800b8bc:	898b      	ldrh	r3, [r1, #12]
 800b8be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8c0:	079d      	lsls	r5, r3, #30
 800b8c2:	4606      	mov	r6, r0
 800b8c4:	460c      	mov	r4, r1
 800b8c6:	d507      	bpl.n	800b8d8 <__smakebuf_r+0x1c>
 800b8c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b8cc:	6023      	str	r3, [r4, #0]
 800b8ce:	6123      	str	r3, [r4, #16]
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	6163      	str	r3, [r4, #20]
 800b8d4:	b003      	add	sp, #12
 800b8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8d8:	ab01      	add	r3, sp, #4
 800b8da:	466a      	mov	r2, sp
 800b8dc:	f7ff ffc8 	bl	800b870 <__swhatbuf_r>
 800b8e0:	9f00      	ldr	r7, [sp, #0]
 800b8e2:	4605      	mov	r5, r0
 800b8e4:	4639      	mov	r1, r7
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	f7fe feea 	bl	800a6c0 <_malloc_r>
 800b8ec:	b948      	cbnz	r0, 800b902 <__smakebuf_r+0x46>
 800b8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8f2:	059a      	lsls	r2, r3, #22
 800b8f4:	d4ee      	bmi.n	800b8d4 <__smakebuf_r+0x18>
 800b8f6:	f023 0303 	bic.w	r3, r3, #3
 800b8fa:	f043 0302 	orr.w	r3, r3, #2
 800b8fe:	81a3      	strh	r3, [r4, #12]
 800b900:	e7e2      	b.n	800b8c8 <__smakebuf_r+0xc>
 800b902:	89a3      	ldrh	r3, [r4, #12]
 800b904:	6020      	str	r0, [r4, #0]
 800b906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b90a:	81a3      	strh	r3, [r4, #12]
 800b90c:	9b01      	ldr	r3, [sp, #4]
 800b90e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b912:	b15b      	cbz	r3, 800b92c <__smakebuf_r+0x70>
 800b914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b918:	4630      	mov	r0, r6
 800b91a:	f000 f81d 	bl	800b958 <_isatty_r>
 800b91e:	b128      	cbz	r0, 800b92c <__smakebuf_r+0x70>
 800b920:	89a3      	ldrh	r3, [r4, #12]
 800b922:	f023 0303 	bic.w	r3, r3, #3
 800b926:	f043 0301 	orr.w	r3, r3, #1
 800b92a:	81a3      	strh	r3, [r4, #12]
 800b92c:	89a3      	ldrh	r3, [r4, #12]
 800b92e:	431d      	orrs	r5, r3
 800b930:	81a5      	strh	r5, [r4, #12]
 800b932:	e7cf      	b.n	800b8d4 <__smakebuf_r+0x18>

0800b934 <_fstat_r>:
 800b934:	b538      	push	{r3, r4, r5, lr}
 800b936:	4d07      	ldr	r5, [pc, #28]	@ (800b954 <_fstat_r+0x20>)
 800b938:	2300      	movs	r3, #0
 800b93a:	4604      	mov	r4, r0
 800b93c:	4608      	mov	r0, r1
 800b93e:	4611      	mov	r1, r2
 800b940:	602b      	str	r3, [r5, #0]
 800b942:	f7f9 ffc9 	bl	80058d8 <_fstat>
 800b946:	1c43      	adds	r3, r0, #1
 800b948:	d102      	bne.n	800b950 <_fstat_r+0x1c>
 800b94a:	682b      	ldr	r3, [r5, #0]
 800b94c:	b103      	cbz	r3, 800b950 <_fstat_r+0x1c>
 800b94e:	6023      	str	r3, [r4, #0]
 800b950:	bd38      	pop	{r3, r4, r5, pc}
 800b952:	bf00      	nop
 800b954:	200009b0 	.word	0x200009b0

0800b958 <_isatty_r>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	4d06      	ldr	r5, [pc, #24]	@ (800b974 <_isatty_r+0x1c>)
 800b95c:	2300      	movs	r3, #0
 800b95e:	4604      	mov	r4, r0
 800b960:	4608      	mov	r0, r1
 800b962:	602b      	str	r3, [r5, #0]
 800b964:	f7f9 ffc8 	bl	80058f8 <_isatty>
 800b968:	1c43      	adds	r3, r0, #1
 800b96a:	d102      	bne.n	800b972 <_isatty_r+0x1a>
 800b96c:	682b      	ldr	r3, [r5, #0]
 800b96e:	b103      	cbz	r3, 800b972 <_isatty_r+0x1a>
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	bd38      	pop	{r3, r4, r5, pc}
 800b974:	200009b0 	.word	0x200009b0

0800b978 <_sbrk_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	4d06      	ldr	r5, [pc, #24]	@ (800b994 <_sbrk_r+0x1c>)
 800b97c:	2300      	movs	r3, #0
 800b97e:	4604      	mov	r4, r0
 800b980:	4608      	mov	r0, r1
 800b982:	602b      	str	r3, [r5, #0]
 800b984:	f7f9 ffd0 	bl	8005928 <_sbrk>
 800b988:	1c43      	adds	r3, r0, #1
 800b98a:	d102      	bne.n	800b992 <_sbrk_r+0x1a>
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	b103      	cbz	r3, 800b992 <_sbrk_r+0x1a>
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	200009b0 	.word	0x200009b0

0800b998 <__assert_func>:
 800b998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b99a:	4614      	mov	r4, r2
 800b99c:	461a      	mov	r2, r3
 800b99e:	4b09      	ldr	r3, [pc, #36]	@ (800b9c4 <__assert_func+0x2c>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	68d8      	ldr	r0, [r3, #12]
 800b9a6:	b954      	cbnz	r4, 800b9be <__assert_func+0x26>
 800b9a8:	4b07      	ldr	r3, [pc, #28]	@ (800b9c8 <__assert_func+0x30>)
 800b9aa:	461c      	mov	r4, r3
 800b9ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9b0:	9100      	str	r1, [sp, #0]
 800b9b2:	462b      	mov	r3, r5
 800b9b4:	4905      	ldr	r1, [pc, #20]	@ (800b9cc <__assert_func+0x34>)
 800b9b6:	f000 f829 	bl	800ba0c <fiprintf>
 800b9ba:	f000 f839 	bl	800ba30 <abort>
 800b9be:	4b04      	ldr	r3, [pc, #16]	@ (800b9d0 <__assert_func+0x38>)
 800b9c0:	e7f4      	b.n	800b9ac <__assert_func+0x14>
 800b9c2:	bf00      	nop
 800b9c4:	20000188 	.word	0x20000188
 800b9c8:	0800db67 	.word	0x0800db67
 800b9cc:	0800db39 	.word	0x0800db39
 800b9d0:	0800db2c 	.word	0x0800db2c

0800b9d4 <_calloc_r>:
 800b9d4:	b570      	push	{r4, r5, r6, lr}
 800b9d6:	fba1 5402 	umull	r5, r4, r1, r2
 800b9da:	b93c      	cbnz	r4, 800b9ec <_calloc_r+0x18>
 800b9dc:	4629      	mov	r1, r5
 800b9de:	f7fe fe6f 	bl	800a6c0 <_malloc_r>
 800b9e2:	4606      	mov	r6, r0
 800b9e4:	b928      	cbnz	r0, 800b9f2 <_calloc_r+0x1e>
 800b9e6:	2600      	movs	r6, #0
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	bd70      	pop	{r4, r5, r6, pc}
 800b9ec:	220c      	movs	r2, #12
 800b9ee:	6002      	str	r2, [r0, #0]
 800b9f0:	e7f9      	b.n	800b9e6 <_calloc_r+0x12>
 800b9f2:	462a      	mov	r2, r5
 800b9f4:	4621      	mov	r1, r4
 800b9f6:	f7fe fa11 	bl	8009e1c <memset>
 800b9fa:	e7f5      	b.n	800b9e8 <_calloc_r+0x14>

0800b9fc <malloc>:
 800b9fc:	4b02      	ldr	r3, [pc, #8]	@ (800ba08 <malloc+0xc>)
 800b9fe:	4601      	mov	r1, r0
 800ba00:	6818      	ldr	r0, [r3, #0]
 800ba02:	f7fe be5d 	b.w	800a6c0 <_malloc_r>
 800ba06:	bf00      	nop
 800ba08:	20000188 	.word	0x20000188

0800ba0c <fiprintf>:
 800ba0c:	b40e      	push	{r1, r2, r3}
 800ba0e:	b503      	push	{r0, r1, lr}
 800ba10:	4601      	mov	r1, r0
 800ba12:	ab03      	add	r3, sp, #12
 800ba14:	4805      	ldr	r0, [pc, #20]	@ (800ba2c <fiprintf+0x20>)
 800ba16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba1a:	6800      	ldr	r0, [r0, #0]
 800ba1c:	9301      	str	r3, [sp, #4]
 800ba1e:	f7ff fbd5 	bl	800b1cc <_vfiprintf_r>
 800ba22:	b002      	add	sp, #8
 800ba24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba28:	b003      	add	sp, #12
 800ba2a:	4770      	bx	lr
 800ba2c:	20000188 	.word	0x20000188

0800ba30 <abort>:
 800ba30:	b508      	push	{r3, lr}
 800ba32:	2006      	movs	r0, #6
 800ba34:	f000 f82c 	bl	800ba90 <raise>
 800ba38:	2001      	movs	r0, #1
 800ba3a:	f7f9 ff19 	bl	8005870 <_exit>

0800ba3e <_raise_r>:
 800ba3e:	291f      	cmp	r1, #31
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4605      	mov	r5, r0
 800ba44:	460c      	mov	r4, r1
 800ba46:	d904      	bls.n	800ba52 <_raise_r+0x14>
 800ba48:	2316      	movs	r3, #22
 800ba4a:	6003      	str	r3, [r0, #0]
 800ba4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba50:	bd38      	pop	{r3, r4, r5, pc}
 800ba52:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba54:	b112      	cbz	r2, 800ba5c <_raise_r+0x1e>
 800ba56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba5a:	b94b      	cbnz	r3, 800ba70 <_raise_r+0x32>
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	f000 f831 	bl	800bac4 <_getpid_r>
 800ba62:	4622      	mov	r2, r4
 800ba64:	4601      	mov	r1, r0
 800ba66:	4628      	mov	r0, r5
 800ba68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba6c:	f000 b818 	b.w	800baa0 <_kill_r>
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d00a      	beq.n	800ba8a <_raise_r+0x4c>
 800ba74:	1c59      	adds	r1, r3, #1
 800ba76:	d103      	bne.n	800ba80 <_raise_r+0x42>
 800ba78:	2316      	movs	r3, #22
 800ba7a:	6003      	str	r3, [r0, #0]
 800ba7c:	2001      	movs	r0, #1
 800ba7e:	e7e7      	b.n	800ba50 <_raise_r+0x12>
 800ba80:	2100      	movs	r1, #0
 800ba82:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba86:	4620      	mov	r0, r4
 800ba88:	4798      	blx	r3
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	e7e0      	b.n	800ba50 <_raise_r+0x12>
	...

0800ba90 <raise>:
 800ba90:	4b02      	ldr	r3, [pc, #8]	@ (800ba9c <raise+0xc>)
 800ba92:	4601      	mov	r1, r0
 800ba94:	6818      	ldr	r0, [r3, #0]
 800ba96:	f7ff bfd2 	b.w	800ba3e <_raise_r>
 800ba9a:	bf00      	nop
 800ba9c:	20000188 	.word	0x20000188

0800baa0 <_kill_r>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	4d07      	ldr	r5, [pc, #28]	@ (800bac0 <_kill_r+0x20>)
 800baa4:	2300      	movs	r3, #0
 800baa6:	4604      	mov	r4, r0
 800baa8:	4608      	mov	r0, r1
 800baaa:	4611      	mov	r1, r2
 800baac:	602b      	str	r3, [r5, #0]
 800baae:	f7f9 fecf 	bl	8005850 <_kill>
 800bab2:	1c43      	adds	r3, r0, #1
 800bab4:	d102      	bne.n	800babc <_kill_r+0x1c>
 800bab6:	682b      	ldr	r3, [r5, #0]
 800bab8:	b103      	cbz	r3, 800babc <_kill_r+0x1c>
 800baba:	6023      	str	r3, [r4, #0]
 800babc:	bd38      	pop	{r3, r4, r5, pc}
 800babe:	bf00      	nop
 800bac0:	200009b0 	.word	0x200009b0

0800bac4 <_getpid_r>:
 800bac4:	f7f9 bebc 	b.w	8005840 <_getpid>

0800bac8 <pow>:
 800bac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baca:	ed2d 8b02 	vpush	{d8}
 800bace:	eeb0 8a40 	vmov.f32	s16, s0
 800bad2:	eef0 8a60 	vmov.f32	s17, s1
 800bad6:	ec55 4b11 	vmov	r4, r5, d1
 800bada:	f000 f9e1 	bl	800bea0 <__ieee754_pow>
 800bade:	4622      	mov	r2, r4
 800bae0:	462b      	mov	r3, r5
 800bae2:	4620      	mov	r0, r4
 800bae4:	4629      	mov	r1, r5
 800bae6:	ec57 6b10 	vmov	r6, r7, d0
 800baea:	f7f5 f81f 	bl	8000b2c <__aeabi_dcmpun>
 800baee:	2800      	cmp	r0, #0
 800baf0:	d13b      	bne.n	800bb6a <pow+0xa2>
 800baf2:	ec51 0b18 	vmov	r0, r1, d8
 800baf6:	2200      	movs	r2, #0
 800baf8:	2300      	movs	r3, #0
 800bafa:	f7f4 ffe5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bafe:	b1b8      	cbz	r0, 800bb30 <pow+0x68>
 800bb00:	2200      	movs	r2, #0
 800bb02:	2300      	movs	r3, #0
 800bb04:	4620      	mov	r0, r4
 800bb06:	4629      	mov	r1, r5
 800bb08:	f7f4 ffde 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	d146      	bne.n	800bb9e <pow+0xd6>
 800bb10:	ec45 4b10 	vmov	d0, r4, r5
 800bb14:	f000 f8d4 	bl	800bcc0 <finite>
 800bb18:	b338      	cbz	r0, 800bb6a <pow+0xa2>
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	4620      	mov	r0, r4
 800bb20:	4629      	mov	r1, r5
 800bb22:	f7f4 ffdb 	bl	8000adc <__aeabi_dcmplt>
 800bb26:	b300      	cbz	r0, 800bb6a <pow+0xa2>
 800bb28:	f7fe f9d8 	bl	8009edc <__errno>
 800bb2c:	2322      	movs	r3, #34	@ 0x22
 800bb2e:	e01b      	b.n	800bb68 <pow+0xa0>
 800bb30:	ec47 6b10 	vmov	d0, r6, r7
 800bb34:	f000 f8c4 	bl	800bcc0 <finite>
 800bb38:	b9e0      	cbnz	r0, 800bb74 <pow+0xac>
 800bb3a:	eeb0 0a48 	vmov.f32	s0, s16
 800bb3e:	eef0 0a68 	vmov.f32	s1, s17
 800bb42:	f000 f8bd 	bl	800bcc0 <finite>
 800bb46:	b1a8      	cbz	r0, 800bb74 <pow+0xac>
 800bb48:	ec45 4b10 	vmov	d0, r4, r5
 800bb4c:	f000 f8b8 	bl	800bcc0 <finite>
 800bb50:	b180      	cbz	r0, 800bb74 <pow+0xac>
 800bb52:	4632      	mov	r2, r6
 800bb54:	463b      	mov	r3, r7
 800bb56:	4630      	mov	r0, r6
 800bb58:	4639      	mov	r1, r7
 800bb5a:	f7f4 ffe7 	bl	8000b2c <__aeabi_dcmpun>
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	d0e2      	beq.n	800bb28 <pow+0x60>
 800bb62:	f7fe f9bb 	bl	8009edc <__errno>
 800bb66:	2321      	movs	r3, #33	@ 0x21
 800bb68:	6003      	str	r3, [r0, #0]
 800bb6a:	ecbd 8b02 	vpop	{d8}
 800bb6e:	ec47 6b10 	vmov	d0, r6, r7
 800bb72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb74:	2200      	movs	r2, #0
 800bb76:	2300      	movs	r3, #0
 800bb78:	4630      	mov	r0, r6
 800bb7a:	4639      	mov	r1, r7
 800bb7c:	f7f4 ffa4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d0f2      	beq.n	800bb6a <pow+0xa2>
 800bb84:	eeb0 0a48 	vmov.f32	s0, s16
 800bb88:	eef0 0a68 	vmov.f32	s1, s17
 800bb8c:	f000 f898 	bl	800bcc0 <finite>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d0ea      	beq.n	800bb6a <pow+0xa2>
 800bb94:	ec45 4b10 	vmov	d0, r4, r5
 800bb98:	f000 f892 	bl	800bcc0 <finite>
 800bb9c:	e7c3      	b.n	800bb26 <pow+0x5e>
 800bb9e:	4f01      	ldr	r7, [pc, #4]	@ (800bba4 <pow+0xdc>)
 800bba0:	2600      	movs	r6, #0
 800bba2:	e7e2      	b.n	800bb6a <pow+0xa2>
 800bba4:	3ff00000 	.word	0x3ff00000

0800bba8 <asinf>:
 800bba8:	b508      	push	{r3, lr}
 800bbaa:	ed2d 8b02 	vpush	{d8}
 800bbae:	eeb0 8a40 	vmov.f32	s16, s0
 800bbb2:	f000 fec1 	bl	800c938 <__ieee754_asinf>
 800bbb6:	eeb4 8a48 	vcmp.f32	s16, s16
 800bbba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbbe:	eef0 8a40 	vmov.f32	s17, s0
 800bbc2:	d615      	bvs.n	800bbf0 <asinf+0x48>
 800bbc4:	eeb0 0a48 	vmov.f32	s0, s16
 800bbc8:	f000 f873 	bl	800bcb2 <fabsf>
 800bbcc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bbd0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bbd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd8:	dd0a      	ble.n	800bbf0 <asinf+0x48>
 800bbda:	f7fe f97f 	bl	8009edc <__errno>
 800bbde:	ecbd 8b02 	vpop	{d8}
 800bbe2:	2321      	movs	r3, #33	@ 0x21
 800bbe4:	6003      	str	r3, [r0, #0]
 800bbe6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bbea:	4804      	ldr	r0, [pc, #16]	@ (800bbfc <asinf+0x54>)
 800bbec:	f7fe b9bc 	b.w	8009f68 <nanf>
 800bbf0:	eeb0 0a68 	vmov.f32	s0, s17
 800bbf4:	ecbd 8b02 	vpop	{d8}
 800bbf8:	bd08      	pop	{r3, pc}
 800bbfa:	bf00      	nop
 800bbfc:	0800db67 	.word	0x0800db67

0800bc00 <atan2f>:
 800bc00:	f000 bf80 	b.w	800cb04 <__ieee754_atan2f>

0800bc04 <powf>:
 800bc04:	b508      	push	{r3, lr}
 800bc06:	ed2d 8b04 	vpush	{d8-d9}
 800bc0a:	eeb0 8a60 	vmov.f32	s16, s1
 800bc0e:	eeb0 9a40 	vmov.f32	s18, s0
 800bc12:	f001 f817 	bl	800cc44 <__ieee754_powf>
 800bc16:	eeb4 8a48 	vcmp.f32	s16, s16
 800bc1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc1e:	eef0 8a40 	vmov.f32	s17, s0
 800bc22:	d63e      	bvs.n	800bca2 <powf+0x9e>
 800bc24:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800bc28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc2c:	d112      	bne.n	800bc54 <powf+0x50>
 800bc2e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc36:	d039      	beq.n	800bcac <powf+0xa8>
 800bc38:	eeb0 0a48 	vmov.f32	s0, s16
 800bc3c:	f000 f84b 	bl	800bcd6 <finitef>
 800bc40:	b378      	cbz	r0, 800bca2 <powf+0x9e>
 800bc42:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc4a:	d52a      	bpl.n	800bca2 <powf+0x9e>
 800bc4c:	f7fe f946 	bl	8009edc <__errno>
 800bc50:	2322      	movs	r3, #34	@ 0x22
 800bc52:	e014      	b.n	800bc7e <powf+0x7a>
 800bc54:	f000 f83f 	bl	800bcd6 <finitef>
 800bc58:	b998      	cbnz	r0, 800bc82 <powf+0x7e>
 800bc5a:	eeb0 0a49 	vmov.f32	s0, s18
 800bc5e:	f000 f83a 	bl	800bcd6 <finitef>
 800bc62:	b170      	cbz	r0, 800bc82 <powf+0x7e>
 800bc64:	eeb0 0a48 	vmov.f32	s0, s16
 800bc68:	f000 f835 	bl	800bcd6 <finitef>
 800bc6c:	b148      	cbz	r0, 800bc82 <powf+0x7e>
 800bc6e:	eef4 8a68 	vcmp.f32	s17, s17
 800bc72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc76:	d7e9      	bvc.n	800bc4c <powf+0x48>
 800bc78:	f7fe f930 	bl	8009edc <__errno>
 800bc7c:	2321      	movs	r3, #33	@ 0x21
 800bc7e:	6003      	str	r3, [r0, #0]
 800bc80:	e00f      	b.n	800bca2 <powf+0x9e>
 800bc82:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc8a:	d10a      	bne.n	800bca2 <powf+0x9e>
 800bc8c:	eeb0 0a49 	vmov.f32	s0, s18
 800bc90:	f000 f821 	bl	800bcd6 <finitef>
 800bc94:	b128      	cbz	r0, 800bca2 <powf+0x9e>
 800bc96:	eeb0 0a48 	vmov.f32	s0, s16
 800bc9a:	f000 f81c 	bl	800bcd6 <finitef>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	d1d4      	bne.n	800bc4c <powf+0x48>
 800bca2:	eeb0 0a68 	vmov.f32	s0, s17
 800bca6:	ecbd 8b04 	vpop	{d8-d9}
 800bcaa:	bd08      	pop	{r3, pc}
 800bcac:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800bcb0:	e7f7      	b.n	800bca2 <powf+0x9e>

0800bcb2 <fabsf>:
 800bcb2:	ee10 3a10 	vmov	r3, s0
 800bcb6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bcba:	ee00 3a10 	vmov	s0, r3
 800bcbe:	4770      	bx	lr

0800bcc0 <finite>:
 800bcc0:	b082      	sub	sp, #8
 800bcc2:	ed8d 0b00 	vstr	d0, [sp]
 800bcc6:	9801      	ldr	r0, [sp, #4]
 800bcc8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800bccc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800bcd0:	0fc0      	lsrs	r0, r0, #31
 800bcd2:	b002      	add	sp, #8
 800bcd4:	4770      	bx	lr

0800bcd6 <finitef>:
 800bcd6:	ee10 3a10 	vmov	r3, s0
 800bcda:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800bcde:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800bce2:	bfac      	ite	ge
 800bce4:	2000      	movge	r0, #0
 800bce6:	2001      	movlt	r0, #1
 800bce8:	4770      	bx	lr
	...

0800bcec <__ieee754_sqrt>:
 800bcec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf0:	4a68      	ldr	r2, [pc, #416]	@ (800be94 <__ieee754_sqrt+0x1a8>)
 800bcf2:	ec55 4b10 	vmov	r4, r5, d0
 800bcf6:	43aa      	bics	r2, r5
 800bcf8:	462b      	mov	r3, r5
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	d110      	bne.n	800bd20 <__ieee754_sqrt+0x34>
 800bcfe:	4622      	mov	r2, r4
 800bd00:	4620      	mov	r0, r4
 800bd02:	4629      	mov	r1, r5
 800bd04:	f7f4 fc78 	bl	80005f8 <__aeabi_dmul>
 800bd08:	4602      	mov	r2, r0
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	4629      	mov	r1, r5
 800bd10:	f7f4 fabc 	bl	800028c <__adddf3>
 800bd14:	4604      	mov	r4, r0
 800bd16:	460d      	mov	r5, r1
 800bd18:	ec45 4b10 	vmov	d0, r4, r5
 800bd1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd20:	2d00      	cmp	r5, #0
 800bd22:	dc0e      	bgt.n	800bd42 <__ieee754_sqrt+0x56>
 800bd24:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bd28:	4322      	orrs	r2, r4
 800bd2a:	d0f5      	beq.n	800bd18 <__ieee754_sqrt+0x2c>
 800bd2c:	b19d      	cbz	r5, 800bd56 <__ieee754_sqrt+0x6a>
 800bd2e:	4622      	mov	r2, r4
 800bd30:	4620      	mov	r0, r4
 800bd32:	4629      	mov	r1, r5
 800bd34:	f7f4 faa8 	bl	8000288 <__aeabi_dsub>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	f7f4 fd86 	bl	800084c <__aeabi_ddiv>
 800bd40:	e7e8      	b.n	800bd14 <__ieee754_sqrt+0x28>
 800bd42:	152a      	asrs	r2, r5, #20
 800bd44:	d115      	bne.n	800bd72 <__ieee754_sqrt+0x86>
 800bd46:	2000      	movs	r0, #0
 800bd48:	e009      	b.n	800bd5e <__ieee754_sqrt+0x72>
 800bd4a:	0acb      	lsrs	r3, r1, #11
 800bd4c:	3a15      	subs	r2, #21
 800bd4e:	0549      	lsls	r1, r1, #21
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d0fa      	beq.n	800bd4a <__ieee754_sqrt+0x5e>
 800bd54:	e7f7      	b.n	800bd46 <__ieee754_sqrt+0x5a>
 800bd56:	462a      	mov	r2, r5
 800bd58:	e7fa      	b.n	800bd50 <__ieee754_sqrt+0x64>
 800bd5a:	005b      	lsls	r3, r3, #1
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	02dc      	lsls	r4, r3, #11
 800bd60:	d5fb      	bpl.n	800bd5a <__ieee754_sqrt+0x6e>
 800bd62:	1e44      	subs	r4, r0, #1
 800bd64:	1b12      	subs	r2, r2, r4
 800bd66:	f1c0 0420 	rsb	r4, r0, #32
 800bd6a:	fa21 f404 	lsr.w	r4, r1, r4
 800bd6e:	4323      	orrs	r3, r4
 800bd70:	4081      	lsls	r1, r0
 800bd72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd76:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800bd7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bd7e:	07d2      	lsls	r2, r2, #31
 800bd80:	bf5c      	itt	pl
 800bd82:	005b      	lslpl	r3, r3, #1
 800bd84:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bd88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bd8c:	bf58      	it	pl
 800bd8e:	0049      	lslpl	r1, r1, #1
 800bd90:	2600      	movs	r6, #0
 800bd92:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bd96:	106d      	asrs	r5, r5, #1
 800bd98:	0049      	lsls	r1, r1, #1
 800bd9a:	2016      	movs	r0, #22
 800bd9c:	4632      	mov	r2, r6
 800bd9e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bda2:	1917      	adds	r7, r2, r4
 800bda4:	429f      	cmp	r7, r3
 800bda6:	bfde      	ittt	le
 800bda8:	193a      	addle	r2, r7, r4
 800bdaa:	1bdb      	suble	r3, r3, r7
 800bdac:	1936      	addle	r6, r6, r4
 800bdae:	0fcf      	lsrs	r7, r1, #31
 800bdb0:	3801      	subs	r0, #1
 800bdb2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800bdb6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bdba:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bdbe:	d1f0      	bne.n	800bda2 <__ieee754_sqrt+0xb6>
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	2720      	movs	r7, #32
 800bdc4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	eb00 0e0c 	add.w	lr, r0, ip
 800bdce:	db02      	blt.n	800bdd6 <__ieee754_sqrt+0xea>
 800bdd0:	d113      	bne.n	800bdfa <__ieee754_sqrt+0x10e>
 800bdd2:	458e      	cmp	lr, r1
 800bdd4:	d811      	bhi.n	800bdfa <__ieee754_sqrt+0x10e>
 800bdd6:	f1be 0f00 	cmp.w	lr, #0
 800bdda:	eb0e 000c 	add.w	r0, lr, ip
 800bdde:	da42      	bge.n	800be66 <__ieee754_sqrt+0x17a>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	db40      	blt.n	800be66 <__ieee754_sqrt+0x17a>
 800bde4:	f102 0801 	add.w	r8, r2, #1
 800bde8:	1a9b      	subs	r3, r3, r2
 800bdea:	458e      	cmp	lr, r1
 800bdec:	bf88      	it	hi
 800bdee:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bdf2:	eba1 010e 	sub.w	r1, r1, lr
 800bdf6:	4464      	add	r4, ip
 800bdf8:	4642      	mov	r2, r8
 800bdfa:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bdfe:	3f01      	subs	r7, #1
 800be00:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800be04:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800be08:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800be0c:	d1dc      	bne.n	800bdc8 <__ieee754_sqrt+0xdc>
 800be0e:	4319      	orrs	r1, r3
 800be10:	d01b      	beq.n	800be4a <__ieee754_sqrt+0x15e>
 800be12:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800be98 <__ieee754_sqrt+0x1ac>
 800be16:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800be9c <__ieee754_sqrt+0x1b0>
 800be1a:	e9da 0100 	ldrd	r0, r1, [sl]
 800be1e:	e9db 2300 	ldrd	r2, r3, [fp]
 800be22:	f7f4 fa31 	bl	8000288 <__aeabi_dsub>
 800be26:	e9da 8900 	ldrd	r8, r9, [sl]
 800be2a:	4602      	mov	r2, r0
 800be2c:	460b      	mov	r3, r1
 800be2e:	4640      	mov	r0, r8
 800be30:	4649      	mov	r1, r9
 800be32:	f7f4 fe5d 	bl	8000af0 <__aeabi_dcmple>
 800be36:	b140      	cbz	r0, 800be4a <__ieee754_sqrt+0x15e>
 800be38:	f1b4 3fff 	cmp.w	r4, #4294967295
 800be3c:	e9da 0100 	ldrd	r0, r1, [sl]
 800be40:	e9db 2300 	ldrd	r2, r3, [fp]
 800be44:	d111      	bne.n	800be6a <__ieee754_sqrt+0x17e>
 800be46:	3601      	adds	r6, #1
 800be48:	463c      	mov	r4, r7
 800be4a:	1072      	asrs	r2, r6, #1
 800be4c:	0863      	lsrs	r3, r4, #1
 800be4e:	07f1      	lsls	r1, r6, #31
 800be50:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800be54:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800be58:	bf48      	it	mi
 800be5a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800be5e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800be62:	4618      	mov	r0, r3
 800be64:	e756      	b.n	800bd14 <__ieee754_sqrt+0x28>
 800be66:	4690      	mov	r8, r2
 800be68:	e7be      	b.n	800bde8 <__ieee754_sqrt+0xfc>
 800be6a:	f7f4 fa0f 	bl	800028c <__adddf3>
 800be6e:	e9da 8900 	ldrd	r8, r9, [sl]
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	4640      	mov	r0, r8
 800be78:	4649      	mov	r1, r9
 800be7a:	f7f4 fe2f 	bl	8000adc <__aeabi_dcmplt>
 800be7e:	b120      	cbz	r0, 800be8a <__ieee754_sqrt+0x19e>
 800be80:	1ca0      	adds	r0, r4, #2
 800be82:	bf08      	it	eq
 800be84:	3601      	addeq	r6, #1
 800be86:	3402      	adds	r4, #2
 800be88:	e7df      	b.n	800be4a <__ieee754_sqrt+0x15e>
 800be8a:	1c63      	adds	r3, r4, #1
 800be8c:	f023 0401 	bic.w	r4, r3, #1
 800be90:	e7db      	b.n	800be4a <__ieee754_sqrt+0x15e>
 800be92:	bf00      	nop
 800be94:	7ff00000 	.word	0x7ff00000
 800be98:	200001e0 	.word	0x200001e0
 800be9c:	200001d8 	.word	0x200001d8

0800bea0 <__ieee754_pow>:
 800bea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea4:	b091      	sub	sp, #68	@ 0x44
 800bea6:	ed8d 1b00 	vstr	d1, [sp]
 800beaa:	e9dd 1900 	ldrd	r1, r9, [sp]
 800beae:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800beb2:	ea5a 0001 	orrs.w	r0, sl, r1
 800beb6:	ec57 6b10 	vmov	r6, r7, d0
 800beba:	d113      	bne.n	800bee4 <__ieee754_pow+0x44>
 800bebc:	19b3      	adds	r3, r6, r6
 800bebe:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800bec2:	4152      	adcs	r2, r2
 800bec4:	4298      	cmp	r0, r3
 800bec6:	4b98      	ldr	r3, [pc, #608]	@ (800c128 <__ieee754_pow+0x288>)
 800bec8:	4193      	sbcs	r3, r2
 800beca:	f080 84ea 	bcs.w	800c8a2 <__ieee754_pow+0xa02>
 800bece:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bed2:	4630      	mov	r0, r6
 800bed4:	4639      	mov	r1, r7
 800bed6:	f7f4 f9d9 	bl	800028c <__adddf3>
 800beda:	ec41 0b10 	vmov	d0, r0, r1
 800bede:	b011      	add	sp, #68	@ 0x44
 800bee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee4:	4a91      	ldr	r2, [pc, #580]	@ (800c12c <__ieee754_pow+0x28c>)
 800bee6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800beea:	4590      	cmp	r8, r2
 800beec:	463d      	mov	r5, r7
 800beee:	4633      	mov	r3, r6
 800bef0:	d806      	bhi.n	800bf00 <__ieee754_pow+0x60>
 800bef2:	d101      	bne.n	800bef8 <__ieee754_pow+0x58>
 800bef4:	2e00      	cmp	r6, #0
 800bef6:	d1ea      	bne.n	800bece <__ieee754_pow+0x2e>
 800bef8:	4592      	cmp	sl, r2
 800befa:	d801      	bhi.n	800bf00 <__ieee754_pow+0x60>
 800befc:	d10e      	bne.n	800bf1c <__ieee754_pow+0x7c>
 800befe:	b169      	cbz	r1, 800bf1c <__ieee754_pow+0x7c>
 800bf00:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800bf04:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800bf08:	431d      	orrs	r5, r3
 800bf0a:	d1e0      	bne.n	800bece <__ieee754_pow+0x2e>
 800bf0c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bf10:	18db      	adds	r3, r3, r3
 800bf12:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800bf16:	4152      	adcs	r2, r2
 800bf18:	429d      	cmp	r5, r3
 800bf1a:	e7d4      	b.n	800bec6 <__ieee754_pow+0x26>
 800bf1c:	2d00      	cmp	r5, #0
 800bf1e:	46c3      	mov	fp, r8
 800bf20:	da3a      	bge.n	800bf98 <__ieee754_pow+0xf8>
 800bf22:	4a83      	ldr	r2, [pc, #524]	@ (800c130 <__ieee754_pow+0x290>)
 800bf24:	4592      	cmp	sl, r2
 800bf26:	d84d      	bhi.n	800bfc4 <__ieee754_pow+0x124>
 800bf28:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800bf2c:	4592      	cmp	sl, r2
 800bf2e:	f240 84c7 	bls.w	800c8c0 <__ieee754_pow+0xa20>
 800bf32:	ea4f 522a 	mov.w	r2, sl, asr #20
 800bf36:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bf3a:	2a14      	cmp	r2, #20
 800bf3c:	dd0f      	ble.n	800bf5e <__ieee754_pow+0xbe>
 800bf3e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800bf42:	fa21 f402 	lsr.w	r4, r1, r2
 800bf46:	fa04 f202 	lsl.w	r2, r4, r2
 800bf4a:	428a      	cmp	r2, r1
 800bf4c:	f040 84b8 	bne.w	800c8c0 <__ieee754_pow+0xa20>
 800bf50:	f004 0401 	and.w	r4, r4, #1
 800bf54:	f1c4 0402 	rsb	r4, r4, #2
 800bf58:	2900      	cmp	r1, #0
 800bf5a:	d158      	bne.n	800c00e <__ieee754_pow+0x16e>
 800bf5c:	e00e      	b.n	800bf7c <__ieee754_pow+0xdc>
 800bf5e:	2900      	cmp	r1, #0
 800bf60:	d154      	bne.n	800c00c <__ieee754_pow+0x16c>
 800bf62:	f1c2 0214 	rsb	r2, r2, #20
 800bf66:	fa4a f402 	asr.w	r4, sl, r2
 800bf6a:	fa04 f202 	lsl.w	r2, r4, r2
 800bf6e:	4552      	cmp	r2, sl
 800bf70:	f040 84a3 	bne.w	800c8ba <__ieee754_pow+0xa1a>
 800bf74:	f004 0401 	and.w	r4, r4, #1
 800bf78:	f1c4 0402 	rsb	r4, r4, #2
 800bf7c:	4a6d      	ldr	r2, [pc, #436]	@ (800c134 <__ieee754_pow+0x294>)
 800bf7e:	4592      	cmp	sl, r2
 800bf80:	d12e      	bne.n	800bfe0 <__ieee754_pow+0x140>
 800bf82:	f1b9 0f00 	cmp.w	r9, #0
 800bf86:	f280 8494 	bge.w	800c8b2 <__ieee754_pow+0xa12>
 800bf8a:	496a      	ldr	r1, [pc, #424]	@ (800c134 <__ieee754_pow+0x294>)
 800bf8c:	4632      	mov	r2, r6
 800bf8e:	463b      	mov	r3, r7
 800bf90:	2000      	movs	r0, #0
 800bf92:	f7f4 fc5b 	bl	800084c <__aeabi_ddiv>
 800bf96:	e7a0      	b.n	800beda <__ieee754_pow+0x3a>
 800bf98:	2400      	movs	r4, #0
 800bf9a:	bbc1      	cbnz	r1, 800c00e <__ieee754_pow+0x16e>
 800bf9c:	4a63      	ldr	r2, [pc, #396]	@ (800c12c <__ieee754_pow+0x28c>)
 800bf9e:	4592      	cmp	sl, r2
 800bfa0:	d1ec      	bne.n	800bf7c <__ieee754_pow+0xdc>
 800bfa2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800bfa6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800bfaa:	431a      	orrs	r2, r3
 800bfac:	f000 8479 	beq.w	800c8a2 <__ieee754_pow+0xa02>
 800bfb0:	4b61      	ldr	r3, [pc, #388]	@ (800c138 <__ieee754_pow+0x298>)
 800bfb2:	4598      	cmp	r8, r3
 800bfb4:	d908      	bls.n	800bfc8 <__ieee754_pow+0x128>
 800bfb6:	f1b9 0f00 	cmp.w	r9, #0
 800bfba:	f2c0 8476 	blt.w	800c8aa <__ieee754_pow+0xa0a>
 800bfbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfc2:	e78a      	b.n	800beda <__ieee754_pow+0x3a>
 800bfc4:	2402      	movs	r4, #2
 800bfc6:	e7e8      	b.n	800bf9a <__ieee754_pow+0xfa>
 800bfc8:	f1b9 0f00 	cmp.w	r9, #0
 800bfcc:	f04f 0000 	mov.w	r0, #0
 800bfd0:	f04f 0100 	mov.w	r1, #0
 800bfd4:	da81      	bge.n	800beda <__ieee754_pow+0x3a>
 800bfd6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bfda:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bfde:	e77c      	b.n	800beda <__ieee754_pow+0x3a>
 800bfe0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800bfe4:	d106      	bne.n	800bff4 <__ieee754_pow+0x154>
 800bfe6:	4632      	mov	r2, r6
 800bfe8:	463b      	mov	r3, r7
 800bfea:	4630      	mov	r0, r6
 800bfec:	4639      	mov	r1, r7
 800bfee:	f7f4 fb03 	bl	80005f8 <__aeabi_dmul>
 800bff2:	e772      	b.n	800beda <__ieee754_pow+0x3a>
 800bff4:	4a51      	ldr	r2, [pc, #324]	@ (800c13c <__ieee754_pow+0x29c>)
 800bff6:	4591      	cmp	r9, r2
 800bff8:	d109      	bne.n	800c00e <__ieee754_pow+0x16e>
 800bffa:	2d00      	cmp	r5, #0
 800bffc:	db07      	blt.n	800c00e <__ieee754_pow+0x16e>
 800bffe:	ec47 6b10 	vmov	d0, r6, r7
 800c002:	b011      	add	sp, #68	@ 0x44
 800c004:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c008:	f7ff be70 	b.w	800bcec <__ieee754_sqrt>
 800c00c:	2400      	movs	r4, #0
 800c00e:	ec47 6b10 	vmov	d0, r6, r7
 800c012:	9302      	str	r3, [sp, #8]
 800c014:	f000 fc88 	bl	800c928 <fabs>
 800c018:	9b02      	ldr	r3, [sp, #8]
 800c01a:	ec51 0b10 	vmov	r0, r1, d0
 800c01e:	bb53      	cbnz	r3, 800c076 <__ieee754_pow+0x1d6>
 800c020:	4b44      	ldr	r3, [pc, #272]	@ (800c134 <__ieee754_pow+0x294>)
 800c022:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800c026:	429a      	cmp	r2, r3
 800c028:	d002      	beq.n	800c030 <__ieee754_pow+0x190>
 800c02a:	f1b8 0f00 	cmp.w	r8, #0
 800c02e:	d122      	bne.n	800c076 <__ieee754_pow+0x1d6>
 800c030:	f1b9 0f00 	cmp.w	r9, #0
 800c034:	da05      	bge.n	800c042 <__ieee754_pow+0x1a2>
 800c036:	4602      	mov	r2, r0
 800c038:	460b      	mov	r3, r1
 800c03a:	2000      	movs	r0, #0
 800c03c:	493d      	ldr	r1, [pc, #244]	@ (800c134 <__ieee754_pow+0x294>)
 800c03e:	f7f4 fc05 	bl	800084c <__aeabi_ddiv>
 800c042:	2d00      	cmp	r5, #0
 800c044:	f6bf af49 	bge.w	800beda <__ieee754_pow+0x3a>
 800c048:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800c04c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800c050:	ea58 0804 	orrs.w	r8, r8, r4
 800c054:	d108      	bne.n	800c068 <__ieee754_pow+0x1c8>
 800c056:	4602      	mov	r2, r0
 800c058:	460b      	mov	r3, r1
 800c05a:	4610      	mov	r0, r2
 800c05c:	4619      	mov	r1, r3
 800c05e:	f7f4 f913 	bl	8000288 <__aeabi_dsub>
 800c062:	4602      	mov	r2, r0
 800c064:	460b      	mov	r3, r1
 800c066:	e794      	b.n	800bf92 <__ieee754_pow+0xf2>
 800c068:	2c01      	cmp	r4, #1
 800c06a:	f47f af36 	bne.w	800beda <__ieee754_pow+0x3a>
 800c06e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c072:	4619      	mov	r1, r3
 800c074:	e731      	b.n	800beda <__ieee754_pow+0x3a>
 800c076:	0feb      	lsrs	r3, r5, #31
 800c078:	3b01      	subs	r3, #1
 800c07a:	ea53 0204 	orrs.w	r2, r3, r4
 800c07e:	d102      	bne.n	800c086 <__ieee754_pow+0x1e6>
 800c080:	4632      	mov	r2, r6
 800c082:	463b      	mov	r3, r7
 800c084:	e7e9      	b.n	800c05a <__ieee754_pow+0x1ba>
 800c086:	3c01      	subs	r4, #1
 800c088:	431c      	orrs	r4, r3
 800c08a:	d016      	beq.n	800c0ba <__ieee754_pow+0x21a>
 800c08c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800c118 <__ieee754_pow+0x278>
 800c090:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800c094:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c098:	f240 8112 	bls.w	800c2c0 <__ieee754_pow+0x420>
 800c09c:	4b28      	ldr	r3, [pc, #160]	@ (800c140 <__ieee754_pow+0x2a0>)
 800c09e:	459a      	cmp	sl, r3
 800c0a0:	4b25      	ldr	r3, [pc, #148]	@ (800c138 <__ieee754_pow+0x298>)
 800c0a2:	d916      	bls.n	800c0d2 <__ieee754_pow+0x232>
 800c0a4:	4598      	cmp	r8, r3
 800c0a6:	d80b      	bhi.n	800c0c0 <__ieee754_pow+0x220>
 800c0a8:	f1b9 0f00 	cmp.w	r9, #0
 800c0ac:	da0b      	bge.n	800c0c6 <__ieee754_pow+0x226>
 800c0ae:	2000      	movs	r0, #0
 800c0b0:	b011      	add	sp, #68	@ 0x44
 800c0b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b6:	f001 ba1f 	b.w	800d4f8 <__math_oflow>
 800c0ba:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800c120 <__ieee754_pow+0x280>
 800c0be:	e7e7      	b.n	800c090 <__ieee754_pow+0x1f0>
 800c0c0:	f1b9 0f00 	cmp.w	r9, #0
 800c0c4:	dcf3      	bgt.n	800c0ae <__ieee754_pow+0x20e>
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	b011      	add	sp, #68	@ 0x44
 800c0ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ce:	f001 ba0b 	b.w	800d4e8 <__math_uflow>
 800c0d2:	4598      	cmp	r8, r3
 800c0d4:	d20c      	bcs.n	800c0f0 <__ieee754_pow+0x250>
 800c0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	2300      	movs	r3, #0
 800c0de:	f7f4 fcfd 	bl	8000adc <__aeabi_dcmplt>
 800c0e2:	3800      	subs	r0, #0
 800c0e4:	bf18      	it	ne
 800c0e6:	2001      	movne	r0, #1
 800c0e8:	f1b9 0f00 	cmp.w	r9, #0
 800c0ec:	daec      	bge.n	800c0c8 <__ieee754_pow+0x228>
 800c0ee:	e7df      	b.n	800c0b0 <__ieee754_pow+0x210>
 800c0f0:	4b10      	ldr	r3, [pc, #64]	@ (800c134 <__ieee754_pow+0x294>)
 800c0f2:	4598      	cmp	r8, r3
 800c0f4:	f04f 0200 	mov.w	r2, #0
 800c0f8:	d924      	bls.n	800c144 <__ieee754_pow+0x2a4>
 800c0fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0fe:	2300      	movs	r3, #0
 800c100:	f7f4 fcec 	bl	8000adc <__aeabi_dcmplt>
 800c104:	3800      	subs	r0, #0
 800c106:	bf18      	it	ne
 800c108:	2001      	movne	r0, #1
 800c10a:	f1b9 0f00 	cmp.w	r9, #0
 800c10e:	dccf      	bgt.n	800c0b0 <__ieee754_pow+0x210>
 800c110:	e7da      	b.n	800c0c8 <__ieee754_pow+0x228>
 800c112:	bf00      	nop
 800c114:	f3af 8000 	nop.w
 800c118:	00000000 	.word	0x00000000
 800c11c:	3ff00000 	.word	0x3ff00000
 800c120:	00000000 	.word	0x00000000
 800c124:	bff00000 	.word	0xbff00000
 800c128:	fff00000 	.word	0xfff00000
 800c12c:	7ff00000 	.word	0x7ff00000
 800c130:	433fffff 	.word	0x433fffff
 800c134:	3ff00000 	.word	0x3ff00000
 800c138:	3fefffff 	.word	0x3fefffff
 800c13c:	3fe00000 	.word	0x3fe00000
 800c140:	43f00000 	.word	0x43f00000
 800c144:	4b5a      	ldr	r3, [pc, #360]	@ (800c2b0 <__ieee754_pow+0x410>)
 800c146:	f7f4 f89f 	bl	8000288 <__aeabi_dsub>
 800c14a:	a351      	add	r3, pc, #324	@ (adr r3, 800c290 <__ieee754_pow+0x3f0>)
 800c14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c150:	4604      	mov	r4, r0
 800c152:	460d      	mov	r5, r1
 800c154:	f7f4 fa50 	bl	80005f8 <__aeabi_dmul>
 800c158:	a34f      	add	r3, pc, #316	@ (adr r3, 800c298 <__ieee754_pow+0x3f8>)
 800c15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15e:	4606      	mov	r6, r0
 800c160:	460f      	mov	r7, r1
 800c162:	4620      	mov	r0, r4
 800c164:	4629      	mov	r1, r5
 800c166:	f7f4 fa47 	bl	80005f8 <__aeabi_dmul>
 800c16a:	4b52      	ldr	r3, [pc, #328]	@ (800c2b4 <__ieee754_pow+0x414>)
 800c16c:	4682      	mov	sl, r0
 800c16e:	468b      	mov	fp, r1
 800c170:	2200      	movs	r2, #0
 800c172:	4620      	mov	r0, r4
 800c174:	4629      	mov	r1, r5
 800c176:	f7f4 fa3f 	bl	80005f8 <__aeabi_dmul>
 800c17a:	4602      	mov	r2, r0
 800c17c:	460b      	mov	r3, r1
 800c17e:	a148      	add	r1, pc, #288	@ (adr r1, 800c2a0 <__ieee754_pow+0x400>)
 800c180:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c184:	f7f4 f880 	bl	8000288 <__aeabi_dsub>
 800c188:	4622      	mov	r2, r4
 800c18a:	462b      	mov	r3, r5
 800c18c:	f7f4 fa34 	bl	80005f8 <__aeabi_dmul>
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	2000      	movs	r0, #0
 800c196:	4948      	ldr	r1, [pc, #288]	@ (800c2b8 <__ieee754_pow+0x418>)
 800c198:	f7f4 f876 	bl	8000288 <__aeabi_dsub>
 800c19c:	4622      	mov	r2, r4
 800c19e:	4680      	mov	r8, r0
 800c1a0:	4689      	mov	r9, r1
 800c1a2:	462b      	mov	r3, r5
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	f7f4 fa26 	bl	80005f8 <__aeabi_dmul>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	4640      	mov	r0, r8
 800c1b2:	4649      	mov	r1, r9
 800c1b4:	f7f4 fa20 	bl	80005f8 <__aeabi_dmul>
 800c1b8:	a33b      	add	r3, pc, #236	@ (adr r3, 800c2a8 <__ieee754_pow+0x408>)
 800c1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1be:	f7f4 fa1b 	bl	80005f8 <__aeabi_dmul>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	4650      	mov	r0, sl
 800c1c8:	4659      	mov	r1, fp
 800c1ca:	f7f4 f85d 	bl	8000288 <__aeabi_dsub>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	4680      	mov	r8, r0
 800c1d4:	4689      	mov	r9, r1
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	4639      	mov	r1, r7
 800c1da:	f7f4 f857 	bl	800028c <__adddf3>
 800c1de:	2400      	movs	r4, #0
 800c1e0:	4632      	mov	r2, r6
 800c1e2:	463b      	mov	r3, r7
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	460d      	mov	r5, r1
 800c1e8:	f7f4 f84e 	bl	8000288 <__aeabi_dsub>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	4640      	mov	r0, r8
 800c1f2:	4649      	mov	r1, r9
 800c1f4:	f7f4 f848 	bl	8000288 <__aeabi_dsub>
 800c1f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c200:	2300      	movs	r3, #0
 800c202:	9304      	str	r3, [sp, #16]
 800c204:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c208:	4606      	mov	r6, r0
 800c20a:	460f      	mov	r7, r1
 800c20c:	4652      	mov	r2, sl
 800c20e:	465b      	mov	r3, fp
 800c210:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c214:	f7f4 f838 	bl	8000288 <__aeabi_dsub>
 800c218:	4622      	mov	r2, r4
 800c21a:	462b      	mov	r3, r5
 800c21c:	f7f4 f9ec 	bl	80005f8 <__aeabi_dmul>
 800c220:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c224:	4680      	mov	r8, r0
 800c226:	4689      	mov	r9, r1
 800c228:	4630      	mov	r0, r6
 800c22a:	4639      	mov	r1, r7
 800c22c:	f7f4 f9e4 	bl	80005f8 <__aeabi_dmul>
 800c230:	4602      	mov	r2, r0
 800c232:	460b      	mov	r3, r1
 800c234:	4640      	mov	r0, r8
 800c236:	4649      	mov	r1, r9
 800c238:	f7f4 f828 	bl	800028c <__adddf3>
 800c23c:	4652      	mov	r2, sl
 800c23e:	465b      	mov	r3, fp
 800c240:	4606      	mov	r6, r0
 800c242:	460f      	mov	r7, r1
 800c244:	4620      	mov	r0, r4
 800c246:	4629      	mov	r1, r5
 800c248:	f7f4 f9d6 	bl	80005f8 <__aeabi_dmul>
 800c24c:	460b      	mov	r3, r1
 800c24e:	4602      	mov	r2, r0
 800c250:	4680      	mov	r8, r0
 800c252:	4689      	mov	r9, r1
 800c254:	4630      	mov	r0, r6
 800c256:	4639      	mov	r1, r7
 800c258:	f7f4 f818 	bl	800028c <__adddf3>
 800c25c:	4b17      	ldr	r3, [pc, #92]	@ (800c2bc <__ieee754_pow+0x41c>)
 800c25e:	4299      	cmp	r1, r3
 800c260:	4604      	mov	r4, r0
 800c262:	460d      	mov	r5, r1
 800c264:	468a      	mov	sl, r1
 800c266:	468b      	mov	fp, r1
 800c268:	f340 82ef 	ble.w	800c84a <__ieee754_pow+0x9aa>
 800c26c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800c270:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800c274:	4303      	orrs	r3, r0
 800c276:	f000 81e8 	beq.w	800c64a <__ieee754_pow+0x7aa>
 800c27a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c27e:	2200      	movs	r2, #0
 800c280:	2300      	movs	r3, #0
 800c282:	f7f4 fc2b 	bl	8000adc <__aeabi_dcmplt>
 800c286:	3800      	subs	r0, #0
 800c288:	bf18      	it	ne
 800c28a:	2001      	movne	r0, #1
 800c28c:	e710      	b.n	800c0b0 <__ieee754_pow+0x210>
 800c28e:	bf00      	nop
 800c290:	60000000 	.word	0x60000000
 800c294:	3ff71547 	.word	0x3ff71547
 800c298:	f85ddf44 	.word	0xf85ddf44
 800c29c:	3e54ae0b 	.word	0x3e54ae0b
 800c2a0:	55555555 	.word	0x55555555
 800c2a4:	3fd55555 	.word	0x3fd55555
 800c2a8:	652b82fe 	.word	0x652b82fe
 800c2ac:	3ff71547 	.word	0x3ff71547
 800c2b0:	3ff00000 	.word	0x3ff00000
 800c2b4:	3fd00000 	.word	0x3fd00000
 800c2b8:	3fe00000 	.word	0x3fe00000
 800c2bc:	408fffff 	.word	0x408fffff
 800c2c0:	4bd5      	ldr	r3, [pc, #852]	@ (800c618 <__ieee754_pow+0x778>)
 800c2c2:	402b      	ands	r3, r5
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	b92b      	cbnz	r3, 800c2d4 <__ieee754_pow+0x434>
 800c2c8:	4bd4      	ldr	r3, [pc, #848]	@ (800c61c <__ieee754_pow+0x77c>)
 800c2ca:	f7f4 f995 	bl	80005f8 <__aeabi_dmul>
 800c2ce:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800c2d2:	468b      	mov	fp, r1
 800c2d4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800c2d8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c2dc:	4413      	add	r3, r2
 800c2de:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2e0:	4bcf      	ldr	r3, [pc, #828]	@ (800c620 <__ieee754_pow+0x780>)
 800c2e2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800c2e6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800c2ea:	459b      	cmp	fp, r3
 800c2ec:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c2f0:	dd08      	ble.n	800c304 <__ieee754_pow+0x464>
 800c2f2:	4bcc      	ldr	r3, [pc, #816]	@ (800c624 <__ieee754_pow+0x784>)
 800c2f4:	459b      	cmp	fp, r3
 800c2f6:	f340 81a5 	ble.w	800c644 <__ieee754_pow+0x7a4>
 800c2fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800c300:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800c304:	f04f 0a00 	mov.w	sl, #0
 800c308:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c30c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c30e:	4bc6      	ldr	r3, [pc, #792]	@ (800c628 <__ieee754_pow+0x788>)
 800c310:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c314:	ed93 7b00 	vldr	d7, [r3]
 800c318:	4629      	mov	r1, r5
 800c31a:	ec53 2b17 	vmov	r2, r3, d7
 800c31e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c322:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c326:	f7f3 ffaf 	bl	8000288 <__aeabi_dsub>
 800c32a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c32e:	4606      	mov	r6, r0
 800c330:	460f      	mov	r7, r1
 800c332:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c336:	f7f3 ffa9 	bl	800028c <__adddf3>
 800c33a:	4602      	mov	r2, r0
 800c33c:	460b      	mov	r3, r1
 800c33e:	2000      	movs	r0, #0
 800c340:	49ba      	ldr	r1, [pc, #744]	@ (800c62c <__ieee754_pow+0x78c>)
 800c342:	f7f4 fa83 	bl	800084c <__aeabi_ddiv>
 800c346:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800c34a:	4602      	mov	r2, r0
 800c34c:	460b      	mov	r3, r1
 800c34e:	4630      	mov	r0, r6
 800c350:	4639      	mov	r1, r7
 800c352:	f7f4 f951 	bl	80005f8 <__aeabi_dmul>
 800c356:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c35a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800c35e:	106d      	asrs	r5, r5, #1
 800c360:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800c364:	f04f 0b00 	mov.w	fp, #0
 800c368:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800c36c:	4661      	mov	r1, ip
 800c36e:	2200      	movs	r2, #0
 800c370:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800c374:	4658      	mov	r0, fp
 800c376:	46e1      	mov	r9, ip
 800c378:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800c37c:	4614      	mov	r4, r2
 800c37e:	461d      	mov	r5, r3
 800c380:	f7f4 f93a 	bl	80005f8 <__aeabi_dmul>
 800c384:	4602      	mov	r2, r0
 800c386:	460b      	mov	r3, r1
 800c388:	4630      	mov	r0, r6
 800c38a:	4639      	mov	r1, r7
 800c38c:	f7f3 ff7c 	bl	8000288 <__aeabi_dsub>
 800c390:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c394:	4606      	mov	r6, r0
 800c396:	460f      	mov	r7, r1
 800c398:	4620      	mov	r0, r4
 800c39a:	4629      	mov	r1, r5
 800c39c:	f7f3 ff74 	bl	8000288 <__aeabi_dsub>
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c3a8:	f7f3 ff6e 	bl	8000288 <__aeabi_dsub>
 800c3ac:	465a      	mov	r2, fp
 800c3ae:	464b      	mov	r3, r9
 800c3b0:	f7f4 f922 	bl	80005f8 <__aeabi_dmul>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	4639      	mov	r1, r7
 800c3bc:	f7f3 ff64 	bl	8000288 <__aeabi_dsub>
 800c3c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c3c4:	f7f4 f918 	bl	80005f8 <__aeabi_dmul>
 800c3c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	f7f4 f910 	bl	80005f8 <__aeabi_dmul>
 800c3d8:	a37d      	add	r3, pc, #500	@ (adr r3, 800c5d0 <__ieee754_pow+0x730>)
 800c3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3de:	4604      	mov	r4, r0
 800c3e0:	460d      	mov	r5, r1
 800c3e2:	f7f4 f909 	bl	80005f8 <__aeabi_dmul>
 800c3e6:	a37c      	add	r3, pc, #496	@ (adr r3, 800c5d8 <__ieee754_pow+0x738>)
 800c3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ec:	f7f3 ff4e 	bl	800028c <__adddf3>
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	462b      	mov	r3, r5
 800c3f4:	f7f4 f900 	bl	80005f8 <__aeabi_dmul>
 800c3f8:	a379      	add	r3, pc, #484	@ (adr r3, 800c5e0 <__ieee754_pow+0x740>)
 800c3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fe:	f7f3 ff45 	bl	800028c <__adddf3>
 800c402:	4622      	mov	r2, r4
 800c404:	462b      	mov	r3, r5
 800c406:	f7f4 f8f7 	bl	80005f8 <__aeabi_dmul>
 800c40a:	a377      	add	r3, pc, #476	@ (adr r3, 800c5e8 <__ieee754_pow+0x748>)
 800c40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c410:	f7f3 ff3c 	bl	800028c <__adddf3>
 800c414:	4622      	mov	r2, r4
 800c416:	462b      	mov	r3, r5
 800c418:	f7f4 f8ee 	bl	80005f8 <__aeabi_dmul>
 800c41c:	a374      	add	r3, pc, #464	@ (adr r3, 800c5f0 <__ieee754_pow+0x750>)
 800c41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c422:	f7f3 ff33 	bl	800028c <__adddf3>
 800c426:	4622      	mov	r2, r4
 800c428:	462b      	mov	r3, r5
 800c42a:	f7f4 f8e5 	bl	80005f8 <__aeabi_dmul>
 800c42e:	a372      	add	r3, pc, #456	@ (adr r3, 800c5f8 <__ieee754_pow+0x758>)
 800c430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c434:	f7f3 ff2a 	bl	800028c <__adddf3>
 800c438:	4622      	mov	r2, r4
 800c43a:	4606      	mov	r6, r0
 800c43c:	460f      	mov	r7, r1
 800c43e:	462b      	mov	r3, r5
 800c440:	4620      	mov	r0, r4
 800c442:	4629      	mov	r1, r5
 800c444:	f7f4 f8d8 	bl	80005f8 <__aeabi_dmul>
 800c448:	4602      	mov	r2, r0
 800c44a:	460b      	mov	r3, r1
 800c44c:	4630      	mov	r0, r6
 800c44e:	4639      	mov	r1, r7
 800c450:	f7f4 f8d2 	bl	80005f8 <__aeabi_dmul>
 800c454:	465a      	mov	r2, fp
 800c456:	4604      	mov	r4, r0
 800c458:	460d      	mov	r5, r1
 800c45a:	464b      	mov	r3, r9
 800c45c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c460:	f7f3 ff14 	bl	800028c <__adddf3>
 800c464:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c468:	f7f4 f8c6 	bl	80005f8 <__aeabi_dmul>
 800c46c:	4622      	mov	r2, r4
 800c46e:	462b      	mov	r3, r5
 800c470:	f7f3 ff0c 	bl	800028c <__adddf3>
 800c474:	465a      	mov	r2, fp
 800c476:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c47a:	464b      	mov	r3, r9
 800c47c:	4658      	mov	r0, fp
 800c47e:	4649      	mov	r1, r9
 800c480:	f7f4 f8ba 	bl	80005f8 <__aeabi_dmul>
 800c484:	4b6a      	ldr	r3, [pc, #424]	@ (800c630 <__ieee754_pow+0x790>)
 800c486:	2200      	movs	r2, #0
 800c488:	4606      	mov	r6, r0
 800c48a:	460f      	mov	r7, r1
 800c48c:	f7f3 fefe 	bl	800028c <__adddf3>
 800c490:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c494:	f7f3 fefa 	bl	800028c <__adddf3>
 800c498:	46d8      	mov	r8, fp
 800c49a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800c49e:	460d      	mov	r5, r1
 800c4a0:	465a      	mov	r2, fp
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	4640      	mov	r0, r8
 800c4a6:	4649      	mov	r1, r9
 800c4a8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800c4ac:	f7f4 f8a4 	bl	80005f8 <__aeabi_dmul>
 800c4b0:	465c      	mov	r4, fp
 800c4b2:	4680      	mov	r8, r0
 800c4b4:	4689      	mov	r9, r1
 800c4b6:	4b5e      	ldr	r3, [pc, #376]	@ (800c630 <__ieee754_pow+0x790>)
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	4629      	mov	r1, r5
 800c4be:	f7f3 fee3 	bl	8000288 <__aeabi_dsub>
 800c4c2:	4632      	mov	r2, r6
 800c4c4:	463b      	mov	r3, r7
 800c4c6:	f7f3 fedf 	bl	8000288 <__aeabi_dsub>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c4d2:	f7f3 fed9 	bl	8000288 <__aeabi_dsub>
 800c4d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4da:	f7f4 f88d 	bl	80005f8 <__aeabi_dmul>
 800c4de:	4622      	mov	r2, r4
 800c4e0:	4606      	mov	r6, r0
 800c4e2:	460f      	mov	r7, r1
 800c4e4:	462b      	mov	r3, r5
 800c4e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4ea:	f7f4 f885 	bl	80005f8 <__aeabi_dmul>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	4630      	mov	r0, r6
 800c4f4:	4639      	mov	r1, r7
 800c4f6:	f7f3 fec9 	bl	800028c <__adddf3>
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	460f      	mov	r7, r1
 800c4fe:	4602      	mov	r2, r0
 800c500:	460b      	mov	r3, r1
 800c502:	4640      	mov	r0, r8
 800c504:	4649      	mov	r1, r9
 800c506:	f7f3 fec1 	bl	800028c <__adddf3>
 800c50a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800c50e:	a33c      	add	r3, pc, #240	@ (adr r3, 800c600 <__ieee754_pow+0x760>)
 800c510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c514:	4658      	mov	r0, fp
 800c516:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800c51a:	460d      	mov	r5, r1
 800c51c:	f7f4 f86c 	bl	80005f8 <__aeabi_dmul>
 800c520:	465c      	mov	r4, fp
 800c522:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c526:	4642      	mov	r2, r8
 800c528:	464b      	mov	r3, r9
 800c52a:	4620      	mov	r0, r4
 800c52c:	4629      	mov	r1, r5
 800c52e:	f7f3 feab 	bl	8000288 <__aeabi_dsub>
 800c532:	4602      	mov	r2, r0
 800c534:	460b      	mov	r3, r1
 800c536:	4630      	mov	r0, r6
 800c538:	4639      	mov	r1, r7
 800c53a:	f7f3 fea5 	bl	8000288 <__aeabi_dsub>
 800c53e:	a332      	add	r3, pc, #200	@ (adr r3, 800c608 <__ieee754_pow+0x768>)
 800c540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c544:	f7f4 f858 	bl	80005f8 <__aeabi_dmul>
 800c548:	a331      	add	r3, pc, #196	@ (adr r3, 800c610 <__ieee754_pow+0x770>)
 800c54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54e:	4606      	mov	r6, r0
 800c550:	460f      	mov	r7, r1
 800c552:	4620      	mov	r0, r4
 800c554:	4629      	mov	r1, r5
 800c556:	f7f4 f84f 	bl	80005f8 <__aeabi_dmul>
 800c55a:	4602      	mov	r2, r0
 800c55c:	460b      	mov	r3, r1
 800c55e:	4630      	mov	r0, r6
 800c560:	4639      	mov	r1, r7
 800c562:	f7f3 fe93 	bl	800028c <__adddf3>
 800c566:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c568:	4b32      	ldr	r3, [pc, #200]	@ (800c634 <__ieee754_pow+0x794>)
 800c56a:	4413      	add	r3, r2
 800c56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c570:	f7f3 fe8c 	bl	800028c <__adddf3>
 800c574:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c578:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c57a:	f7f3 ffd3 	bl	8000524 <__aeabi_i2d>
 800c57e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c580:	4b2d      	ldr	r3, [pc, #180]	@ (800c638 <__ieee754_pow+0x798>)
 800c582:	4413      	add	r3, r2
 800c584:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c588:	4606      	mov	r6, r0
 800c58a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c58e:	460f      	mov	r7, r1
 800c590:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c594:	f7f3 fe7a 	bl	800028c <__adddf3>
 800c598:	4642      	mov	r2, r8
 800c59a:	464b      	mov	r3, r9
 800c59c:	f7f3 fe76 	bl	800028c <__adddf3>
 800c5a0:	4632      	mov	r2, r6
 800c5a2:	463b      	mov	r3, r7
 800c5a4:	f7f3 fe72 	bl	800028c <__adddf3>
 800c5a8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800c5ac:	4632      	mov	r2, r6
 800c5ae:	463b      	mov	r3, r7
 800c5b0:	4658      	mov	r0, fp
 800c5b2:	460d      	mov	r5, r1
 800c5b4:	f7f3 fe68 	bl	8000288 <__aeabi_dsub>
 800c5b8:	4642      	mov	r2, r8
 800c5ba:	464b      	mov	r3, r9
 800c5bc:	f7f3 fe64 	bl	8000288 <__aeabi_dsub>
 800c5c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5c4:	f7f3 fe60 	bl	8000288 <__aeabi_dsub>
 800c5c8:	465c      	mov	r4, fp
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	e036      	b.n	800c63c <__ieee754_pow+0x79c>
 800c5ce:	bf00      	nop
 800c5d0:	4a454eef 	.word	0x4a454eef
 800c5d4:	3fca7e28 	.word	0x3fca7e28
 800c5d8:	93c9db65 	.word	0x93c9db65
 800c5dc:	3fcd864a 	.word	0x3fcd864a
 800c5e0:	a91d4101 	.word	0xa91d4101
 800c5e4:	3fd17460 	.word	0x3fd17460
 800c5e8:	518f264d 	.word	0x518f264d
 800c5ec:	3fd55555 	.word	0x3fd55555
 800c5f0:	db6fabff 	.word	0xdb6fabff
 800c5f4:	3fdb6db6 	.word	0x3fdb6db6
 800c5f8:	33333303 	.word	0x33333303
 800c5fc:	3fe33333 	.word	0x3fe33333
 800c600:	e0000000 	.word	0xe0000000
 800c604:	3feec709 	.word	0x3feec709
 800c608:	dc3a03fd 	.word	0xdc3a03fd
 800c60c:	3feec709 	.word	0x3feec709
 800c610:	145b01f5 	.word	0x145b01f5
 800c614:	be3e2fe0 	.word	0xbe3e2fe0
 800c618:	7ff00000 	.word	0x7ff00000
 800c61c:	43400000 	.word	0x43400000
 800c620:	0003988e 	.word	0x0003988e
 800c624:	000bb679 	.word	0x000bb679
 800c628:	0800db88 	.word	0x0800db88
 800c62c:	3ff00000 	.word	0x3ff00000
 800c630:	40080000 	.word	0x40080000
 800c634:	0800db68 	.word	0x0800db68
 800c638:	0800db78 	.word	0x0800db78
 800c63c:	460b      	mov	r3, r1
 800c63e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c642:	e5d7      	b.n	800c1f4 <__ieee754_pow+0x354>
 800c644:	f04f 0a01 	mov.w	sl, #1
 800c648:	e65e      	b.n	800c308 <__ieee754_pow+0x468>
 800c64a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c91c <__ieee754_pow+0xa7c>)
 800c64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c650:	4630      	mov	r0, r6
 800c652:	4639      	mov	r1, r7
 800c654:	f7f3 fe1a 	bl	800028c <__adddf3>
 800c658:	4642      	mov	r2, r8
 800c65a:	e9cd 0100 	strd	r0, r1, [sp]
 800c65e:	464b      	mov	r3, r9
 800c660:	4620      	mov	r0, r4
 800c662:	4629      	mov	r1, r5
 800c664:	f7f3 fe10 	bl	8000288 <__aeabi_dsub>
 800c668:	4602      	mov	r2, r0
 800c66a:	460b      	mov	r3, r1
 800c66c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c670:	f7f4 fa52 	bl	8000b18 <__aeabi_dcmpgt>
 800c674:	2800      	cmp	r0, #0
 800c676:	f47f ae00 	bne.w	800c27a <__ieee754_pow+0x3da>
 800c67a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c67e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c682:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c686:	fa43 fa0a 	asr.w	sl, r3, sl
 800c68a:	44da      	add	sl, fp
 800c68c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c690:	489d      	ldr	r0, [pc, #628]	@ (800c908 <__ieee754_pow+0xa68>)
 800c692:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c696:	4108      	asrs	r0, r1
 800c698:	ea00 030a 	and.w	r3, r0, sl
 800c69c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c6a0:	f1c1 0114 	rsb	r1, r1, #20
 800c6a4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c6a8:	fa4a fa01 	asr.w	sl, sl, r1
 800c6ac:	f1bb 0f00 	cmp.w	fp, #0
 800c6b0:	4640      	mov	r0, r8
 800c6b2:	4649      	mov	r1, r9
 800c6b4:	f04f 0200 	mov.w	r2, #0
 800c6b8:	bfb8      	it	lt
 800c6ba:	f1ca 0a00 	rsblt	sl, sl, #0
 800c6be:	f7f3 fde3 	bl	8000288 <__aeabi_dsub>
 800c6c2:	4680      	mov	r8, r0
 800c6c4:	4689      	mov	r9, r1
 800c6c6:	4632      	mov	r2, r6
 800c6c8:	463b      	mov	r3, r7
 800c6ca:	4640      	mov	r0, r8
 800c6cc:	4649      	mov	r1, r9
 800c6ce:	f7f3 fddd 	bl	800028c <__adddf3>
 800c6d2:	2400      	movs	r4, #0
 800c6d4:	a37c      	add	r3, pc, #496	@ (adr r3, 800c8c8 <__ieee754_pow+0xa28>)
 800c6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6da:	4620      	mov	r0, r4
 800c6dc:	460d      	mov	r5, r1
 800c6de:	f7f3 ff8b 	bl	80005f8 <__aeabi_dmul>
 800c6e2:	4642      	mov	r2, r8
 800c6e4:	e9cd 0100 	strd	r0, r1, [sp]
 800c6e8:	464b      	mov	r3, r9
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	f7f3 fdcb 	bl	8000288 <__aeabi_dsub>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	4639      	mov	r1, r7
 800c6fa:	f7f3 fdc5 	bl	8000288 <__aeabi_dsub>
 800c6fe:	a374      	add	r3, pc, #464	@ (adr r3, 800c8d0 <__ieee754_pow+0xa30>)
 800c700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c704:	f7f3 ff78 	bl	80005f8 <__aeabi_dmul>
 800c708:	a373      	add	r3, pc, #460	@ (adr r3, 800c8d8 <__ieee754_pow+0xa38>)
 800c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70e:	4680      	mov	r8, r0
 800c710:	4689      	mov	r9, r1
 800c712:	4620      	mov	r0, r4
 800c714:	4629      	mov	r1, r5
 800c716:	f7f3 ff6f 	bl	80005f8 <__aeabi_dmul>
 800c71a:	4602      	mov	r2, r0
 800c71c:	460b      	mov	r3, r1
 800c71e:	4640      	mov	r0, r8
 800c720:	4649      	mov	r1, r9
 800c722:	f7f3 fdb3 	bl	800028c <__adddf3>
 800c726:	4604      	mov	r4, r0
 800c728:	460d      	mov	r5, r1
 800c72a:	4602      	mov	r2, r0
 800c72c:	460b      	mov	r3, r1
 800c72e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c732:	f7f3 fdab 	bl	800028c <__adddf3>
 800c736:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c73a:	4680      	mov	r8, r0
 800c73c:	4689      	mov	r9, r1
 800c73e:	f7f3 fda3 	bl	8000288 <__aeabi_dsub>
 800c742:	4602      	mov	r2, r0
 800c744:	460b      	mov	r3, r1
 800c746:	4620      	mov	r0, r4
 800c748:	4629      	mov	r1, r5
 800c74a:	f7f3 fd9d 	bl	8000288 <__aeabi_dsub>
 800c74e:	4642      	mov	r2, r8
 800c750:	4606      	mov	r6, r0
 800c752:	460f      	mov	r7, r1
 800c754:	464b      	mov	r3, r9
 800c756:	4640      	mov	r0, r8
 800c758:	4649      	mov	r1, r9
 800c75a:	f7f3 ff4d 	bl	80005f8 <__aeabi_dmul>
 800c75e:	a360      	add	r3, pc, #384	@ (adr r3, 800c8e0 <__ieee754_pow+0xa40>)
 800c760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c764:	4604      	mov	r4, r0
 800c766:	460d      	mov	r5, r1
 800c768:	f7f3 ff46 	bl	80005f8 <__aeabi_dmul>
 800c76c:	a35e      	add	r3, pc, #376	@ (adr r3, 800c8e8 <__ieee754_pow+0xa48>)
 800c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c772:	f7f3 fd89 	bl	8000288 <__aeabi_dsub>
 800c776:	4622      	mov	r2, r4
 800c778:	462b      	mov	r3, r5
 800c77a:	f7f3 ff3d 	bl	80005f8 <__aeabi_dmul>
 800c77e:	a35c      	add	r3, pc, #368	@ (adr r3, 800c8f0 <__ieee754_pow+0xa50>)
 800c780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c784:	f7f3 fd82 	bl	800028c <__adddf3>
 800c788:	4622      	mov	r2, r4
 800c78a:	462b      	mov	r3, r5
 800c78c:	f7f3 ff34 	bl	80005f8 <__aeabi_dmul>
 800c790:	a359      	add	r3, pc, #356	@ (adr r3, 800c8f8 <__ieee754_pow+0xa58>)
 800c792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c796:	f7f3 fd77 	bl	8000288 <__aeabi_dsub>
 800c79a:	4622      	mov	r2, r4
 800c79c:	462b      	mov	r3, r5
 800c79e:	f7f3 ff2b 	bl	80005f8 <__aeabi_dmul>
 800c7a2:	a357      	add	r3, pc, #348	@ (adr r3, 800c900 <__ieee754_pow+0xa60>)
 800c7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a8:	f7f3 fd70 	bl	800028c <__adddf3>
 800c7ac:	4622      	mov	r2, r4
 800c7ae:	462b      	mov	r3, r5
 800c7b0:	f7f3 ff22 	bl	80005f8 <__aeabi_dmul>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	4640      	mov	r0, r8
 800c7ba:	4649      	mov	r1, r9
 800c7bc:	f7f3 fd64 	bl	8000288 <__aeabi_dsub>
 800c7c0:	4604      	mov	r4, r0
 800c7c2:	460d      	mov	r5, r1
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	4640      	mov	r0, r8
 800c7ca:	4649      	mov	r1, r9
 800c7cc:	f7f3 ff14 	bl	80005f8 <__aeabi_dmul>
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	e9cd 0100 	strd	r0, r1, [sp]
 800c7d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c7da:	4620      	mov	r0, r4
 800c7dc:	4629      	mov	r1, r5
 800c7de:	f7f3 fd53 	bl	8000288 <__aeabi_dsub>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7ea:	f7f4 f82f 	bl	800084c <__aeabi_ddiv>
 800c7ee:	4632      	mov	r2, r6
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	460d      	mov	r5, r1
 800c7f4:	463b      	mov	r3, r7
 800c7f6:	4640      	mov	r0, r8
 800c7f8:	4649      	mov	r1, r9
 800c7fa:	f7f3 fefd 	bl	80005f8 <__aeabi_dmul>
 800c7fe:	4632      	mov	r2, r6
 800c800:	463b      	mov	r3, r7
 800c802:	f7f3 fd43 	bl	800028c <__adddf3>
 800c806:	4602      	mov	r2, r0
 800c808:	460b      	mov	r3, r1
 800c80a:	4620      	mov	r0, r4
 800c80c:	4629      	mov	r1, r5
 800c80e:	f7f3 fd3b 	bl	8000288 <__aeabi_dsub>
 800c812:	4642      	mov	r2, r8
 800c814:	464b      	mov	r3, r9
 800c816:	f7f3 fd37 	bl	8000288 <__aeabi_dsub>
 800c81a:	460b      	mov	r3, r1
 800c81c:	4602      	mov	r2, r0
 800c81e:	493b      	ldr	r1, [pc, #236]	@ (800c90c <__ieee754_pow+0xa6c>)
 800c820:	2000      	movs	r0, #0
 800c822:	f7f3 fd31 	bl	8000288 <__aeabi_dsub>
 800c826:	ec41 0b10 	vmov	d0, r0, r1
 800c82a:	ee10 3a90 	vmov	r3, s1
 800c82e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c832:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c836:	da30      	bge.n	800c89a <__ieee754_pow+0x9fa>
 800c838:	4650      	mov	r0, sl
 800c83a:	f000 fda9 	bl	800d390 <scalbn>
 800c83e:	ec51 0b10 	vmov	r0, r1, d0
 800c842:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c846:	f7ff bbd2 	b.w	800bfee <__ieee754_pow+0x14e>
 800c84a:	4c31      	ldr	r4, [pc, #196]	@ (800c910 <__ieee754_pow+0xa70>)
 800c84c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c850:	42a3      	cmp	r3, r4
 800c852:	d91a      	bls.n	800c88a <__ieee754_pow+0x9ea>
 800c854:	4b2f      	ldr	r3, [pc, #188]	@ (800c914 <__ieee754_pow+0xa74>)
 800c856:	440b      	add	r3, r1
 800c858:	4303      	orrs	r3, r0
 800c85a:	d009      	beq.n	800c870 <__ieee754_pow+0x9d0>
 800c85c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c860:	2200      	movs	r2, #0
 800c862:	2300      	movs	r3, #0
 800c864:	f7f4 f93a 	bl	8000adc <__aeabi_dcmplt>
 800c868:	3800      	subs	r0, #0
 800c86a:	bf18      	it	ne
 800c86c:	2001      	movne	r0, #1
 800c86e:	e42b      	b.n	800c0c8 <__ieee754_pow+0x228>
 800c870:	4642      	mov	r2, r8
 800c872:	464b      	mov	r3, r9
 800c874:	f7f3 fd08 	bl	8000288 <__aeabi_dsub>
 800c878:	4632      	mov	r2, r6
 800c87a:	463b      	mov	r3, r7
 800c87c:	f7f4 f942 	bl	8000b04 <__aeabi_dcmpge>
 800c880:	2800      	cmp	r0, #0
 800c882:	d1eb      	bne.n	800c85c <__ieee754_pow+0x9bc>
 800c884:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c924 <__ieee754_pow+0xa84>
 800c888:	e6f7      	b.n	800c67a <__ieee754_pow+0x7da>
 800c88a:	469a      	mov	sl, r3
 800c88c:	4b22      	ldr	r3, [pc, #136]	@ (800c918 <__ieee754_pow+0xa78>)
 800c88e:	459a      	cmp	sl, r3
 800c890:	f63f aef3 	bhi.w	800c67a <__ieee754_pow+0x7da>
 800c894:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c898:	e715      	b.n	800c6c6 <__ieee754_pow+0x826>
 800c89a:	ec51 0b10 	vmov	r0, r1, d0
 800c89e:	4619      	mov	r1, r3
 800c8a0:	e7cf      	b.n	800c842 <__ieee754_pow+0x9a2>
 800c8a2:	491a      	ldr	r1, [pc, #104]	@ (800c90c <__ieee754_pow+0xa6c>)
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	f7ff bb18 	b.w	800beda <__ieee754_pow+0x3a>
 800c8aa:	2000      	movs	r0, #0
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	f7ff bb14 	b.w	800beda <__ieee754_pow+0x3a>
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	4639      	mov	r1, r7
 800c8b6:	f7ff bb10 	b.w	800beda <__ieee754_pow+0x3a>
 800c8ba:	460c      	mov	r4, r1
 800c8bc:	f7ff bb5e 	b.w	800bf7c <__ieee754_pow+0xdc>
 800c8c0:	2400      	movs	r4, #0
 800c8c2:	f7ff bb49 	b.w	800bf58 <__ieee754_pow+0xb8>
 800c8c6:	bf00      	nop
 800c8c8:	00000000 	.word	0x00000000
 800c8cc:	3fe62e43 	.word	0x3fe62e43
 800c8d0:	fefa39ef 	.word	0xfefa39ef
 800c8d4:	3fe62e42 	.word	0x3fe62e42
 800c8d8:	0ca86c39 	.word	0x0ca86c39
 800c8dc:	be205c61 	.word	0xbe205c61
 800c8e0:	72bea4d0 	.word	0x72bea4d0
 800c8e4:	3e663769 	.word	0x3e663769
 800c8e8:	c5d26bf1 	.word	0xc5d26bf1
 800c8ec:	3ebbbd41 	.word	0x3ebbbd41
 800c8f0:	af25de2c 	.word	0xaf25de2c
 800c8f4:	3f11566a 	.word	0x3f11566a
 800c8f8:	16bebd93 	.word	0x16bebd93
 800c8fc:	3f66c16c 	.word	0x3f66c16c
 800c900:	5555553e 	.word	0x5555553e
 800c904:	3fc55555 	.word	0x3fc55555
 800c908:	fff00000 	.word	0xfff00000
 800c90c:	3ff00000 	.word	0x3ff00000
 800c910:	4090cbff 	.word	0x4090cbff
 800c914:	3f6f3400 	.word	0x3f6f3400
 800c918:	3fe00000 	.word	0x3fe00000
 800c91c:	652b82fe 	.word	0x652b82fe
 800c920:	3c971547 	.word	0x3c971547
 800c924:	4090cc00 	.word	0x4090cc00

0800c928 <fabs>:
 800c928:	ec51 0b10 	vmov	r0, r1, d0
 800c92c:	4602      	mov	r2, r0
 800c92e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c932:	ec43 2b10 	vmov	d0, r2, r3
 800c936:	4770      	bx	lr

0800c938 <__ieee754_asinf>:
 800c938:	b538      	push	{r3, r4, r5, lr}
 800c93a:	ee10 5a10 	vmov	r5, s0
 800c93e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c942:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800c946:	ed2d 8b04 	vpush	{d8-d9}
 800c94a:	d10c      	bne.n	800c966 <__ieee754_asinf+0x2e>
 800c94c:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800cac4 <__ieee754_asinf+0x18c>
 800c950:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800cac8 <__ieee754_asinf+0x190>
 800c954:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c958:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c95c:	eeb0 0a67 	vmov.f32	s0, s15
 800c960:	ecbd 8b04 	vpop	{d8-d9}
 800c964:	bd38      	pop	{r3, r4, r5, pc}
 800c966:	d904      	bls.n	800c972 <__ieee754_asinf+0x3a>
 800c968:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c96c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c970:	e7f6      	b.n	800c960 <__ieee754_asinf+0x28>
 800c972:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800c976:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800c97a:	d20b      	bcs.n	800c994 <__ieee754_asinf+0x5c>
 800c97c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800c980:	d252      	bcs.n	800ca28 <__ieee754_asinf+0xf0>
 800c982:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800cacc <__ieee754_asinf+0x194>
 800c986:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c98a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800c98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c992:	dce5      	bgt.n	800c960 <__ieee754_asinf+0x28>
 800c994:	f7ff f98d 	bl	800bcb2 <fabsf>
 800c998:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800c99c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c9a0:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c9a4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800cad0 <__ieee754_asinf+0x198>
 800c9a8:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800cad4 <__ieee754_asinf+0x19c>
 800c9ac:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800cad8 <__ieee754_asinf+0x1a0>
 800c9b0:	eea8 7a27 	vfma.f32	s14, s16, s15
 800c9b4:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800cadc <__ieee754_asinf+0x1a4>
 800c9b8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c9bc:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800cae0 <__ieee754_asinf+0x1a8>
 800c9c0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800c9c4:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800cae4 <__ieee754_asinf+0x1ac>
 800c9c8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c9cc:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800cae8 <__ieee754_asinf+0x1b0>
 800c9d0:	eea7 9a88 	vfma.f32	s18, s15, s16
 800c9d4:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800caec <__ieee754_asinf+0x1b4>
 800c9d8:	eee8 7a07 	vfma.f32	s15, s16, s14
 800c9dc:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800caf0 <__ieee754_asinf+0x1b8>
 800c9e0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800c9e4:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800caf4 <__ieee754_asinf+0x1bc>
 800c9e8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c9ec:	eeb0 0a48 	vmov.f32	s0, s16
 800c9f0:	eee7 8a88 	vfma.f32	s17, s15, s16
 800c9f4:	f000 fe14 	bl	800d620 <__ieee754_sqrtf>
 800c9f8:	4b3f      	ldr	r3, [pc, #252]	@ (800caf8 <__ieee754_asinf+0x1c0>)
 800c9fa:	ee29 9a08 	vmul.f32	s18, s18, s16
 800c9fe:	429c      	cmp	r4, r3
 800ca00:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800ca04:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ca08:	d93d      	bls.n	800ca86 <__ieee754_asinf+0x14e>
 800ca0a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800ca0e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800cafc <__ieee754_asinf+0x1c4>
 800ca12:	eee0 7a26 	vfma.f32	s15, s0, s13
 800ca16:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800cac8 <__ieee754_asinf+0x190>
 800ca1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ca1e:	2d00      	cmp	r5, #0
 800ca20:	bfd8      	it	le
 800ca22:	eeb1 0a40 	vnegle.f32	s0, s0
 800ca26:	e79b      	b.n	800c960 <__ieee754_asinf+0x28>
 800ca28:	ee60 7a00 	vmul.f32	s15, s0, s0
 800ca2c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800cad4 <__ieee754_asinf+0x19c>
 800ca30:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800cad0 <__ieee754_asinf+0x198>
 800ca34:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800cae8 <__ieee754_asinf+0x1b0>
 800ca38:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ca3c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800cadc <__ieee754_asinf+0x1a4>
 800ca40:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ca44:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800cae0 <__ieee754_asinf+0x1a8>
 800ca48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ca4c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800cae4 <__ieee754_asinf+0x1ac>
 800ca50:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ca54:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800cad8 <__ieee754_asinf+0x1a0>
 800ca58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ca5c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800caec <__ieee754_asinf+0x1b4>
 800ca60:	eee7 6a86 	vfma.f32	s13, s15, s12
 800ca64:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800caf0 <__ieee754_asinf+0x1b8>
 800ca68:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800ca6c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800caf4 <__ieee754_asinf+0x1bc>
 800ca70:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ca74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca78:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800ca7c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800ca80:	eea0 0a27 	vfma.f32	s0, s0, s15
 800ca84:	e76c      	b.n	800c960 <__ieee754_asinf+0x28>
 800ca86:	ee10 3a10 	vmov	r3, s0
 800ca8a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800ca8e:	f023 030f 	bic.w	r3, r3, #15
 800ca92:	ee07 3a10 	vmov	s14, r3
 800ca96:	eea7 8a47 	vfms.f32	s16, s14, s14
 800ca9a:	ee70 5a00 	vadd.f32	s11, s0, s0
 800ca9e:	ee30 0a07 	vadd.f32	s0, s0, s14
 800caa2:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800cac4 <__ieee754_asinf+0x18c>
 800caa6:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800caaa:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800cb00 <__ieee754_asinf+0x1c8>
 800caae:	eee5 7a66 	vfms.f32	s15, s10, s13
 800cab2:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800cab6:	eeb0 6a40 	vmov.f32	s12, s0
 800caba:	eea7 6a66 	vfms.f32	s12, s14, s13
 800cabe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cac2:	e7aa      	b.n	800ca1a <__ieee754_asinf+0xe2>
 800cac4:	b33bbd2e 	.word	0xb33bbd2e
 800cac8:	3fc90fdb 	.word	0x3fc90fdb
 800cacc:	7149f2ca 	.word	0x7149f2ca
 800cad0:	3a4f7f04 	.word	0x3a4f7f04
 800cad4:	3811ef08 	.word	0x3811ef08
 800cad8:	3e2aaaab 	.word	0x3e2aaaab
 800cadc:	bd241146 	.word	0xbd241146
 800cae0:	3e4e0aa8 	.word	0x3e4e0aa8
 800cae4:	bea6b090 	.word	0xbea6b090
 800cae8:	3d9dc62e 	.word	0x3d9dc62e
 800caec:	bf303361 	.word	0xbf303361
 800caf0:	4001572d 	.word	0x4001572d
 800caf4:	c019d139 	.word	0xc019d139
 800caf8:	3f799999 	.word	0x3f799999
 800cafc:	333bbd2e 	.word	0x333bbd2e
 800cb00:	3f490fdb 	.word	0x3f490fdb

0800cb04 <__ieee754_atan2f>:
 800cb04:	ee10 2a90 	vmov	r2, s1
 800cb08:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800cb0c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cb10:	b510      	push	{r4, lr}
 800cb12:	eef0 7a40 	vmov.f32	s15, s0
 800cb16:	d806      	bhi.n	800cb26 <__ieee754_atan2f+0x22>
 800cb18:	ee10 0a10 	vmov	r0, s0
 800cb1c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800cb20:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cb24:	d904      	bls.n	800cb30 <__ieee754_atan2f+0x2c>
 800cb26:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800cb2a:	eeb0 0a67 	vmov.f32	s0, s15
 800cb2e:	bd10      	pop	{r4, pc}
 800cb30:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800cb34:	d103      	bne.n	800cb3e <__ieee754_atan2f+0x3a>
 800cb36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb3a:	f000 bb53 	b.w	800d1e4 <atanf>
 800cb3e:	1794      	asrs	r4, r2, #30
 800cb40:	f004 0402 	and.w	r4, r4, #2
 800cb44:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800cb48:	b943      	cbnz	r3, 800cb5c <__ieee754_atan2f+0x58>
 800cb4a:	2c02      	cmp	r4, #2
 800cb4c:	d05e      	beq.n	800cc0c <__ieee754_atan2f+0x108>
 800cb4e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800cc20 <__ieee754_atan2f+0x11c>
 800cb52:	2c03      	cmp	r4, #3
 800cb54:	bf08      	it	eq
 800cb56:	eef0 7a47 	vmoveq.f32	s15, s14
 800cb5a:	e7e6      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cb5c:	b941      	cbnz	r1, 800cb70 <__ieee754_atan2f+0x6c>
 800cb5e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800cc24 <__ieee754_atan2f+0x120>
 800cb62:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800cc28 <__ieee754_atan2f+0x124>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	bfb8      	it	lt
 800cb6a:	eef0 7a47 	vmovlt.f32	s15, s14
 800cb6e:	e7dc      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cb70:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cb74:	d110      	bne.n	800cb98 <__ieee754_atan2f+0x94>
 800cb76:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cb7a:	f104 34ff 	add.w	r4, r4, #4294967295
 800cb7e:	d107      	bne.n	800cb90 <__ieee754_atan2f+0x8c>
 800cb80:	2c02      	cmp	r4, #2
 800cb82:	d846      	bhi.n	800cc12 <__ieee754_atan2f+0x10e>
 800cb84:	4b29      	ldr	r3, [pc, #164]	@ (800cc2c <__ieee754_atan2f+0x128>)
 800cb86:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cb8a:	edd3 7a00 	vldr	s15, [r3]
 800cb8e:	e7cc      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cb90:	2c02      	cmp	r4, #2
 800cb92:	d841      	bhi.n	800cc18 <__ieee754_atan2f+0x114>
 800cb94:	4b26      	ldr	r3, [pc, #152]	@ (800cc30 <__ieee754_atan2f+0x12c>)
 800cb96:	e7f6      	b.n	800cb86 <__ieee754_atan2f+0x82>
 800cb98:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cb9c:	d0df      	beq.n	800cb5e <__ieee754_atan2f+0x5a>
 800cb9e:	1a5b      	subs	r3, r3, r1
 800cba0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800cba4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800cba8:	da1a      	bge.n	800cbe0 <__ieee754_atan2f+0xdc>
 800cbaa:	2a00      	cmp	r2, #0
 800cbac:	da01      	bge.n	800cbb2 <__ieee754_atan2f+0xae>
 800cbae:	313c      	adds	r1, #60	@ 0x3c
 800cbb0:	db19      	blt.n	800cbe6 <__ieee754_atan2f+0xe2>
 800cbb2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800cbb6:	f7ff f87c 	bl	800bcb2 <fabsf>
 800cbba:	f000 fb13 	bl	800d1e4 <atanf>
 800cbbe:	eef0 7a40 	vmov.f32	s15, s0
 800cbc2:	2c01      	cmp	r4, #1
 800cbc4:	d012      	beq.n	800cbec <__ieee754_atan2f+0xe8>
 800cbc6:	2c02      	cmp	r4, #2
 800cbc8:	d017      	beq.n	800cbfa <__ieee754_atan2f+0xf6>
 800cbca:	2c00      	cmp	r4, #0
 800cbcc:	d0ad      	beq.n	800cb2a <__ieee754_atan2f+0x26>
 800cbce:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800cc34 <__ieee754_atan2f+0x130>
 800cbd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cbd6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800cc38 <__ieee754_atan2f+0x134>
 800cbda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cbde:	e7a4      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cbe0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800cc24 <__ieee754_atan2f+0x120>
 800cbe4:	e7ed      	b.n	800cbc2 <__ieee754_atan2f+0xbe>
 800cbe6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800cc3c <__ieee754_atan2f+0x138>
 800cbea:	e7ea      	b.n	800cbc2 <__ieee754_atan2f+0xbe>
 800cbec:	ee17 3a90 	vmov	r3, s15
 800cbf0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cbf4:	ee07 3a90 	vmov	s15, r3
 800cbf8:	e797      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cbfa:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800cc34 <__ieee754_atan2f+0x130>
 800cbfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc02:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800cc38 <__ieee754_atan2f+0x134>
 800cc06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc0a:	e78e      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cc0c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800cc38 <__ieee754_atan2f+0x134>
 800cc10:	e78b      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cc12:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800cc40 <__ieee754_atan2f+0x13c>
 800cc16:	e788      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cc18:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800cc3c <__ieee754_atan2f+0x138>
 800cc1c:	e785      	b.n	800cb2a <__ieee754_atan2f+0x26>
 800cc1e:	bf00      	nop
 800cc20:	c0490fdb 	.word	0xc0490fdb
 800cc24:	3fc90fdb 	.word	0x3fc90fdb
 800cc28:	bfc90fdb 	.word	0xbfc90fdb
 800cc2c:	0800dba4 	.word	0x0800dba4
 800cc30:	0800db98 	.word	0x0800db98
 800cc34:	33bbbd2e 	.word	0x33bbbd2e
 800cc38:	40490fdb 	.word	0x40490fdb
 800cc3c:	00000000 	.word	0x00000000
 800cc40:	3f490fdb 	.word	0x3f490fdb

0800cc44 <__ieee754_powf>:
 800cc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc48:	ee10 4a90 	vmov	r4, s1
 800cc4c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800cc50:	ed2d 8b02 	vpush	{d8}
 800cc54:	ee10 6a10 	vmov	r6, s0
 800cc58:	eeb0 8a40 	vmov.f32	s16, s0
 800cc5c:	eef0 8a60 	vmov.f32	s17, s1
 800cc60:	d10c      	bne.n	800cc7c <__ieee754_powf+0x38>
 800cc62:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800cc66:	0076      	lsls	r6, r6, #1
 800cc68:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800cc6c:	f240 829c 	bls.w	800d1a8 <__ieee754_powf+0x564>
 800cc70:	ee38 0a28 	vadd.f32	s0, s16, s17
 800cc74:	ecbd 8b02 	vpop	{d8}
 800cc78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc7c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800cc80:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800cc84:	d802      	bhi.n	800cc8c <__ieee754_powf+0x48>
 800cc86:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800cc8a:	d908      	bls.n	800cc9e <__ieee754_powf+0x5a>
 800cc8c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800cc90:	d1ee      	bne.n	800cc70 <__ieee754_powf+0x2c>
 800cc92:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800cc96:	0064      	lsls	r4, r4, #1
 800cc98:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800cc9c:	e7e6      	b.n	800cc6c <__ieee754_powf+0x28>
 800cc9e:	2e00      	cmp	r6, #0
 800cca0:	da1e      	bge.n	800cce0 <__ieee754_powf+0x9c>
 800cca2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800cca6:	d22b      	bcs.n	800cd00 <__ieee754_powf+0xbc>
 800cca8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ccac:	d332      	bcc.n	800cd14 <__ieee754_powf+0xd0>
 800ccae:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800ccb2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800ccb6:	fa49 f503 	asr.w	r5, r9, r3
 800ccba:	fa05 f303 	lsl.w	r3, r5, r3
 800ccbe:	454b      	cmp	r3, r9
 800ccc0:	d126      	bne.n	800cd10 <__ieee754_powf+0xcc>
 800ccc2:	f005 0501 	and.w	r5, r5, #1
 800ccc6:	f1c5 0502 	rsb	r5, r5, #2
 800ccca:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ccce:	d122      	bne.n	800cd16 <__ieee754_powf+0xd2>
 800ccd0:	2c00      	cmp	r4, #0
 800ccd2:	f280 826f 	bge.w	800d1b4 <__ieee754_powf+0x570>
 800ccd6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ccda:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ccde:	e7c9      	b.n	800cc74 <__ieee754_powf+0x30>
 800cce0:	2500      	movs	r5, #0
 800cce2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800cce6:	d1f0      	bne.n	800ccca <__ieee754_powf+0x86>
 800cce8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800ccec:	f000 825c 	beq.w	800d1a8 <__ieee754_powf+0x564>
 800ccf0:	d908      	bls.n	800cd04 <__ieee754_powf+0xc0>
 800ccf2:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800d054 <__ieee754_powf+0x410>
 800ccf6:	2c00      	cmp	r4, #0
 800ccf8:	bfa8      	it	ge
 800ccfa:	eeb0 0a68 	vmovge.f32	s0, s17
 800ccfe:	e7b9      	b.n	800cc74 <__ieee754_powf+0x30>
 800cd00:	2502      	movs	r5, #2
 800cd02:	e7ee      	b.n	800cce2 <__ieee754_powf+0x9e>
 800cd04:	2c00      	cmp	r4, #0
 800cd06:	f280 8252 	bge.w	800d1ae <__ieee754_powf+0x56a>
 800cd0a:	eeb1 0a68 	vneg.f32	s0, s17
 800cd0e:	e7b1      	b.n	800cc74 <__ieee754_powf+0x30>
 800cd10:	2500      	movs	r5, #0
 800cd12:	e7da      	b.n	800ccca <__ieee754_powf+0x86>
 800cd14:	2500      	movs	r5, #0
 800cd16:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800cd1a:	d102      	bne.n	800cd22 <__ieee754_powf+0xde>
 800cd1c:	ee28 0a08 	vmul.f32	s0, s16, s16
 800cd20:	e7a8      	b.n	800cc74 <__ieee754_powf+0x30>
 800cd22:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800cd26:	d109      	bne.n	800cd3c <__ieee754_powf+0xf8>
 800cd28:	2e00      	cmp	r6, #0
 800cd2a:	db07      	blt.n	800cd3c <__ieee754_powf+0xf8>
 800cd2c:	eeb0 0a48 	vmov.f32	s0, s16
 800cd30:	ecbd 8b02 	vpop	{d8}
 800cd34:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd38:	f000 bc72 	b.w	800d620 <__ieee754_sqrtf>
 800cd3c:	eeb0 0a48 	vmov.f32	s0, s16
 800cd40:	f7fe ffb7 	bl	800bcb2 <fabsf>
 800cd44:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800cd48:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800cd4c:	4647      	mov	r7, r8
 800cd4e:	d002      	beq.n	800cd56 <__ieee754_powf+0x112>
 800cd50:	f1b8 0f00 	cmp.w	r8, #0
 800cd54:	d117      	bne.n	800cd86 <__ieee754_powf+0x142>
 800cd56:	2c00      	cmp	r4, #0
 800cd58:	bfbc      	itt	lt
 800cd5a:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800cd5e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800cd62:	2e00      	cmp	r6, #0
 800cd64:	da86      	bge.n	800cc74 <__ieee754_powf+0x30>
 800cd66:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800cd6a:	ea58 0805 	orrs.w	r8, r8, r5
 800cd6e:	d104      	bne.n	800cd7a <__ieee754_powf+0x136>
 800cd70:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cd74:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800cd78:	e77c      	b.n	800cc74 <__ieee754_powf+0x30>
 800cd7a:	2d01      	cmp	r5, #1
 800cd7c:	f47f af7a 	bne.w	800cc74 <__ieee754_powf+0x30>
 800cd80:	eeb1 0a40 	vneg.f32	s0, s0
 800cd84:	e776      	b.n	800cc74 <__ieee754_powf+0x30>
 800cd86:	0ff0      	lsrs	r0, r6, #31
 800cd88:	3801      	subs	r0, #1
 800cd8a:	ea55 0300 	orrs.w	r3, r5, r0
 800cd8e:	d104      	bne.n	800cd9a <__ieee754_powf+0x156>
 800cd90:	ee38 8a48 	vsub.f32	s16, s16, s16
 800cd94:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800cd98:	e76c      	b.n	800cc74 <__ieee754_powf+0x30>
 800cd9a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800cd9e:	d973      	bls.n	800ce88 <__ieee754_powf+0x244>
 800cda0:	4bad      	ldr	r3, [pc, #692]	@ (800d058 <__ieee754_powf+0x414>)
 800cda2:	4598      	cmp	r8, r3
 800cda4:	d808      	bhi.n	800cdb8 <__ieee754_powf+0x174>
 800cda6:	2c00      	cmp	r4, #0
 800cda8:	da0b      	bge.n	800cdc2 <__ieee754_powf+0x17e>
 800cdaa:	2000      	movs	r0, #0
 800cdac:	ecbd 8b02 	vpop	{d8}
 800cdb0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdb4:	f000 bc2e 	b.w	800d614 <__math_oflowf>
 800cdb8:	4ba8      	ldr	r3, [pc, #672]	@ (800d05c <__ieee754_powf+0x418>)
 800cdba:	4598      	cmp	r8, r3
 800cdbc:	d908      	bls.n	800cdd0 <__ieee754_powf+0x18c>
 800cdbe:	2c00      	cmp	r4, #0
 800cdc0:	dcf3      	bgt.n	800cdaa <__ieee754_powf+0x166>
 800cdc2:	2000      	movs	r0, #0
 800cdc4:	ecbd 8b02 	vpop	{d8}
 800cdc8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdcc:	f000 bc1c 	b.w	800d608 <__math_uflowf>
 800cdd0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cdd4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cdd8:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800d060 <__ieee754_powf+0x41c>
 800cddc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800cde0:	eee0 6a67 	vfms.f32	s13, s0, s15
 800cde4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cde8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800cdec:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cdf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdf4:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800d064 <__ieee754_powf+0x420>
 800cdf8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800cdfc:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800d068 <__ieee754_powf+0x424>
 800ce00:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ce04:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800d06c <__ieee754_powf+0x428>
 800ce08:	eef0 6a67 	vmov.f32	s13, s15
 800ce0c:	eee0 6a07 	vfma.f32	s13, s0, s14
 800ce10:	ee16 3a90 	vmov	r3, s13
 800ce14:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800ce18:	f023 030f 	bic.w	r3, r3, #15
 800ce1c:	ee06 3a90 	vmov	s13, r3
 800ce20:	eee0 6a47 	vfms.f32	s13, s0, s14
 800ce24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ce28:	3d01      	subs	r5, #1
 800ce2a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800ce2e:	4305      	orrs	r5, r0
 800ce30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce34:	f024 040f 	bic.w	r4, r4, #15
 800ce38:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800ce3c:	bf18      	it	ne
 800ce3e:	eeb0 8a47 	vmovne.f32	s16, s14
 800ce42:	ee07 4a10 	vmov	s14, r4
 800ce46:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ce4a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800ce4e:	ee07 3a90 	vmov	s15, r3
 800ce52:	eee7 0a27 	vfma.f32	s1, s14, s15
 800ce56:	ee07 4a10 	vmov	s14, r4
 800ce5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce5e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800ce62:	ee17 1a10 	vmov	r1, s14
 800ce66:	2900      	cmp	r1, #0
 800ce68:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ce6c:	f340 80dd 	ble.w	800d02a <__ieee754_powf+0x3e6>
 800ce70:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800ce74:	f240 80ca 	bls.w	800d00c <__ieee754_powf+0x3c8>
 800ce78:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ce7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce80:	bf4c      	ite	mi
 800ce82:	2001      	movmi	r0, #1
 800ce84:	2000      	movpl	r0, #0
 800ce86:	e791      	b.n	800cdac <__ieee754_powf+0x168>
 800ce88:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800ce8c:	bf01      	itttt	eq
 800ce8e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800d070 <__ieee754_powf+0x42c>
 800ce92:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800ce96:	f06f 0317 	mvneq.w	r3, #23
 800ce9a:	ee17 7a90 	vmoveq	r7, s15
 800ce9e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800cea2:	bf18      	it	ne
 800cea4:	2300      	movne	r3, #0
 800cea6:	3a7f      	subs	r2, #127	@ 0x7f
 800cea8:	441a      	add	r2, r3
 800ceaa:	4b72      	ldr	r3, [pc, #456]	@ (800d074 <__ieee754_powf+0x430>)
 800ceac:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800ceb0:	429f      	cmp	r7, r3
 800ceb2:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800ceb6:	dd06      	ble.n	800cec6 <__ieee754_powf+0x282>
 800ceb8:	4b6f      	ldr	r3, [pc, #444]	@ (800d078 <__ieee754_powf+0x434>)
 800ceba:	429f      	cmp	r7, r3
 800cebc:	f340 80a4 	ble.w	800d008 <__ieee754_powf+0x3c4>
 800cec0:	3201      	adds	r2, #1
 800cec2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800cec6:	2600      	movs	r6, #0
 800cec8:	4b6c      	ldr	r3, [pc, #432]	@ (800d07c <__ieee754_powf+0x438>)
 800ceca:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800cece:	ee07 1a10 	vmov	s14, r1
 800ced2:	edd3 5a00 	vldr	s11, [r3]
 800ced6:	4b6a      	ldr	r3, [pc, #424]	@ (800d080 <__ieee754_powf+0x43c>)
 800ced8:	ee75 7a87 	vadd.f32	s15, s11, s14
 800cedc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cee0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800cee4:	1049      	asrs	r1, r1, #1
 800cee6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800ceea:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800ceee:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800cef2:	ee37 6a65 	vsub.f32	s12, s14, s11
 800cef6:	ee07 1a90 	vmov	s15, r1
 800cefa:	ee26 5a24 	vmul.f32	s10, s12, s9
 800cefe:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800cf02:	ee15 7a10 	vmov	r7, s10
 800cf06:	401f      	ands	r7, r3
 800cf08:	ee06 7a90 	vmov	s13, r7
 800cf0c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800cf10:	ee37 7a65 	vsub.f32	s14, s14, s11
 800cf14:	ee65 7a05 	vmul.f32	s15, s10, s10
 800cf18:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800cf1c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800d084 <__ieee754_powf+0x440>
 800cf20:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800d088 <__ieee754_powf+0x444>
 800cf24:	eee7 5a87 	vfma.f32	s11, s15, s14
 800cf28:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800d08c <__ieee754_powf+0x448>
 800cf2c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800cf30:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800d060 <__ieee754_powf+0x41c>
 800cf34:	eee7 5a27 	vfma.f32	s11, s14, s15
 800cf38:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800d090 <__ieee754_powf+0x44c>
 800cf3c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800cf40:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800d094 <__ieee754_powf+0x450>
 800cf44:	ee26 6a24 	vmul.f32	s12, s12, s9
 800cf48:	eee7 5a27 	vfma.f32	s11, s14, s15
 800cf4c:	ee35 7a26 	vadd.f32	s14, s10, s13
 800cf50:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800cf54:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cf58:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800cf5c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800cf60:	eef0 5a67 	vmov.f32	s11, s15
 800cf64:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800cf68:	ee75 5a87 	vadd.f32	s11, s11, s14
 800cf6c:	ee15 1a90 	vmov	r1, s11
 800cf70:	4019      	ands	r1, r3
 800cf72:	ee05 1a90 	vmov	s11, r1
 800cf76:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800cf7a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800cf7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf82:	ee67 7a85 	vmul.f32	s15, s15, s10
 800cf86:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cf8a:	eeb0 6a67 	vmov.f32	s12, s15
 800cf8e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800cf92:	ee16 1a10 	vmov	r1, s12
 800cf96:	4019      	ands	r1, r3
 800cf98:	ee06 1a10 	vmov	s12, r1
 800cf9c:	eeb0 7a46 	vmov.f32	s14, s12
 800cfa0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800cfa4:	493c      	ldr	r1, [pc, #240]	@ (800d098 <__ieee754_powf+0x454>)
 800cfa6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800cfaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cfae:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800d09c <__ieee754_powf+0x458>
 800cfb2:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800d0a0 <__ieee754_powf+0x45c>
 800cfb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cfba:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800d0a4 <__ieee754_powf+0x460>
 800cfbe:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cfc2:	ed91 7a00 	vldr	s14, [r1]
 800cfc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cfca:	ee07 2a10 	vmov	s14, r2
 800cfce:	eef0 6a67 	vmov.f32	s13, s15
 800cfd2:	4a35      	ldr	r2, [pc, #212]	@ (800d0a8 <__ieee754_powf+0x464>)
 800cfd4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800cfd8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800cfdc:	ed92 5a00 	vldr	s10, [r2]
 800cfe0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cfe4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800cfe8:	ee76 6a87 	vadd.f32	s13, s13, s14
 800cfec:	ee16 2a90 	vmov	r2, s13
 800cff0:	4013      	ands	r3, r2
 800cff2:	ee06 3a90 	vmov	s13, r3
 800cff6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800cffa:	ee37 7a45 	vsub.f32	s14, s14, s10
 800cffe:	eea6 7a65 	vfms.f32	s14, s12, s11
 800d002:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d006:	e70f      	b.n	800ce28 <__ieee754_powf+0x1e4>
 800d008:	2601      	movs	r6, #1
 800d00a:	e75d      	b.n	800cec8 <__ieee754_powf+0x284>
 800d00c:	d152      	bne.n	800d0b4 <__ieee754_powf+0x470>
 800d00e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800d0ac <__ieee754_powf+0x468>
 800d012:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d016:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d01a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d022:	f73f af29 	bgt.w	800ce78 <__ieee754_powf+0x234>
 800d026:	2386      	movs	r3, #134	@ 0x86
 800d028:	e048      	b.n	800d0bc <__ieee754_powf+0x478>
 800d02a:	4a21      	ldr	r2, [pc, #132]	@ (800d0b0 <__ieee754_powf+0x46c>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d907      	bls.n	800d040 <__ieee754_powf+0x3fc>
 800d030:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d038:	bf4c      	ite	mi
 800d03a:	2001      	movmi	r0, #1
 800d03c:	2000      	movpl	r0, #0
 800d03e:	e6c1      	b.n	800cdc4 <__ieee754_powf+0x180>
 800d040:	d138      	bne.n	800d0b4 <__ieee754_powf+0x470>
 800d042:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d046:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d04e:	dbea      	blt.n	800d026 <__ieee754_powf+0x3e2>
 800d050:	e7ee      	b.n	800d030 <__ieee754_powf+0x3ec>
 800d052:	bf00      	nop
 800d054:	00000000 	.word	0x00000000
 800d058:	3f7ffff3 	.word	0x3f7ffff3
 800d05c:	3f800007 	.word	0x3f800007
 800d060:	3eaaaaab 	.word	0x3eaaaaab
 800d064:	3fb8aa3b 	.word	0x3fb8aa3b
 800d068:	36eca570 	.word	0x36eca570
 800d06c:	3fb8aa00 	.word	0x3fb8aa00
 800d070:	4b800000 	.word	0x4b800000
 800d074:	001cc471 	.word	0x001cc471
 800d078:	005db3d6 	.word	0x005db3d6
 800d07c:	0800dbc0 	.word	0x0800dbc0
 800d080:	fffff000 	.word	0xfffff000
 800d084:	3e6c3255 	.word	0x3e6c3255
 800d088:	3e53f142 	.word	0x3e53f142
 800d08c:	3e8ba305 	.word	0x3e8ba305
 800d090:	3edb6db7 	.word	0x3edb6db7
 800d094:	3f19999a 	.word	0x3f19999a
 800d098:	0800dbb0 	.word	0x0800dbb0
 800d09c:	3f76384f 	.word	0x3f76384f
 800d0a0:	3f763800 	.word	0x3f763800
 800d0a4:	369dc3a0 	.word	0x369dc3a0
 800d0a8:	0800dbb8 	.word	0x0800dbb8
 800d0ac:	3338aa3c 	.word	0x3338aa3c
 800d0b0:	43160000 	.word	0x43160000
 800d0b4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800d0b8:	d971      	bls.n	800d19e <__ieee754_powf+0x55a>
 800d0ba:	15db      	asrs	r3, r3, #23
 800d0bc:	3b7e      	subs	r3, #126	@ 0x7e
 800d0be:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800d0c2:	4118      	asrs	r0, r3
 800d0c4:	4408      	add	r0, r1
 800d0c6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d0ca:	4a3c      	ldr	r2, [pc, #240]	@ (800d1bc <__ieee754_powf+0x578>)
 800d0cc:	3b7f      	subs	r3, #127	@ 0x7f
 800d0ce:	411a      	asrs	r2, r3
 800d0d0:	4002      	ands	r2, r0
 800d0d2:	ee07 2a10 	vmov	s14, r2
 800d0d6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800d0da:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800d0de:	f1c3 0317 	rsb	r3, r3, #23
 800d0e2:	4118      	asrs	r0, r3
 800d0e4:	2900      	cmp	r1, #0
 800d0e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d0ea:	bfb8      	it	lt
 800d0ec:	4240      	neglt	r0, r0
 800d0ee:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d0f2:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800d1c0 <__ieee754_powf+0x57c>
 800d0f6:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800d1c4 <__ieee754_powf+0x580>
 800d0fa:	ee17 3a10 	vmov	r3, s14
 800d0fe:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d102:	f023 030f 	bic.w	r3, r3, #15
 800d106:	ee07 3a10 	vmov	s14, r3
 800d10a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d10e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d112:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d116:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800d1c8 <__ieee754_powf+0x584>
 800d11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d11e:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800d122:	eef0 6a67 	vmov.f32	s13, s15
 800d126:	eee7 6a06 	vfma.f32	s13, s14, s12
 800d12a:	eef0 5a66 	vmov.f32	s11, s13
 800d12e:	eee7 5a46 	vfms.f32	s11, s14, s12
 800d132:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d136:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d13a:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800d1cc <__ieee754_powf+0x588>
 800d13e:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800d1d0 <__ieee754_powf+0x58c>
 800d142:	eea7 6a25 	vfma.f32	s12, s14, s11
 800d146:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800d1d4 <__ieee754_powf+0x590>
 800d14a:	eee6 5a07 	vfma.f32	s11, s12, s14
 800d14e:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800d1d8 <__ieee754_powf+0x594>
 800d152:	eea5 6a87 	vfma.f32	s12, s11, s14
 800d156:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800d1dc <__ieee754_powf+0x598>
 800d15a:	eee6 5a07 	vfma.f32	s11, s12, s14
 800d15e:	eeb0 6a66 	vmov.f32	s12, s13
 800d162:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800d166:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800d16a:	ee66 5a86 	vmul.f32	s11, s13, s12
 800d16e:	ee36 6a47 	vsub.f32	s12, s12, s14
 800d172:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800d176:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800d17a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d17e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d182:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d186:	ee10 3a10 	vmov	r3, s0
 800d18a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d18e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d192:	da06      	bge.n	800d1a2 <__ieee754_powf+0x55e>
 800d194:	f000 f9b8 	bl	800d508 <scalbnf>
 800d198:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d19c:	e56a      	b.n	800cc74 <__ieee754_powf+0x30>
 800d19e:	2000      	movs	r0, #0
 800d1a0:	e7a5      	b.n	800d0ee <__ieee754_powf+0x4aa>
 800d1a2:	ee00 3a10 	vmov	s0, r3
 800d1a6:	e7f7      	b.n	800d198 <__ieee754_powf+0x554>
 800d1a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d1ac:	e562      	b.n	800cc74 <__ieee754_powf+0x30>
 800d1ae:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800d1e0 <__ieee754_powf+0x59c>
 800d1b2:	e55f      	b.n	800cc74 <__ieee754_powf+0x30>
 800d1b4:	eeb0 0a48 	vmov.f32	s0, s16
 800d1b8:	e55c      	b.n	800cc74 <__ieee754_powf+0x30>
 800d1ba:	bf00      	nop
 800d1bc:	ff800000 	.word	0xff800000
 800d1c0:	3f317218 	.word	0x3f317218
 800d1c4:	3f317200 	.word	0x3f317200
 800d1c8:	35bfbe8c 	.word	0x35bfbe8c
 800d1cc:	b5ddea0e 	.word	0xb5ddea0e
 800d1d0:	3331bb4c 	.word	0x3331bb4c
 800d1d4:	388ab355 	.word	0x388ab355
 800d1d8:	bb360b61 	.word	0xbb360b61
 800d1dc:	3e2aaaab 	.word	0x3e2aaaab
 800d1e0:	00000000 	.word	0x00000000

0800d1e4 <atanf>:
 800d1e4:	b538      	push	{r3, r4, r5, lr}
 800d1e6:	ee10 5a10 	vmov	r5, s0
 800d1ea:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800d1ee:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800d1f2:	eef0 7a40 	vmov.f32	s15, s0
 800d1f6:	d310      	bcc.n	800d21a <atanf+0x36>
 800d1f8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800d1fc:	d904      	bls.n	800d208 <atanf+0x24>
 800d1fe:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d202:	eeb0 0a67 	vmov.f32	s0, s15
 800d206:	bd38      	pop	{r3, r4, r5, pc}
 800d208:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800d340 <atanf+0x15c>
 800d20c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d344 <atanf+0x160>
 800d210:	2d00      	cmp	r5, #0
 800d212:	bfc8      	it	gt
 800d214:	eef0 7a47 	vmovgt.f32	s15, s14
 800d218:	e7f3      	b.n	800d202 <atanf+0x1e>
 800d21a:	4b4b      	ldr	r3, [pc, #300]	@ (800d348 <atanf+0x164>)
 800d21c:	429c      	cmp	r4, r3
 800d21e:	d810      	bhi.n	800d242 <atanf+0x5e>
 800d220:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800d224:	d20a      	bcs.n	800d23c <atanf+0x58>
 800d226:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800d34c <atanf+0x168>
 800d22a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d22e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d232:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d23a:	dce2      	bgt.n	800d202 <atanf+0x1e>
 800d23c:	f04f 33ff 	mov.w	r3, #4294967295
 800d240:	e013      	b.n	800d26a <atanf+0x86>
 800d242:	f7fe fd36 	bl	800bcb2 <fabsf>
 800d246:	4b42      	ldr	r3, [pc, #264]	@ (800d350 <atanf+0x16c>)
 800d248:	429c      	cmp	r4, r3
 800d24a:	d84f      	bhi.n	800d2ec <atanf+0x108>
 800d24c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800d250:	429c      	cmp	r4, r3
 800d252:	d841      	bhi.n	800d2d8 <atanf+0xf4>
 800d254:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800d258:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d25c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d260:	2300      	movs	r3, #0
 800d262:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d266:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d26a:	1c5a      	adds	r2, r3, #1
 800d26c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d270:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800d354 <atanf+0x170>
 800d274:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800d358 <atanf+0x174>
 800d278:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800d35c <atanf+0x178>
 800d27c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d280:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d284:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800d360 <atanf+0x17c>
 800d288:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d28c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800d364 <atanf+0x180>
 800d290:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d294:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d368 <atanf+0x184>
 800d298:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d29c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d36c <atanf+0x188>
 800d2a0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d2a4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d370 <atanf+0x18c>
 800d2a8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d2ac:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d374 <atanf+0x190>
 800d2b0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d2b4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800d378 <atanf+0x194>
 800d2b8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d2bc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800d37c <atanf+0x198>
 800d2c0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d2c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d2c8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d2cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d2d0:	d121      	bne.n	800d316 <atanf+0x132>
 800d2d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2d6:	e794      	b.n	800d202 <atanf+0x1e>
 800d2d8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d2dc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d2e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d2ea:	e7be      	b.n	800d26a <atanf+0x86>
 800d2ec:	4b24      	ldr	r3, [pc, #144]	@ (800d380 <atanf+0x19c>)
 800d2ee:	429c      	cmp	r4, r3
 800d2f0:	d80b      	bhi.n	800d30a <atanf+0x126>
 800d2f2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800d2f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d2fa:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d2fe:	2302      	movs	r3, #2
 800d300:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d308:	e7af      	b.n	800d26a <atanf+0x86>
 800d30a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d30e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d312:	2303      	movs	r3, #3
 800d314:	e7a9      	b.n	800d26a <atanf+0x86>
 800d316:	4a1b      	ldr	r2, [pc, #108]	@ (800d384 <atanf+0x1a0>)
 800d318:	491b      	ldr	r1, [pc, #108]	@ (800d388 <atanf+0x1a4>)
 800d31a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d31e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d322:	edd3 6a00 	vldr	s13, [r3]
 800d326:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d32a:	2d00      	cmp	r5, #0
 800d32c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d330:	edd2 7a00 	vldr	s15, [r2]
 800d334:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d338:	bfb8      	it	lt
 800d33a:	eef1 7a67 	vneglt.f32	s15, s15
 800d33e:	e760      	b.n	800d202 <atanf+0x1e>
 800d340:	bfc90fdb 	.word	0xbfc90fdb
 800d344:	3fc90fdb 	.word	0x3fc90fdb
 800d348:	3edfffff 	.word	0x3edfffff
 800d34c:	7149f2ca 	.word	0x7149f2ca
 800d350:	3f97ffff 	.word	0x3f97ffff
 800d354:	3c8569d7 	.word	0x3c8569d7
 800d358:	3d4bda59 	.word	0x3d4bda59
 800d35c:	bd6ef16b 	.word	0xbd6ef16b
 800d360:	3d886b35 	.word	0x3d886b35
 800d364:	3dba2e6e 	.word	0x3dba2e6e
 800d368:	3e124925 	.word	0x3e124925
 800d36c:	3eaaaaab 	.word	0x3eaaaaab
 800d370:	bd15a221 	.word	0xbd15a221
 800d374:	bd9d8795 	.word	0xbd9d8795
 800d378:	bde38e38 	.word	0xbde38e38
 800d37c:	be4ccccd 	.word	0xbe4ccccd
 800d380:	401bffff 	.word	0x401bffff
 800d384:	0800dbd8 	.word	0x0800dbd8
 800d388:	0800dbc8 	.word	0x0800dbc8
 800d38c:	00000000 	.word	0x00000000

0800d390 <scalbn>:
 800d390:	b570      	push	{r4, r5, r6, lr}
 800d392:	ec55 4b10 	vmov	r4, r5, d0
 800d396:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d39a:	4606      	mov	r6, r0
 800d39c:	462b      	mov	r3, r5
 800d39e:	b991      	cbnz	r1, 800d3c6 <scalbn+0x36>
 800d3a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d3a4:	4323      	orrs	r3, r4
 800d3a6:	d03d      	beq.n	800d424 <scalbn+0x94>
 800d3a8:	4b35      	ldr	r3, [pc, #212]	@ (800d480 <scalbn+0xf0>)
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	4629      	mov	r1, r5
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f7f3 f922 	bl	80005f8 <__aeabi_dmul>
 800d3b4:	4b33      	ldr	r3, [pc, #204]	@ (800d484 <scalbn+0xf4>)
 800d3b6:	429e      	cmp	r6, r3
 800d3b8:	4604      	mov	r4, r0
 800d3ba:	460d      	mov	r5, r1
 800d3bc:	da0f      	bge.n	800d3de <scalbn+0x4e>
 800d3be:	a328      	add	r3, pc, #160	@ (adr r3, 800d460 <scalbn+0xd0>)
 800d3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c4:	e01e      	b.n	800d404 <scalbn+0x74>
 800d3c6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d3ca:	4291      	cmp	r1, r2
 800d3cc:	d10b      	bne.n	800d3e6 <scalbn+0x56>
 800d3ce:	4622      	mov	r2, r4
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	4629      	mov	r1, r5
 800d3d4:	f7f2 ff5a 	bl	800028c <__adddf3>
 800d3d8:	4604      	mov	r4, r0
 800d3da:	460d      	mov	r5, r1
 800d3dc:	e022      	b.n	800d424 <scalbn+0x94>
 800d3de:	460b      	mov	r3, r1
 800d3e0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d3e4:	3936      	subs	r1, #54	@ 0x36
 800d3e6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d3ea:	4296      	cmp	r6, r2
 800d3ec:	dd0d      	ble.n	800d40a <scalbn+0x7a>
 800d3ee:	2d00      	cmp	r5, #0
 800d3f0:	a11d      	add	r1, pc, #116	@ (adr r1, 800d468 <scalbn+0xd8>)
 800d3f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3f6:	da02      	bge.n	800d3fe <scalbn+0x6e>
 800d3f8:	a11d      	add	r1, pc, #116	@ (adr r1, 800d470 <scalbn+0xe0>)
 800d3fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3fe:	a31a      	add	r3, pc, #104	@ (adr r3, 800d468 <scalbn+0xd8>)
 800d400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d404:	f7f3 f8f8 	bl	80005f8 <__aeabi_dmul>
 800d408:	e7e6      	b.n	800d3d8 <scalbn+0x48>
 800d40a:	1872      	adds	r2, r6, r1
 800d40c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d410:	428a      	cmp	r2, r1
 800d412:	dcec      	bgt.n	800d3ee <scalbn+0x5e>
 800d414:	2a00      	cmp	r2, #0
 800d416:	dd08      	ble.n	800d42a <scalbn+0x9a>
 800d418:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d41c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d420:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d424:	ec45 4b10 	vmov	d0, r4, r5
 800d428:	bd70      	pop	{r4, r5, r6, pc}
 800d42a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d42e:	da08      	bge.n	800d442 <scalbn+0xb2>
 800d430:	2d00      	cmp	r5, #0
 800d432:	a10b      	add	r1, pc, #44	@ (adr r1, 800d460 <scalbn+0xd0>)
 800d434:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d438:	dac1      	bge.n	800d3be <scalbn+0x2e>
 800d43a:	a10f      	add	r1, pc, #60	@ (adr r1, 800d478 <scalbn+0xe8>)
 800d43c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d440:	e7bd      	b.n	800d3be <scalbn+0x2e>
 800d442:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d446:	3236      	adds	r2, #54	@ 0x36
 800d448:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d44c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d450:	4620      	mov	r0, r4
 800d452:	4b0d      	ldr	r3, [pc, #52]	@ (800d488 <scalbn+0xf8>)
 800d454:	4629      	mov	r1, r5
 800d456:	2200      	movs	r2, #0
 800d458:	e7d4      	b.n	800d404 <scalbn+0x74>
 800d45a:	bf00      	nop
 800d45c:	f3af 8000 	nop.w
 800d460:	c2f8f359 	.word	0xc2f8f359
 800d464:	01a56e1f 	.word	0x01a56e1f
 800d468:	8800759c 	.word	0x8800759c
 800d46c:	7e37e43c 	.word	0x7e37e43c
 800d470:	8800759c 	.word	0x8800759c
 800d474:	fe37e43c 	.word	0xfe37e43c
 800d478:	c2f8f359 	.word	0xc2f8f359
 800d47c:	81a56e1f 	.word	0x81a56e1f
 800d480:	43500000 	.word	0x43500000
 800d484:	ffff3cb0 	.word	0xffff3cb0
 800d488:	3c900000 	.word	0x3c900000

0800d48c <with_errno>:
 800d48c:	b510      	push	{r4, lr}
 800d48e:	ed2d 8b02 	vpush	{d8}
 800d492:	eeb0 8a40 	vmov.f32	s16, s0
 800d496:	eef0 8a60 	vmov.f32	s17, s1
 800d49a:	4604      	mov	r4, r0
 800d49c:	f7fc fd1e 	bl	8009edc <__errno>
 800d4a0:	eeb0 0a48 	vmov.f32	s0, s16
 800d4a4:	eef0 0a68 	vmov.f32	s1, s17
 800d4a8:	ecbd 8b02 	vpop	{d8}
 800d4ac:	6004      	str	r4, [r0, #0]
 800d4ae:	bd10      	pop	{r4, pc}

0800d4b0 <xflow>:
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	b507      	push	{r0, r1, r2, lr}
 800d4b4:	ec51 0b10 	vmov	r0, r1, d0
 800d4b8:	b183      	cbz	r3, 800d4dc <xflow+0x2c>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d4c0:	e9cd 2300 	strd	r2, r3, [sp]
 800d4c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4c8:	f7f3 f896 	bl	80005f8 <__aeabi_dmul>
 800d4cc:	ec41 0b10 	vmov	d0, r0, r1
 800d4d0:	2022      	movs	r0, #34	@ 0x22
 800d4d2:	b003      	add	sp, #12
 800d4d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4d8:	f7ff bfd8 	b.w	800d48c <with_errno>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	460b      	mov	r3, r1
 800d4e0:	e7ee      	b.n	800d4c0 <xflow+0x10>
 800d4e2:	0000      	movs	r0, r0
 800d4e4:	0000      	movs	r0, r0
	...

0800d4e8 <__math_uflow>:
 800d4e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d4f0 <__math_uflow+0x8>
 800d4ec:	f7ff bfe0 	b.w	800d4b0 <xflow>
 800d4f0:	00000000 	.word	0x00000000
 800d4f4:	10000000 	.word	0x10000000

0800d4f8 <__math_oflow>:
 800d4f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d500 <__math_oflow+0x8>
 800d4fc:	f7ff bfd8 	b.w	800d4b0 <xflow>
 800d500:	00000000 	.word	0x00000000
 800d504:	70000000 	.word	0x70000000

0800d508 <scalbnf>:
 800d508:	ee10 3a10 	vmov	r3, s0
 800d50c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d510:	d02b      	beq.n	800d56a <scalbnf+0x62>
 800d512:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d516:	d302      	bcc.n	800d51e <scalbnf+0x16>
 800d518:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d51c:	4770      	bx	lr
 800d51e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d522:	d123      	bne.n	800d56c <scalbnf+0x64>
 800d524:	4b24      	ldr	r3, [pc, #144]	@ (800d5b8 <scalbnf+0xb0>)
 800d526:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800d5bc <scalbnf+0xb4>
 800d52a:	4298      	cmp	r0, r3
 800d52c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d530:	db17      	blt.n	800d562 <scalbnf+0x5a>
 800d532:	ee10 3a10 	vmov	r3, s0
 800d536:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d53a:	3a19      	subs	r2, #25
 800d53c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d540:	4288      	cmp	r0, r1
 800d542:	dd15      	ble.n	800d570 <scalbnf+0x68>
 800d544:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d5c0 <scalbnf+0xb8>
 800d548:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d5c4 <scalbnf+0xbc>
 800d54c:	ee10 3a10 	vmov	r3, s0
 800d550:	eeb0 7a67 	vmov.f32	s14, s15
 800d554:	2b00      	cmp	r3, #0
 800d556:	bfb8      	it	lt
 800d558:	eef0 7a66 	vmovlt.f32	s15, s13
 800d55c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d560:	4770      	bx	lr
 800d562:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d5c8 <scalbnf+0xc0>
 800d566:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d56a:	4770      	bx	lr
 800d56c:	0dd2      	lsrs	r2, r2, #23
 800d56e:	e7e5      	b.n	800d53c <scalbnf+0x34>
 800d570:	4410      	add	r0, r2
 800d572:	28fe      	cmp	r0, #254	@ 0xfe
 800d574:	dce6      	bgt.n	800d544 <scalbnf+0x3c>
 800d576:	2800      	cmp	r0, #0
 800d578:	dd06      	ble.n	800d588 <scalbnf+0x80>
 800d57a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d57e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d582:	ee00 3a10 	vmov	s0, r3
 800d586:	4770      	bx	lr
 800d588:	f110 0f16 	cmn.w	r0, #22
 800d58c:	da09      	bge.n	800d5a2 <scalbnf+0x9a>
 800d58e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800d5c8 <scalbnf+0xc0>
 800d592:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d5cc <scalbnf+0xc4>
 800d596:	ee10 3a10 	vmov	r3, s0
 800d59a:	eeb0 7a67 	vmov.f32	s14, s15
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	e7d9      	b.n	800d556 <scalbnf+0x4e>
 800d5a2:	3019      	adds	r0, #25
 800d5a4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d5a8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d5ac:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d5d0 <scalbnf+0xc8>
 800d5b0:	ee07 3a90 	vmov	s15, r3
 800d5b4:	e7d7      	b.n	800d566 <scalbnf+0x5e>
 800d5b6:	bf00      	nop
 800d5b8:	ffff3cb0 	.word	0xffff3cb0
 800d5bc:	4c000000 	.word	0x4c000000
 800d5c0:	7149f2ca 	.word	0x7149f2ca
 800d5c4:	f149f2ca 	.word	0xf149f2ca
 800d5c8:	0da24260 	.word	0x0da24260
 800d5cc:	8da24260 	.word	0x8da24260
 800d5d0:	33000000 	.word	0x33000000

0800d5d4 <with_errnof>:
 800d5d4:	b510      	push	{r4, lr}
 800d5d6:	ed2d 8b02 	vpush	{d8}
 800d5da:	eeb0 8a40 	vmov.f32	s16, s0
 800d5de:	4604      	mov	r4, r0
 800d5e0:	f7fc fc7c 	bl	8009edc <__errno>
 800d5e4:	eeb0 0a48 	vmov.f32	s0, s16
 800d5e8:	ecbd 8b02 	vpop	{d8}
 800d5ec:	6004      	str	r4, [r0, #0]
 800d5ee:	bd10      	pop	{r4, pc}

0800d5f0 <xflowf>:
 800d5f0:	b130      	cbz	r0, 800d600 <xflowf+0x10>
 800d5f2:	eef1 7a40 	vneg.f32	s15, s0
 800d5f6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d5fa:	2022      	movs	r0, #34	@ 0x22
 800d5fc:	f7ff bfea 	b.w	800d5d4 <with_errnof>
 800d600:	eef0 7a40 	vmov.f32	s15, s0
 800d604:	e7f7      	b.n	800d5f6 <xflowf+0x6>
	...

0800d608 <__math_uflowf>:
 800d608:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d610 <__math_uflowf+0x8>
 800d60c:	f7ff bff0 	b.w	800d5f0 <xflowf>
 800d610:	10000000 	.word	0x10000000

0800d614 <__math_oflowf>:
 800d614:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d61c <__math_oflowf+0x8>
 800d618:	f7ff bfea 	b.w	800d5f0 <xflowf>
 800d61c:	70000000 	.word	0x70000000

0800d620 <__ieee754_sqrtf>:
 800d620:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d624:	4770      	bx	lr
	...

0800d628 <_init>:
 800d628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d62a:	bf00      	nop
 800d62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d62e:	bc08      	pop	{r3}
 800d630:	469e      	mov	lr, r3
 800d632:	4770      	bx	lr

0800d634 <_fini>:
 800d634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d636:	bf00      	nop
 800d638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d63a:	bc08      	pop	{r3}
 800d63c:	469e      	mov	lr, r3
 800d63e:	4770      	bx	lr
